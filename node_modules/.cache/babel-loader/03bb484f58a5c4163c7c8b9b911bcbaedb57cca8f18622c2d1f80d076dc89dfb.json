{"ast":null,"code":"import { Observable, bridgeSupports, noop, performDraw, startSessionManager } from '@datadog/browser-core';\nexport var RUM_SESSION_KEY = 'rum';\nexport function startRumSessionManager(configuration, lifeCycle, trackingConsentState) {\n  var sessionManager = startSessionManager(configuration, RUM_SESSION_KEY, function (rawTrackingType) {\n    return computeSessionState(configuration, rawTrackingType);\n  }, trackingConsentState);\n  sessionManager.expireObservable.subscribe(function () {\n    lifeCycle.notify(9 /* LifeCycleEventType.SESSION_EXPIRED */);\n  });\n  sessionManager.renewObservable.subscribe(function () {\n    lifeCycle.notify(10 /* LifeCycleEventType.SESSION_RENEWED */);\n  });\n  return {\n    findTrackedSession: function (startTime) {\n      var session = sessionManager.findActiveSession(startTime);\n      if (!session || !isTypeTracked(session.trackingType)) {\n        return;\n      }\n      return {\n        id: session.id,\n        sessionReplayAllowed: session.trackingType === \"1\" /* RumTrackingType.TRACKED_WITH_SESSION_REPLAY */\n      };\n    },\n    expire: sessionManager.expire,\n    expireObservable: sessionManager.expireObservable\n  };\n}\n/**\n * Start a tracked replay session stub\n */\nexport function startRumSessionManagerStub() {\n  var session = {\n    id: '00000000-aaaa-0000-aaaa-000000000000',\n    sessionReplayAllowed: bridgeSupports(\"records\" /* BridgeCapability.RECORDS */)\n  };\n  return {\n    findTrackedSession: function () {\n      return session;\n    },\n    expire: noop,\n    expireObservable: new Observable()\n  };\n}\nfunction computeSessionState(configuration, rawTrackingType) {\n  var trackingType;\n  if (hasValidRumSession(rawTrackingType)) {\n    trackingType = rawTrackingType;\n  } else if (!performDraw(configuration.sessionSampleRate)) {\n    trackingType = \"0\" /* RumTrackingType.NOT_TRACKED */;\n  } else if (!performDraw(configuration.sessionReplaySampleRate)) {\n    trackingType = \"2\" /* RumTrackingType.TRACKED_WITHOUT_SESSION_REPLAY */;\n  } else {\n    trackingType = \"1\" /* RumTrackingType.TRACKED_WITH_SESSION_REPLAY */;\n  }\n  return {\n    trackingType: trackingType,\n    isTracked: isTypeTracked(trackingType)\n  };\n}\nfunction hasValidRumSession(trackingType) {\n  return trackingType === \"0\" /* RumTrackingType.NOT_TRACKED */ || trackingType === \"1\" /* RumTrackingType.TRACKED_WITH_SESSION_REPLAY */ || trackingType === \"2\" /* RumTrackingType.TRACKED_WITHOUT_SESSION_REPLAY */;\n}\nfunction isTypeTracked(rumSessionType) {\n  return rumSessionType === \"2\" /* RumTrackingType.TRACKED_WITHOUT_SESSION_REPLAY */ || rumSessionType === \"1\" /* RumTrackingType.TRACKED_WITH_SESSION_REPLAY */;\n}","map":{"version":3,"names":["Observable","bridgeSupports","noop","performDraw","startSessionManager","RUM_SESSION_KEY","startRumSessionManager","configuration","lifeCycle","trackingConsentState","sessionManager","rawTrackingType","computeSessionState","expireObservable","subscribe","notify","renewObservable","findTrackedSession","startTime","session","findActiveSession","isTypeTracked","trackingType","id","sessionReplayAllowed","expire","startRumSessionManagerStub","hasValidRumSession","sessionSampleRate","sessionReplaySampleRate","isTracked","rumSessionType"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\rumSessionManager.ts"],"sourcesContent":["import type { RelativeTime, TrackingConsentState } from '@datadog/browser-core'\nimport {\n  BridgeCapability,\n  Observable,\n  bridgeSupports,\n  noop,\n  performDraw,\n  startSessionManager,\n} from '@datadog/browser-core'\nimport type { RumConfiguration } from './configuration'\nimport type { LifeCycle } from './lifeCycle'\nimport { LifeCycleEventType } from './lifeCycle'\n\nexport const RUM_SESSION_KEY = 'rum'\n\nexport interface RumSessionManager {\n  findTrackedSession: (startTime?: RelativeTime) => RumSession | undefined\n  expire: () => void\n  expireObservable: Observable<void>\n}\n\nexport type RumSession = {\n  id: string\n  sessionReplayAllowed: boolean\n}\n\nexport const enum RumTrackingType {\n  NOT_TRACKED = '0',\n  TRACKED_WITH_SESSION_REPLAY = '1',\n  TRACKED_WITHOUT_SESSION_REPLAY = '2',\n}\n\nexport function startRumSessionManager(\n  configuration: RumConfiguration,\n  lifeCycle: LifeCycle,\n  trackingConsentState: TrackingConsentState\n): RumSessionManager {\n  const sessionManager = startSessionManager(\n    configuration,\n    RUM_SESSION_KEY,\n    (rawTrackingType) => computeSessionState(configuration, rawTrackingType),\n    trackingConsentState\n  )\n\n  sessionManager.expireObservable.subscribe(() => {\n    lifeCycle.notify(LifeCycleEventType.SESSION_EXPIRED)\n  })\n\n  sessionManager.renewObservable.subscribe(() => {\n    lifeCycle.notify(LifeCycleEventType.SESSION_RENEWED)\n  })\n\n  return {\n    findTrackedSession: (startTime) => {\n      const session = sessionManager.findActiveSession(startTime)\n      if (!session || !isTypeTracked(session.trackingType)) {\n        return\n      }\n      return {\n        id: session.id,\n        sessionReplayAllowed: session.trackingType === RumTrackingType.TRACKED_WITH_SESSION_REPLAY,\n      }\n    },\n    expire: sessionManager.expire,\n    expireObservable: sessionManager.expireObservable,\n  }\n}\n\n/**\n * Start a tracked replay session stub\n */\nexport function startRumSessionManagerStub(): RumSessionManager {\n  const session: RumSession = {\n    id: '00000000-aaaa-0000-aaaa-000000000000',\n    sessionReplayAllowed: bridgeSupports(BridgeCapability.RECORDS),\n  }\n  return {\n    findTrackedSession: () => session,\n    expire: noop,\n    expireObservable: new Observable(),\n  }\n}\n\nfunction computeSessionState(configuration: RumConfiguration, rawTrackingType?: string) {\n  let trackingType: RumTrackingType\n  if (hasValidRumSession(rawTrackingType)) {\n    trackingType = rawTrackingType\n  } else if (!performDraw(configuration.sessionSampleRate)) {\n    trackingType = RumTrackingType.NOT_TRACKED\n  } else if (!performDraw(configuration.sessionReplaySampleRate)) {\n    trackingType = RumTrackingType.TRACKED_WITHOUT_SESSION_REPLAY\n  } else {\n    trackingType = RumTrackingType.TRACKED_WITH_SESSION_REPLAY\n  }\n  return {\n    trackingType,\n    isTracked: isTypeTracked(trackingType),\n  }\n}\n\nfunction hasValidRumSession(trackingType?: string): trackingType is RumTrackingType {\n  return (\n    trackingType === RumTrackingType.NOT_TRACKED ||\n    trackingType === RumTrackingType.TRACKED_WITH_SESSION_REPLAY ||\n    trackingType === RumTrackingType.TRACKED_WITHOUT_SESSION_REPLAY\n  )\n}\n\nfunction isTypeTracked(rumSessionType: RumTrackingType | undefined) {\n  return (\n    rumSessionType === RumTrackingType.TRACKED_WITHOUT_SESSION_REPLAY ||\n    rumSessionType === RumTrackingType.TRACKED_WITH_SESSION_REPLAY\n  )\n}\n"],"mappings":"AACA,SAEEA,UAAU,EACVC,cAAc,EACdC,IAAI,EACJC,WAAW,EACXC,mBAAmB,QACd,uBAAuB;AAK9B,OAAO,IAAMC,eAAe,GAAG,KAAK;AAmBpC,OAAM,SAAUC,sBAAsBA,CACpCC,aAA+B,EAC/BC,SAAoB,EACpBC,oBAA0C;EAE1C,IAAMC,cAAc,GAAGN,mBAAmB,CACxCG,aAAa,EACbF,eAAe,EACf,UAACM,eAAe;IAAK,OAAAC,mBAAmB,CAACL,aAAa,EAAEI,eAAe,CAAC;EAAnD,CAAmD,EACxEF,oBAAoB,CACrB;EAEDC,cAAc,CAACG,gBAAgB,CAACC,SAAS,CAAC;IACxCN,SAAS,CAACO,MAAM,4CAAoC;EACtD,CAAC,CAAC;EAEFL,cAAc,CAACM,eAAe,CAACF,SAAS,CAAC;IACvCN,SAAS,CAACO,MAAM,6CAAoC;EACtD,CAAC,CAAC;EAEF,OAAO;IACLE,kBAAkB,EAAE,SAAAA,CAACC,SAAS;MAC5B,IAAMC,OAAO,GAAGT,cAAc,CAACU,iBAAiB,CAACF,SAAS,CAAC;MAC3D,IAAI,CAACC,OAAO,IAAI,CAACE,aAAa,CAACF,OAAO,CAACG,YAAY,CAAC,EAAE;QACpD;MACF;MACA,OAAO;QACLC,EAAE,EAAEJ,OAAO,CAACI,EAAE;QACdC,oBAAoB,EAAEL,OAAO,CAACG,YAAY;OAC3C;IACH,CAAC;IACDG,MAAM,EAAEf,cAAc,CAACe,MAAM;IAC7BZ,gBAAgB,EAAEH,cAAc,CAACG;GAClC;AACH;AAEA;;;AAGA,OAAM,SAAUa,0BAA0BA,CAAA;EACxC,IAAMP,OAAO,GAAe;IAC1BI,EAAE,EAAE,sCAAsC;IAC1CC,oBAAoB,EAAEvB,cAAc;GACrC;EACD,OAAO;IACLgB,kBAAkB,EAAE,SAAAA,CAAA;MAAM,OAAAE,OAAO;IAAP,CAAO;IACjCM,MAAM,EAAEvB,IAAI;IACZW,gBAAgB,EAAE,IAAIb,UAAU;GACjC;AACH;AAEA,SAASY,mBAAmBA,CAACL,aAA+B,EAAEI,eAAwB;EACpF,IAAIW,YAA6B;EACjC,IAAIK,kBAAkB,CAAChB,eAAe,CAAC,EAAE;IACvCW,YAAY,GAAGX,eAAe;EAChC,CAAC,MAAM,IAAI,CAACR,WAAW,CAACI,aAAa,CAACqB,iBAAiB,CAAC,EAAE;IACxDN,YAAY;EACd,CAAC,MAAM,IAAI,CAACnB,WAAW,CAACI,aAAa,CAACsB,uBAAuB,CAAC,EAAE;IAC9DP,YAAY;EACd,CAAC,MAAM;IACLA,YAAY;EACd;EACA,OAAO;IACLA,YAAY,EAAAA,YAAA;IACZQ,SAAS,EAAET,aAAa,CAACC,YAAY;GACtC;AACH;AAEA,SAASK,kBAAkBA,CAACL,YAAqB;EAC/C,OACEA,YAAY,8CACZA,YAAY,8DACZA,YAAY;AAEhB;AAEA,SAASD,aAAaA,CAACU,cAA2C;EAChE,OACEA,cAAc,iEACdA,cAAc;AAElB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}