{"ast":null,"code":"import { addEventListener, DOM_EVENT } from '@datadog/browser-core';\nexport function listenActionEvents(configuration, _a) {\n  var onPointerDown = _a.onPointerDown,\n    onPointerUp = _a.onPointerUp;\n  var selectionEmptyAtPointerDown;\n  var userActivity = {\n    selection: false,\n    input: false,\n    scroll: false\n  };\n  var clickContext;\n  var listeners = [addEventListener(configuration, window, DOM_EVENT.POINTER_DOWN, function (event) {\n    if (isValidPointerEvent(event)) {\n      selectionEmptyAtPointerDown = isSelectionEmpty();\n      userActivity = {\n        selection: false,\n        input: false,\n        scroll: false\n      };\n      clickContext = onPointerDown(event);\n    }\n  }, {\n    capture: true\n  }), addEventListener(configuration, window, DOM_EVENT.SELECTION_CHANGE, function () {\n    if (!selectionEmptyAtPointerDown || !isSelectionEmpty()) {\n      userActivity.selection = true;\n    }\n  }, {\n    capture: true\n  }), addEventListener(configuration, window, DOM_EVENT.SCROLL, function () {\n    userActivity.scroll = true;\n  }, {\n    capture: true,\n    passive: true\n  }), addEventListener(configuration, window, DOM_EVENT.POINTER_UP, function (event) {\n    if (isValidPointerEvent(event) && clickContext) {\n      // Use a scoped variable to make sure the value is not changed by other clicks\n      var localUserActivity_1 = userActivity;\n      onPointerUp(clickContext, event, function () {\n        return localUserActivity_1;\n      });\n      clickContext = undefined;\n    }\n  }, {\n    capture: true\n  }), addEventListener(configuration, window, DOM_EVENT.INPUT, function () {\n    userActivity.input = true;\n  }, {\n    capture: true\n  })];\n  return {\n    stop: function () {\n      listeners.forEach(function (listener) {\n        return listener.stop();\n      });\n    }\n  };\n}\nfunction isSelectionEmpty() {\n  var selection = window.getSelection();\n  return !selection || selection.isCollapsed;\n}\nfunction isValidPointerEvent(event) {\n  return event.target instanceof Element &&\n  // Only consider 'primary' pointer events for now. Multi-touch support could be implemented in\n  // the future.\n  event.isPrimary !== false;\n}","map":{"version":3,"names":["addEventListener","DOM_EVENT","listenActionEvents","configuration","_a","onPointerDown","onPointerUp","selectionEmptyAtPointerDown","userActivity","selection","input","scroll","clickContext","listeners","window","POINTER_DOWN","event","isValidPointerEvent","isSelectionEmpty","capture","SELECTION_CHANGE","SCROLL","passive","POINTER_UP","localUserActivity_1","undefined","INPUT","stop","forEach","listener","getSelection","isCollapsed","target","Element","isPrimary"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\action\\listenActionEvents.ts"],"sourcesContent":["import { addEventListener, DOM_EVENT } from '@datadog/browser-core'\nimport type { RumConfiguration } from '../configuration'\n\nexport type MouseEventOnElement = PointerEvent & { target: Element }\n\nexport interface UserActivity {\n  selection: boolean\n  input: boolean\n  scroll: boolean\n}\nexport interface ActionEventsHooks<ClickContext> {\n  onPointerDown: (event: MouseEventOnElement) => ClickContext | undefined\n  onPointerUp: (context: ClickContext, event: MouseEventOnElement, getUserActivity: () => UserActivity) => void\n}\n\nexport function listenActionEvents<ClickContext>(\n  configuration: RumConfiguration,\n  { onPointerDown, onPointerUp }: ActionEventsHooks<ClickContext>\n) {\n  let selectionEmptyAtPointerDown: boolean\n  let userActivity: UserActivity = {\n    selection: false,\n    input: false,\n    scroll: false,\n  }\n  let clickContext: ClickContext | undefined\n\n  const listeners = [\n    addEventListener(\n      configuration,\n      window,\n      DOM_EVENT.POINTER_DOWN,\n      (event: PointerEvent) => {\n        if (isValidPointerEvent(event)) {\n          selectionEmptyAtPointerDown = isSelectionEmpty()\n          userActivity = {\n            selection: false,\n            input: false,\n            scroll: false,\n          }\n          clickContext = onPointerDown(event)\n        }\n      },\n      { capture: true }\n    ),\n\n    addEventListener(\n      configuration,\n      window,\n      DOM_EVENT.SELECTION_CHANGE,\n      () => {\n        if (!selectionEmptyAtPointerDown || !isSelectionEmpty()) {\n          userActivity.selection = true\n        }\n      },\n      { capture: true }\n    ),\n\n    addEventListener(\n      configuration,\n      window,\n      DOM_EVENT.SCROLL,\n      () => {\n        userActivity.scroll = true\n      },\n      { capture: true, passive: true }\n    ),\n\n    addEventListener(\n      configuration,\n      window,\n      DOM_EVENT.POINTER_UP,\n      (event: PointerEvent) => {\n        if (isValidPointerEvent(event) && clickContext) {\n          // Use a scoped variable to make sure the value is not changed by other clicks\n          const localUserActivity = userActivity\n          onPointerUp(clickContext, event, () => localUserActivity)\n          clickContext = undefined\n        }\n      },\n      { capture: true }\n    ),\n\n    addEventListener(\n      configuration,\n      window,\n      DOM_EVENT.INPUT,\n      () => {\n        userActivity.input = true\n      },\n      { capture: true }\n    ),\n  ]\n\n  return {\n    stop: () => {\n      listeners.forEach((listener) => listener.stop())\n    },\n  }\n}\n\nfunction isSelectionEmpty(): boolean {\n  const selection = window.getSelection()\n  return !selection || selection.isCollapsed\n}\n\nfunction isValidPointerEvent(event: PointerEvent): event is MouseEventOnElement {\n  return (\n    event.target instanceof Element &&\n    // Only consider 'primary' pointer events for now. Multi-touch support could be implemented in\n    // the future.\n    event.isPrimary !== false\n  )\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,SAAS,QAAQ,uBAAuB;AAenE,OAAM,SAAUC,kBAAkBA,CAChCC,aAA+B,EAC/BC,EAA+D;MAA7DC,aAAa,GAAAD,EAAA,CAAAC,aAAA;IAAEC,WAAW,GAAAF,EAAA,CAAAE,WAAA;EAE5B,IAAIC,2BAAoC;EACxC,IAAIC,YAAY,GAAiB;IAC/BC,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE,KAAK;IACZC,MAAM,EAAE;GACT;EACD,IAAIC,YAAsC;EAE1C,IAAMC,SAAS,GAAG,CAChBb,gBAAgB,CACdG,aAAa,EACbW,MAAM,EACNb,SAAS,CAACc,YAAY,EACtB,UAACC,KAAmB;IAClB,IAAIC,mBAAmB,CAACD,KAAK,CAAC,EAAE;MAC9BT,2BAA2B,GAAGW,gBAAgB,EAAE;MAChDV,YAAY,GAAG;QACbC,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAE,KAAK;QACZC,MAAM,EAAE;OACT;MACDC,YAAY,GAAGP,aAAa,CAACW,KAAK,CAAC;IACrC;EACF,CAAC,EACD;IAAEG,OAAO,EAAE;EAAI,CAAE,CAClB,EAEDnB,gBAAgB,CACdG,aAAa,EACbW,MAAM,EACNb,SAAS,CAACmB,gBAAgB,EAC1B;IACE,IAAI,CAACb,2BAA2B,IAAI,CAACW,gBAAgB,EAAE,EAAE;MACvDV,YAAY,CAACC,SAAS,GAAG,IAAI;IAC/B;EACF,CAAC,EACD;IAAEU,OAAO,EAAE;EAAI,CAAE,CAClB,EAEDnB,gBAAgB,CACdG,aAAa,EACbW,MAAM,EACNb,SAAS,CAACoB,MAAM,EAChB;IACEb,YAAY,CAACG,MAAM,GAAG,IAAI;EAC5B,CAAC,EACD;IAAEQ,OAAO,EAAE,IAAI;IAAEG,OAAO,EAAE;EAAI,CAAE,CACjC,EAEDtB,gBAAgB,CACdG,aAAa,EACbW,MAAM,EACNb,SAAS,CAACsB,UAAU,EACpB,UAACP,KAAmB;IAClB,IAAIC,mBAAmB,CAACD,KAAK,CAAC,IAAIJ,YAAY,EAAE;MAC9C;MACA,IAAMY,mBAAiB,GAAGhB,YAAY;MACtCF,WAAW,CAACM,YAAY,EAAEI,KAAK,EAAE;QAAM,OAAAQ,mBAAiB;MAAjB,CAAiB,CAAC;MACzDZ,YAAY,GAAGa,SAAS;IAC1B;EACF,CAAC,EACD;IAAEN,OAAO,EAAE;EAAI,CAAE,CAClB,EAEDnB,gBAAgB,CACdG,aAAa,EACbW,MAAM,EACNb,SAAS,CAACyB,KAAK,EACf;IACElB,YAAY,CAACE,KAAK,GAAG,IAAI;EAC3B,CAAC,EACD;IAAES,OAAO,EAAE;EAAI,CAAE,CAClB,CACF;EAED,OAAO;IACLQ,IAAI,EAAE,SAAAA,CAAA;MACJd,SAAS,CAACe,OAAO,CAAC,UAACC,QAAQ;QAAK,OAAAA,QAAQ,CAACF,IAAI,EAAE;MAAf,CAAe,CAAC;IAClD;GACD;AACH;AAEA,SAAST,gBAAgBA,CAAA;EACvB,IAAMT,SAAS,GAAGK,MAAM,CAACgB,YAAY,EAAE;EACvC,OAAO,CAACrB,SAAS,IAAIA,SAAS,CAACsB,WAAW;AAC5C;AAEA,SAASd,mBAAmBA,CAACD,KAAmB;EAC9C,OACEA,KAAK,CAACgB,MAAM,YAAYC,OAAO;EAC/B;EACA;EACAjB,KAAK,CAACkB,SAAS,KAAK,KAAK;AAE7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}