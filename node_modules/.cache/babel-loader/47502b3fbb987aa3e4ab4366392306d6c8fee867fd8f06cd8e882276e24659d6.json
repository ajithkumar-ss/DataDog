{"ast":null,"code":"export var ONE_KIBI_BYTE = 1024;\nexport var ONE_MEBI_BYTE = 1024 * ONE_KIBI_BYTE;\n// eslint-disable-next-line no-control-regex\nvar HAS_MULTI_BYTES_CHARACTERS = /[^\\u0000-\\u007F]/;\nexport function computeBytesCount(candidate) {\n  // Accurate bytes count computations can degrade performances when there is a lot of events to process\n  if (!HAS_MULTI_BYTES_CHARACTERS.test(candidate)) {\n    return candidate.length;\n  }\n  if (window.TextEncoder !== undefined) {\n    return new TextEncoder().encode(candidate).length;\n  }\n  return new Blob([candidate]).size;\n}\nexport function concatBuffers(buffers) {\n  var length = buffers.reduce(function (total, buffer) {\n    return total + buffer.length;\n  }, 0);\n  var result = new Uint8Array(length);\n  var offset = 0;\n  for (var _i = 0, buffers_1 = buffers; _i < buffers_1.length; _i++) {\n    var buffer = buffers_1[_i];\n    result.set(buffer, offset);\n    offset += buffer.length;\n  }\n  return result;\n}","map":{"version":3,"names":["ONE_KIBI_BYTE","ONE_MEBI_BYTE","HAS_MULTI_BYTES_CHARACTERS","computeBytesCount","candidate","test","length","window","TextEncoder","undefined","encode","Blob","size","concatBuffers","buffers","reduce","total","buffer","result","Uint8Array","offset","_i","buffers_1","set"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\tools\\utils\\byteUtils.ts"],"sourcesContent":["export const ONE_KIBI_BYTE = 1024\nexport const ONE_MEBI_BYTE = 1024 * ONE_KIBI_BYTE\n\n// eslint-disable-next-line no-control-regex\nconst HAS_MULTI_BYTES_CHARACTERS = /[^\\u0000-\\u007F]/\n\nexport function computeBytesCount(candidate: string): number {\n  // Accurate bytes count computations can degrade performances when there is a lot of events to process\n  if (!HAS_MULTI_BYTES_CHARACTERS.test(candidate)) {\n    return candidate.length\n  }\n\n  if (window.TextEncoder !== undefined) {\n    return new TextEncoder().encode(candidate).length\n  }\n\n  return new Blob([candidate]).size\n}\n\nexport function concatBuffers(buffers: Uint8Array[]) {\n  const length = buffers.reduce((total, buffer) => total + buffer.length, 0)\n  const result = new Uint8Array(length)\n  let offset = 0\n  for (const buffer of buffers) {\n    result.set(buffer, offset)\n    offset += buffer.length\n  }\n  return result\n}\n"],"mappings":"AAAA,OAAO,IAAMA,aAAa,GAAG,IAAI;AACjC,OAAO,IAAMC,aAAa,GAAG,IAAI,GAAGD,aAAa;AAEjD;AACA,IAAME,0BAA0B,GAAG,kBAAkB;AAErD,OAAM,SAAUC,iBAAiBA,CAACC,SAAiB;EACjD;EACA,IAAI,CAACF,0BAA0B,CAACG,IAAI,CAACD,SAAS,CAAC,EAAE;IAC/C,OAAOA,SAAS,CAACE,MAAM;EACzB;EAEA,IAAIC,MAAM,CAACC,WAAW,KAAKC,SAAS,EAAE;IACpC,OAAO,IAAID,WAAW,EAAE,CAACE,MAAM,CAACN,SAAS,CAAC,CAACE,MAAM;EACnD;EAEA,OAAO,IAAIK,IAAI,CAAC,CAACP,SAAS,CAAC,CAAC,CAACQ,IAAI;AACnC;AAEA,OAAM,SAAUC,aAAaA,CAACC,OAAqB;EACjD,IAAMR,MAAM,GAAGQ,OAAO,CAACC,MAAM,CAAC,UAACC,KAAK,EAAEC,MAAM;IAAK,OAAAD,KAAK,GAAGC,MAAM,CAACX,MAAM;EAArB,CAAqB,EAAE,CAAC,CAAC;EAC1E,IAAMY,MAAM,GAAG,IAAIC,UAAU,CAACb,MAAM,CAAC;EACrC,IAAIc,MAAM,GAAG,CAAC;EACd,KAAqB,IAAAC,EAAA,IAAO,EAAPC,SAAA,GAAAR,OAAO,EAAPO,EAAA,GAAAC,SAAA,CAAAhB,MAAO,EAAPe,EAAA,EAAO,EAAE;IAAzB,IAAMJ,MAAM,GAAAK,SAAA,CAAAD,EAAA;IACfH,MAAM,CAACK,GAAG,CAACN,MAAM,EAAEG,MAAM,CAAC;IAC1BA,MAAM,IAAIH,MAAM,CAACX,MAAM;EACzB;EACA,OAAOY,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}