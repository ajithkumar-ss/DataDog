{"ast":null,"code":"import { getType, arrayFrom, isMatchOption, serializeConfiguration, assign, DefaultPrivacyLevel, TraceContextInjection, display, isPercentage, objectHasValue, validateAndBuildConfiguration } from '@datadog/browser-core';\nimport { isTracingOption } from './tracing/tracer';\nexport var DEFAULT_PROPAGATOR_TYPES = ['tracecontext', 'datadog'];\nexport function validateAndBuildRumConfiguration(initConfiguration) {\n  var _a, _b;\n  if (!initConfiguration.applicationId) {\n    display.error('Application ID is not configured, no RUM data will be collected.');\n    return;\n  }\n  if (initConfiguration.sessionReplaySampleRate !== undefined && !isPercentage(initConfiguration.sessionReplaySampleRate)) {\n    display.error('Session Replay Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  if (initConfiguration.traceSampleRate !== undefined && !isPercentage(initConfiguration.traceSampleRate)) {\n    display.error('Trace Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  if (initConfiguration.excludedActivityUrls !== undefined && !Array.isArray(initConfiguration.excludedActivityUrls)) {\n    display.error('Excluded Activity Urls should be an array');\n    return;\n  }\n  var allowedTracingUrls = validateAndBuildTracingOptions(initConfiguration);\n  if (!allowedTracingUrls) {\n    return;\n  }\n  var baseConfiguration = validateAndBuildConfiguration(initConfiguration);\n  if (!baseConfiguration) {\n    return;\n  }\n  return assign({\n    applicationId: initConfiguration.applicationId,\n    version: initConfiguration.version,\n    actionNameAttribute: initConfiguration.actionNameAttribute,\n    sessionReplaySampleRate: (_a = initConfiguration.sessionReplaySampleRate) !== null && _a !== void 0 ? _a : 0,\n    startSessionReplayRecordingManually: !!initConfiguration.startSessionReplayRecordingManually,\n    traceSampleRate: initConfiguration.traceSampleRate,\n    allowedTracingUrls: allowedTracingUrls,\n    excludedActivityUrls: (_b = initConfiguration.excludedActivityUrls) !== null && _b !== void 0 ? _b : [],\n    workerUrl: initConfiguration.workerUrl,\n    compressIntakeRequests: !!initConfiguration.compressIntakeRequests,\n    trackUserInteractions: !!initConfiguration.trackUserInteractions,\n    trackViewsManually: !!initConfiguration.trackViewsManually,\n    trackResources: !!initConfiguration.trackResources,\n    trackLongTasks: !!initConfiguration.trackLongTasks,\n    subdomain: initConfiguration.subdomain,\n    defaultPrivacyLevel: objectHasValue(DefaultPrivacyLevel, initConfiguration.defaultPrivacyLevel) ? initConfiguration.defaultPrivacyLevel : DefaultPrivacyLevel.MASK,\n    customerDataTelemetrySampleRate: 1,\n    traceContextInjection: objectHasValue(TraceContextInjection, initConfiguration.traceContextInjection) ? initConfiguration.traceContextInjection : TraceContextInjection.ALL\n  }, baseConfiguration);\n}\n/**\n * Validates allowedTracingUrls and converts match options to tracing options\n */\nfunction validateAndBuildTracingOptions(initConfiguration) {\n  if (initConfiguration.allowedTracingUrls !== undefined) {\n    if (!Array.isArray(initConfiguration.allowedTracingUrls)) {\n      display.error('Allowed Tracing URLs should be an array');\n      return;\n    }\n    if (initConfiguration.allowedTracingUrls.length !== 0 && initConfiguration.service === undefined) {\n      display.error('Service needs to be configured when tracing is enabled');\n      return;\n    }\n    // Convert from (MatchOption | TracingOption) to TracingOption, remove unknown properties\n    var tracingOptions_1 = [];\n    initConfiguration.allowedTracingUrls.forEach(function (option) {\n      if (isMatchOption(option)) {\n        tracingOptions_1.push({\n          match: option,\n          propagatorTypes: DEFAULT_PROPAGATOR_TYPES\n        });\n      } else if (isTracingOption(option)) {\n        tracingOptions_1.push(option);\n      } else {\n        display.warn('Allowed Tracing Urls parameters should be a string, RegExp, function, or an object. Ignoring parameter', option);\n      }\n    });\n    return tracingOptions_1;\n  }\n  return [];\n}\n/**\n * Combines the selected tracing propagators from the different options in allowedTracingUrls\n */\nfunction getSelectedTracingPropagators(configuration) {\n  var usedTracingPropagators = new Set();\n  if (Array.isArray(configuration.allowedTracingUrls) && configuration.allowedTracingUrls.length > 0) {\n    configuration.allowedTracingUrls.forEach(function (option) {\n      if (isMatchOption(option)) {\n        DEFAULT_PROPAGATOR_TYPES.forEach(function (propagatorType) {\n          return usedTracingPropagators.add(propagatorType);\n        });\n      } else if (getType(option) === 'object' && Array.isArray(option.propagatorTypes)) {\n        // Ensure we have an array, as we cannot rely on types yet (configuration is provided by users)\n        option.propagatorTypes.forEach(function (propagatorType) {\n          return usedTracingPropagators.add(propagatorType);\n        });\n      }\n    });\n  }\n  return arrayFrom(usedTracingPropagators);\n}\nexport function serializeRumConfiguration(configuration) {\n  var baseSerializedConfiguration = serializeConfiguration(configuration);\n  return assign({\n    session_replay_sample_rate: configuration.sessionReplaySampleRate,\n    start_session_replay_recording_manually: configuration.startSessionReplayRecordingManually,\n    trace_sample_rate: configuration.traceSampleRate,\n    trace_context_injection: configuration.traceContextInjection,\n    action_name_attribute: configuration.actionNameAttribute,\n    use_allowed_tracing_urls: Array.isArray(configuration.allowedTracingUrls) && configuration.allowedTracingUrls.length > 0,\n    selected_tracing_propagators: getSelectedTracingPropagators(configuration),\n    default_privacy_level: configuration.defaultPrivacyLevel,\n    use_excluded_activity_urls: Array.isArray(configuration.excludedActivityUrls) && configuration.excludedActivityUrls.length > 0,\n    use_worker_url: !!configuration.workerUrl,\n    compress_intake_requests: configuration.compressIntakeRequests,\n    track_views_manually: configuration.trackViewsManually,\n    track_user_interactions: configuration.trackUserInteractions,\n    track_resources: configuration.trackResources,\n    track_long_task: configuration.trackLongTasks\n  }, baseSerializedConfiguration);\n}","map":{"version":3,"names":["getType","arrayFrom","isMatchOption","serializeConfiguration","assign","DefaultPrivacyLevel","TraceContextInjection","display","isPercentage","objectHasValue","validateAndBuildConfiguration","isTracingOption","DEFAULT_PROPAGATOR_TYPES","validateAndBuildRumConfiguration","initConfiguration","applicationId","error","sessionReplaySampleRate","undefined","traceSampleRate","excludedActivityUrls","Array","isArray","allowedTracingUrls","validateAndBuildTracingOptions","baseConfiguration","version","actionNameAttribute","_a","startSessionReplayRecordingManually","_b","workerUrl","compressIntakeRequests","trackUserInteractions","trackViewsManually","trackResources","trackLongTasks","subdomain","defaultPrivacyLevel","MASK","customerDataTelemetrySampleRate","traceContextInjection","ALL","length","service","tracingOptions_1","forEach","option","push","match","propagatorTypes","warn","getSelectedTracingPropagators","configuration","usedTracingPropagators","Set","propagatorType","add","serializeRumConfiguration","baseSerializedConfiguration","session_replay_sample_rate","start_session_replay_recording_manually","trace_sample_rate","trace_context_injection","action_name_attribute","use_allowed_tracing_urls","selected_tracing_propagators","default_privacy_level","use_excluded_activity_urls","use_worker_url","compress_intake_requests","track_views_manually","track_user_interactions","track_resources","track_long_task"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\configuration.ts"],"sourcesContent":["import type { Configuration, InitConfiguration, MatchOption, RawTelemetryConfiguration } from '@datadog/browser-core'\nimport {\n  getType,\n  arrayFrom,\n  isMatchOption,\n  serializeConfiguration,\n  assign,\n  DefaultPrivacyLevel,\n  TraceContextInjection,\n  display,\n  isPercentage,\n  objectHasValue,\n  validateAndBuildConfiguration,\n} from '@datadog/browser-core'\nimport type { RumEventDomainContext } from '../domainContext.types'\nimport type { RumEvent } from '../rumEvent.types'\nimport { isTracingOption } from './tracing/tracer'\nimport type { PropagatorType, TracingOption } from './tracing/tracer.types'\n\nexport const DEFAULT_PROPAGATOR_TYPES: PropagatorType[] = ['tracecontext', 'datadog']\n\nexport interface RumInitConfiguration extends InitConfiguration {\n  // global options\n  applicationId: string\n  beforeSend?: ((event: RumEvent, context: RumEventDomainContext) => boolean) | undefined\n  excludedActivityUrls?: MatchOption[] | undefined\n  workerUrl?: string\n  compressIntakeRequests?: boolean | undefined\n\n  // tracing options\n  allowedTracingUrls?: Array<MatchOption | TracingOption> | undefined\n  traceSampleRate?: number | undefined\n  traceContextInjection?: TraceContextInjection | undefined\n\n  // replay options\n  defaultPrivacyLevel?: DefaultPrivacyLevel | undefined\n  subdomain?: string\n  sessionReplaySampleRate?: number | undefined\n  startSessionReplayRecordingManually?: boolean | undefined\n\n  // action options\n  trackUserInteractions?: boolean | undefined\n  actionNameAttribute?: string | undefined\n\n  // view options\n  trackViewsManually?: boolean | undefined\n\n  trackResources?: boolean | undefined\n  trackLongTasks?: boolean | undefined\n}\n\nexport type HybridInitConfiguration = Omit<RumInitConfiguration, 'applicationId' | 'clientToken'>\n\nexport interface RumConfiguration extends Configuration {\n  // Built from init configuration\n  actionNameAttribute: string | undefined\n  traceSampleRate: number | undefined\n  allowedTracingUrls: TracingOption[]\n  excludedActivityUrls: MatchOption[]\n  workerUrl: string | undefined\n  compressIntakeRequests: boolean\n  applicationId: string\n  defaultPrivacyLevel: DefaultPrivacyLevel\n  sessionReplaySampleRate: number\n  startSessionReplayRecordingManually: boolean\n  trackUserInteractions: boolean\n  trackViewsManually: boolean\n  trackResources: boolean\n  trackLongTasks: boolean\n  version?: string\n  subdomain?: string\n  customerDataTelemetrySampleRate: number\n  traceContextInjection: TraceContextInjection\n}\n\nexport function validateAndBuildRumConfiguration(\n  initConfiguration: RumInitConfiguration\n): RumConfiguration | undefined {\n  if (!initConfiguration.applicationId) {\n    display.error('Application ID is not configured, no RUM data will be collected.')\n    return\n  }\n\n  if (\n    initConfiguration.sessionReplaySampleRate !== undefined &&\n    !isPercentage(initConfiguration.sessionReplaySampleRate)\n  ) {\n    display.error('Session Replay Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  if (initConfiguration.traceSampleRate !== undefined && !isPercentage(initConfiguration.traceSampleRate)) {\n    display.error('Trace Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  if (initConfiguration.excludedActivityUrls !== undefined && !Array.isArray(initConfiguration.excludedActivityUrls)) {\n    display.error('Excluded Activity Urls should be an array')\n    return\n  }\n\n  const allowedTracingUrls = validateAndBuildTracingOptions(initConfiguration)\n  if (!allowedTracingUrls) {\n    return\n  }\n\n  const baseConfiguration = validateAndBuildConfiguration(initConfiguration)\n  if (!baseConfiguration) {\n    return\n  }\n\n  return assign(\n    {\n      applicationId: initConfiguration.applicationId,\n      version: initConfiguration.version,\n      actionNameAttribute: initConfiguration.actionNameAttribute,\n      sessionReplaySampleRate: initConfiguration.sessionReplaySampleRate ?? 0,\n      startSessionReplayRecordingManually: !!initConfiguration.startSessionReplayRecordingManually,\n      traceSampleRate: initConfiguration.traceSampleRate,\n      allowedTracingUrls,\n      excludedActivityUrls: initConfiguration.excludedActivityUrls ?? [],\n      workerUrl: initConfiguration.workerUrl,\n      compressIntakeRequests: !!initConfiguration.compressIntakeRequests,\n      trackUserInteractions: !!initConfiguration.trackUserInteractions,\n      trackViewsManually: !!initConfiguration.trackViewsManually,\n      trackResources: !!initConfiguration.trackResources,\n      trackLongTasks: !!initConfiguration.trackLongTasks,\n      subdomain: initConfiguration.subdomain,\n      defaultPrivacyLevel: objectHasValue(DefaultPrivacyLevel, initConfiguration.defaultPrivacyLevel)\n        ? initConfiguration.defaultPrivacyLevel\n        : DefaultPrivacyLevel.MASK,\n      customerDataTelemetrySampleRate: 1,\n      traceContextInjection: objectHasValue(TraceContextInjection, initConfiguration.traceContextInjection)\n        ? initConfiguration.traceContextInjection\n        : TraceContextInjection.ALL,\n    },\n    baseConfiguration\n  )\n}\n\n/**\n * Validates allowedTracingUrls and converts match options to tracing options\n */\nfunction validateAndBuildTracingOptions(initConfiguration: RumInitConfiguration): TracingOption[] | undefined {\n  if (initConfiguration.allowedTracingUrls !== undefined) {\n    if (!Array.isArray(initConfiguration.allowedTracingUrls)) {\n      display.error('Allowed Tracing URLs should be an array')\n      return\n    }\n    if (initConfiguration.allowedTracingUrls.length !== 0 && initConfiguration.service === undefined) {\n      display.error('Service needs to be configured when tracing is enabled')\n      return\n    }\n    // Convert from (MatchOption | TracingOption) to TracingOption, remove unknown properties\n    const tracingOptions: TracingOption[] = []\n    initConfiguration.allowedTracingUrls.forEach((option) => {\n      if (isMatchOption(option)) {\n        tracingOptions.push({ match: option, propagatorTypes: DEFAULT_PROPAGATOR_TYPES })\n      } else if (isTracingOption(option)) {\n        tracingOptions.push(option)\n      } else {\n        display.warn(\n          'Allowed Tracing Urls parameters should be a string, RegExp, function, or an object. Ignoring parameter',\n          option\n        )\n      }\n    })\n\n    return tracingOptions\n  }\n\n  return []\n}\n\n/**\n * Combines the selected tracing propagators from the different options in allowedTracingUrls\n */\nfunction getSelectedTracingPropagators(configuration: RumInitConfiguration): PropagatorType[] {\n  const usedTracingPropagators = new Set<PropagatorType>()\n\n  if (Array.isArray(configuration.allowedTracingUrls) && configuration.allowedTracingUrls.length > 0) {\n    configuration.allowedTracingUrls.forEach((option) => {\n      if (isMatchOption(option)) {\n        DEFAULT_PROPAGATOR_TYPES.forEach((propagatorType) => usedTracingPropagators.add(propagatorType))\n      } else if (getType(option) === 'object' && Array.isArray(option.propagatorTypes)) {\n        // Ensure we have an array, as we cannot rely on types yet (configuration is provided by users)\n        option.propagatorTypes.forEach((propagatorType) => usedTracingPropagators.add(propagatorType))\n      }\n    })\n  }\n\n  return arrayFrom(usedTracingPropagators)\n}\n\nexport function serializeRumConfiguration(configuration: RumInitConfiguration) {\n  const baseSerializedConfiguration = serializeConfiguration(configuration)\n\n  return assign(\n    {\n      session_replay_sample_rate: configuration.sessionReplaySampleRate,\n      start_session_replay_recording_manually: configuration.startSessionReplayRecordingManually,\n      trace_sample_rate: configuration.traceSampleRate,\n      trace_context_injection: configuration.traceContextInjection,\n      action_name_attribute: configuration.actionNameAttribute,\n      use_allowed_tracing_urls:\n        Array.isArray(configuration.allowedTracingUrls) && configuration.allowedTracingUrls.length > 0,\n      selected_tracing_propagators: getSelectedTracingPropagators(configuration),\n      default_privacy_level: configuration.defaultPrivacyLevel,\n      use_excluded_activity_urls:\n        Array.isArray(configuration.excludedActivityUrls) && configuration.excludedActivityUrls.length > 0,\n      use_worker_url: !!configuration.workerUrl,\n      compress_intake_requests: configuration.compressIntakeRequests,\n      track_views_manually: configuration.trackViewsManually,\n      track_user_interactions: configuration.trackUserInteractions,\n      track_resources: configuration.trackResources,\n      track_long_task: configuration.trackLongTasks,\n    },\n    baseSerializedConfiguration\n  ) satisfies RawTelemetryConfiguration\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}