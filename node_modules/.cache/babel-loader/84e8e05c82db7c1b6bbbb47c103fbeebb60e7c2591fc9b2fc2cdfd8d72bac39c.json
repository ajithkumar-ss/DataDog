{"ast":null,"code":"import { objectValues, assign } from '../../tools/utils/polyfills';\nimport { createEndpointBuilder } from './endpointBuilder';\nimport { buildTags } from './tags';\nimport { INTAKE_SITE_US1, PCI_INTAKE_HOST_US1 } from './intakeSites';\nexport function computeTransportConfiguration(initConfiguration) {\n  var site = initConfiguration.site || INTAKE_SITE_US1;\n  var tags = buildTags(initConfiguration);\n  var endpointBuilders = computeEndpointBuilders(initConfiguration, tags);\n  var intakeUrlPrefixes = computeIntakeUrlPrefixes(endpointBuilders, site);\n  var replicaConfiguration = computeReplicaConfiguration(initConfiguration, intakeUrlPrefixes, tags);\n  return assign({\n    isIntakeUrl: function (url) {\n      return intakeUrlPrefixes.some(function (intakeEndpoint) {\n        return url.indexOf(intakeEndpoint) === 0;\n      });\n    },\n    replica: replicaConfiguration,\n    site: site\n  }, endpointBuilders);\n}\nfunction computeEndpointBuilders(initConfiguration, tags) {\n  return {\n    logsEndpointBuilder: createEndpointBuilder(initConfiguration, 'logs', tags),\n    rumEndpointBuilder: createEndpointBuilder(initConfiguration, 'rum', tags),\n    sessionReplayEndpointBuilder: createEndpointBuilder(initConfiguration, 'replay', tags)\n  };\n}\nfunction computeReplicaConfiguration(initConfiguration, intakeUrlPrefixes, tags) {\n  if (!initConfiguration.replica) {\n    return;\n  }\n  var replicaConfiguration = assign({}, initConfiguration, {\n    site: INTAKE_SITE_US1,\n    clientToken: initConfiguration.replica.clientToken\n  });\n  var replicaEndpointBuilders = {\n    logsEndpointBuilder: createEndpointBuilder(replicaConfiguration, 'logs', tags),\n    rumEndpointBuilder: createEndpointBuilder(replicaConfiguration, 'rum', tags)\n  };\n  intakeUrlPrefixes.push.apply(intakeUrlPrefixes, objectValues(replicaEndpointBuilders).map(function (builder) {\n    return builder.urlPrefix;\n  }));\n  return assign({\n    applicationId: initConfiguration.replica.applicationId\n  }, replicaEndpointBuilders);\n}\nfunction computeIntakeUrlPrefixes(endpointBuilders, site) {\n  var intakeUrlPrefixes = objectValues(endpointBuilders).map(function (builder) {\n    return builder.urlPrefix;\n  });\n  if (site === INTAKE_SITE_US1) {\n    intakeUrlPrefixes.push(\"https://\".concat(PCI_INTAKE_HOST_US1, \"/\"));\n  }\n  return intakeUrlPrefixes;\n}","map":{"version":3,"names":["objectValues","assign","createEndpointBuilder","buildTags","INTAKE_SITE_US1","PCI_INTAKE_HOST_US1","computeTransportConfiguration","initConfiguration","site","tags","endpointBuilders","computeEndpointBuilders","intakeUrlPrefixes","computeIntakeUrlPrefixes","replicaConfiguration","computeReplicaConfiguration","isIntakeUrl","url","some","intakeEndpoint","indexOf","replica","logsEndpointBuilder","rumEndpointBuilder","sessionReplayEndpointBuilder","clientToken","replicaEndpointBuilders","push","apply","map","builder","urlPrefix","applicationId","concat"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\configuration\\transportConfiguration.ts"],"sourcesContent":["import { objectValues, assign } from '../../tools/utils/polyfills'\nimport type { InitConfiguration } from './configuration'\nimport type { EndpointBuilder } from './endpointBuilder'\nimport { createEndpointBuilder } from './endpointBuilder'\nimport { buildTags } from './tags'\nimport { INTAKE_SITE_US1, PCI_INTAKE_HOST_US1 } from './intakeSites'\n\nexport interface TransportConfiguration {\n  logsEndpointBuilder: EndpointBuilder\n  rumEndpointBuilder: EndpointBuilder\n  sessionReplayEndpointBuilder: EndpointBuilder\n  isIntakeUrl: (url: string) => boolean\n  replica?: ReplicaConfiguration\n  site: string\n}\n\nexport interface ReplicaConfiguration {\n  applicationId?: string\n  logsEndpointBuilder: EndpointBuilder\n  rumEndpointBuilder: EndpointBuilder\n}\n\nexport function computeTransportConfiguration(initConfiguration: InitConfiguration): TransportConfiguration {\n  const site = initConfiguration.site || INTAKE_SITE_US1\n\n  const tags = buildTags(initConfiguration)\n\n  const endpointBuilders = computeEndpointBuilders(initConfiguration, tags)\n  const intakeUrlPrefixes = computeIntakeUrlPrefixes(endpointBuilders, site)\n\n  const replicaConfiguration = computeReplicaConfiguration(initConfiguration, intakeUrlPrefixes, tags)\n\n  return assign(\n    {\n      isIntakeUrl: (url: string) => intakeUrlPrefixes.some((intakeEndpoint) => url.indexOf(intakeEndpoint) === 0),\n      replica: replicaConfiguration,\n      site,\n    },\n    endpointBuilders\n  )\n}\n\nfunction computeEndpointBuilders(initConfiguration: InitConfiguration, tags: string[]) {\n  return {\n    logsEndpointBuilder: createEndpointBuilder(initConfiguration, 'logs', tags),\n    rumEndpointBuilder: createEndpointBuilder(initConfiguration, 'rum', tags),\n    sessionReplayEndpointBuilder: createEndpointBuilder(initConfiguration, 'replay', tags),\n  }\n}\n\nfunction computeReplicaConfiguration(\n  initConfiguration: InitConfiguration,\n  intakeUrlPrefixes: string[],\n  tags: string[]\n): ReplicaConfiguration | undefined {\n  if (!initConfiguration.replica) {\n    return\n  }\n\n  const replicaConfiguration: InitConfiguration = assign({}, initConfiguration, {\n    site: INTAKE_SITE_US1,\n    clientToken: initConfiguration.replica.clientToken,\n  })\n\n  const replicaEndpointBuilders = {\n    logsEndpointBuilder: createEndpointBuilder(replicaConfiguration, 'logs', tags),\n    rumEndpointBuilder: createEndpointBuilder(replicaConfiguration, 'rum', tags),\n  }\n\n  intakeUrlPrefixes.push(...objectValues(replicaEndpointBuilders).map((builder) => builder.urlPrefix))\n\n  return assign({ applicationId: initConfiguration.replica.applicationId }, replicaEndpointBuilders)\n}\n\nfunction computeIntakeUrlPrefixes(\n  endpointBuilders: ReturnType<typeof computeEndpointBuilders>,\n  site: string\n): string[] {\n  const intakeUrlPrefixes = objectValues(endpointBuilders).map((builder) => builder.urlPrefix)\n\n  if (site === INTAKE_SITE_US1) {\n    intakeUrlPrefixes.push(`https://${PCI_INTAKE_HOST_US1}/`)\n  }\n\n  return intakeUrlPrefixes\n}\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,MAAM,QAAQ,6BAA6B;AAGlE,SAASC,qBAAqB,QAAQ,mBAAmB;AACzD,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,eAAe;AAiBpE,OAAM,SAAUC,6BAA6BA,CAACC,iBAAoC;EAChF,IAAMC,IAAI,GAAGD,iBAAiB,CAACC,IAAI,IAAIJ,eAAe;EAEtD,IAAMK,IAAI,GAAGN,SAAS,CAACI,iBAAiB,CAAC;EAEzC,IAAMG,gBAAgB,GAAGC,uBAAuB,CAACJ,iBAAiB,EAAEE,IAAI,CAAC;EACzE,IAAMG,iBAAiB,GAAGC,wBAAwB,CAACH,gBAAgB,EAAEF,IAAI,CAAC;EAE1E,IAAMM,oBAAoB,GAAGC,2BAA2B,CAACR,iBAAiB,EAAEK,iBAAiB,EAAEH,IAAI,CAAC;EAEpG,OAAOR,MAAM,CACX;IACEe,WAAW,EAAE,SAAAA,CAACC,GAAW;MAAK,OAAAL,iBAAiB,CAACM,IAAI,CAAC,UAACC,cAAc;QAAK,OAAAF,GAAG,CAACG,OAAO,CAACD,cAAc,CAAC,KAAK,CAAC;MAAjC,CAAiC,CAAC;IAA7E,CAA6E;IAC3GE,OAAO,EAAEP,oBAAoB;IAC7BN,IAAI,EAAAA;GACL,EACDE,gBAAgB,CACjB;AACH;AAEA,SAASC,uBAAuBA,CAACJ,iBAAoC,EAAEE,IAAc;EACnF,OAAO;IACLa,mBAAmB,EAAEpB,qBAAqB,CAACK,iBAAiB,EAAE,MAAM,EAAEE,IAAI,CAAC;IAC3Ec,kBAAkB,EAAErB,qBAAqB,CAACK,iBAAiB,EAAE,KAAK,EAAEE,IAAI,CAAC;IACzEe,4BAA4B,EAAEtB,qBAAqB,CAACK,iBAAiB,EAAE,QAAQ,EAAEE,IAAI;GACtF;AACH;AAEA,SAASM,2BAA2BA,CAClCR,iBAAoC,EACpCK,iBAA2B,EAC3BH,IAAc;EAEd,IAAI,CAACF,iBAAiB,CAACc,OAAO,EAAE;IAC9B;EACF;EAEA,IAAMP,oBAAoB,GAAsBb,MAAM,CAAC,EAAE,EAAEM,iBAAiB,EAAE;IAC5EC,IAAI,EAAEJ,eAAe;IACrBqB,WAAW,EAAElB,iBAAiB,CAACc,OAAO,CAACI;GACxC,CAAC;EAEF,IAAMC,uBAAuB,GAAG;IAC9BJ,mBAAmB,EAAEpB,qBAAqB,CAACY,oBAAoB,EAAE,MAAM,EAAEL,IAAI,CAAC;IAC9Ec,kBAAkB,EAAErB,qBAAqB,CAACY,oBAAoB,EAAE,KAAK,EAAEL,IAAI;GAC5E;EAEDG,iBAAiB,CAACe,IAAI,CAAAC,KAAA,CAAtBhB,iBAAiB,EAASZ,YAAY,CAAC0B,uBAAuB,CAAC,CAACG,GAAG,CAAC,UAACC,OAAO;IAAK,OAAAA,OAAO,CAACC,SAAS;EAAjB,CAAiB,CAAC;EAEnG,OAAO9B,MAAM,CAAC;IAAE+B,aAAa,EAAEzB,iBAAiB,CAACc,OAAO,CAACW;EAAa,CAAE,EAAEN,uBAAuB,CAAC;AACpG;AAEA,SAASb,wBAAwBA,CAC/BH,gBAA4D,EAC5DF,IAAY;EAEZ,IAAMI,iBAAiB,GAAGZ,YAAY,CAACU,gBAAgB,CAAC,CAACmB,GAAG,CAAC,UAACC,OAAO;IAAK,OAAAA,OAAO,CAACC,SAAS;EAAjB,CAAiB,CAAC;EAE5F,IAAIvB,IAAI,KAAKJ,eAAe,EAAE;IAC5BQ,iBAAiB,CAACe,IAAI,CAAC,WAAAM,MAAA,CAAW5B,mBAAmB,MAAG,CAAC;EAC3D;EAEA,OAAOO,iBAAiB;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}