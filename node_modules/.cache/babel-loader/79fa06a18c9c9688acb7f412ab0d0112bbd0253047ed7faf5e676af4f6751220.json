{"ast":null,"code":"import { createHttpRequest, addTelemetryDebug, canUseEventBridge } from '@datadog/browser-core';\nimport { record } from '../domain/record';\nimport { startSegmentCollection, SEGMENT_BYTES_LIMIT } from '../domain/segmentCollection';\nimport { startRecordBridge } from '../domain/startRecordBridge';\nexport function startRecording(lifeCycle, configuration, sessionManager, viewContexts, encoder, httpRequest) {\n  var cleanupTasks = [];\n  var reportError = function (error) {\n    lifeCycle.notify(14 /* LifeCycleEventType.RAW_ERROR_COLLECTED */, {\n      error: error\n    });\n    addTelemetryDebug('Error reported to customer', {\n      'error.message': error.message\n    });\n  };\n  var replayRequest = httpRequest || createHttpRequest(configuration, configuration.sessionReplayEndpointBuilder, SEGMENT_BYTES_LIMIT, reportError);\n  var addRecord;\n  if (!canUseEventBridge()) {\n    var segmentCollection = startSegmentCollection(lifeCycle, configuration, sessionManager, viewContexts, replayRequest, encoder);\n    addRecord = segmentCollection.addRecord;\n    cleanupTasks.push(segmentCollection.stop);\n  } else {\n    ;\n    addRecord = startRecordBridge(viewContexts).addRecord;\n  }\n  var stopRecording = record({\n    emit: addRecord,\n    configuration: configuration,\n    lifeCycle: lifeCycle,\n    viewContexts: viewContexts\n  }).stop;\n  cleanupTasks.push(stopRecording);\n  return {\n    stop: function () {\n      cleanupTasks.forEach(function (task) {\n        return task();\n      });\n    }\n  };\n}","map":{"version":3,"names":["createHttpRequest","addTelemetryDebug","canUseEventBridge","record","startSegmentCollection","SEGMENT_BYTES_LIMIT","startRecordBridge","startRecording","lifeCycle","configuration","sessionManager","viewContexts","encoder","httpRequest","cleanupTasks","reportError","error","notify","message","replayRequest","sessionReplayEndpointBuilder","addRecord","segmentCollection","push","stop","stopRecording","emit","forEach","task"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum\\src\\boot\\startRecording.ts"],"sourcesContent":["import type { RawError, HttpRequest, DeflateEncoder } from '@datadog/browser-core'\nimport { createHttpRequest, addTelemetryDebug, canUseEventBridge } from '@datadog/browser-core'\nimport type { LifeCycle, ViewContexts, RumConfiguration, RumSessionManager } from '@datadog/browser-rum-core'\nimport { LifeCycleEventType } from '@datadog/browser-rum-core'\n\nimport { record } from '../domain/record'\nimport { startSegmentCollection, SEGMENT_BYTES_LIMIT } from '../domain/segmentCollection'\nimport type { BrowserRecord } from '../types'\nimport { startRecordBridge } from '../domain/startRecordBridge'\n\nexport function startRecording(\n  lifeCycle: LifeCycle,\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  viewContexts: ViewContexts,\n  encoder: DeflateEncoder,\n  httpRequest?: HttpRequest\n) {\n  const cleanupTasks: Array<() => void> = []\n\n  const reportError = (error: RawError) => {\n    lifeCycle.notify(LifeCycleEventType.RAW_ERROR_COLLECTED, { error })\n    addTelemetryDebug('Error reported to customer', { 'error.message': error.message })\n  }\n\n  const replayRequest =\n    httpRequest ||\n    createHttpRequest(configuration, configuration.sessionReplayEndpointBuilder, SEGMENT_BYTES_LIMIT, reportError)\n\n  let addRecord: (record: BrowserRecord) => void\n\n  if (!canUseEventBridge()) {\n    const segmentCollection = startSegmentCollection(\n      lifeCycle,\n      configuration,\n      sessionManager,\n      viewContexts,\n      replayRequest,\n      encoder\n    )\n    addRecord = segmentCollection.addRecord\n    cleanupTasks.push(segmentCollection.stop)\n  } else {\n    ;({ addRecord } = startRecordBridge(viewContexts))\n  }\n\n  const { stop: stopRecording } = record({\n    emit: addRecord,\n    configuration,\n    lifeCycle,\n    viewContexts,\n  })\n  cleanupTasks.push(stopRecording)\n\n  return {\n    stop: () => {\n      cleanupTasks.forEach((task) => task())\n    },\n  }\n}\n"],"mappings":"AACA,SAASA,iBAAiB,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,uBAAuB;AAI/F,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,sBAAsB,EAAEC,mBAAmB,QAAQ,6BAA6B;AAEzF,SAASC,iBAAiB,QAAQ,6BAA6B;AAE/D,OAAM,SAAUC,cAAcA,CAC5BC,SAAoB,EACpBC,aAA+B,EAC/BC,cAAiC,EACjCC,YAA0B,EAC1BC,OAAuB,EACvBC,WAAyB;EAEzB,IAAMC,YAAY,GAAsB,EAAE;EAE1C,IAAMC,WAAW,GAAG,SAAAA,CAACC,KAAe;IAClCR,SAAS,CAACS,MAAM,kDAAyC;MAAED,KAAK,EAAAA;IAAA,CAAE,CAAC;IACnEf,iBAAiB,CAAC,4BAA4B,EAAE;MAAE,eAAe,EAAEe,KAAK,CAACE;IAAO,CAAE,CAAC;EACrF,CAAC;EAED,IAAMC,aAAa,GACjBN,WAAW,IACXb,iBAAiB,CAACS,aAAa,EAAEA,aAAa,CAACW,4BAA4B,EAAEf,mBAAmB,EAAEU,WAAW,CAAC;EAEhH,IAAIM,SAA0C;EAE9C,IAAI,CAACnB,iBAAiB,EAAE,EAAE;IACxB,IAAMoB,iBAAiB,GAAGlB,sBAAsB,CAC9CI,SAAS,EACTC,aAAa,EACbC,cAAc,EACdC,YAAY,EACZQ,aAAa,EACbP,OAAO,CACR;IACDS,SAAS,GAAGC,iBAAiB,CAACD,SAAS;IACvCP,YAAY,CAACS,IAAI,CAACD,iBAAiB,CAACE,IAAI,CAAC;EAC3C,CAAC,MAAM;IACL;IAAIH,SAAS,GAAKf,iBAAiB,CAACK,YAAY,CAAC,CAAAU,SAApC;EACf;EAEQ,IAAMI,aAAa,GAAKtB,MAAM,CAAC;IACrCuB,IAAI,EAAEL,SAAS;IACfZ,aAAa,EAAAA,aAAA;IACbD,SAAS,EAAAA,SAAA;IACTG,YAAY,EAAAA;GACb,CAAC,CAAAa,IALyB;EAM3BV,YAAY,CAACS,IAAI,CAACE,aAAa,CAAC;EAEhC,OAAO;IACLD,IAAI,EAAE,SAAAA,CAAA;MACJV,YAAY,CAACa,OAAO,CAAC,UAACC,IAAI;QAAK,OAAAA,IAAI,EAAE;MAAN,CAAM,CAAC;IACxC;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}