{"ast":null,"code":"import { getSessionReplayUrl } from '@datadog/browser-rum-core';\nimport { isBrowserSupported } from '../boot/isBrowserSupported';\nexport function getSessionReplayLink(configuration, sessionManager, viewContexts, isRecordingStarted) {\n  var session = sessionManager.findTrackedSession();\n  var errorType = getErrorType(session, isRecordingStarted);\n  var viewContext = viewContexts.findView();\n  return getSessionReplayUrl(configuration, {\n    viewContext: viewContext,\n    errorType: errorType,\n    session: session\n  });\n}\nfunction getErrorType(session, isRecordingStarted) {\n  if (!isBrowserSupported()) {\n    return 'browser-not-supported';\n  }\n  if (!session) {\n    // possibilities:\n    // - rum sampled out\n    // - session expired (edge case)\n    return 'rum-not-tracked';\n  }\n  if (!session.sessionReplayAllowed) {\n    // possibilities\n    // - replay sampled out\n    return 'incorrect-session-plan';\n  }\n  if (!isRecordingStarted) {\n    return 'replay-not-started';\n  }\n}","map":{"version":3,"names":["getSessionReplayUrl","isBrowserSupported","getSessionReplayLink","configuration","sessionManager","viewContexts","isRecordingStarted","session","findTrackedSession","errorType","getErrorType","viewContext","findView","sessionReplayAllowed"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\getSessionReplayLink.ts"],"sourcesContent":["import type { RumConfiguration, RumSessionManager, ViewContexts, RumSession } from '@datadog/browser-rum-core'\nimport { getSessionReplayUrl } from '@datadog/browser-rum-core'\nimport { isBrowserSupported } from '../boot/isBrowserSupported'\n\nexport function getSessionReplayLink(\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  viewContexts: ViewContexts,\n  isRecordingStarted: boolean\n): string | undefined {\n  const session = sessionManager.findTrackedSession()\n  const errorType = getErrorType(session, isRecordingStarted)\n  const viewContext = viewContexts.findView()\n\n  return getSessionReplayUrl(configuration, {\n    viewContext,\n    errorType,\n    session,\n  })\n}\n\nfunction getErrorType(session: RumSession | undefined, isRecordingStarted: boolean) {\n  if (!isBrowserSupported()) {\n    return 'browser-not-supported'\n  }\n  if (!session) {\n    // possibilities:\n    // - rum sampled out\n    // - session expired (edge case)\n    return 'rum-not-tracked'\n  }\n  if (!session.sessionReplayAllowed) {\n    // possibilities\n    // - replay sampled out\n    return 'incorrect-session-plan'\n  }\n  if (!isRecordingStarted) {\n    return 'replay-not-started'\n  }\n}\n"],"mappings":"AACA,SAASA,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,kBAAkB,QAAQ,4BAA4B;AAE/D,OAAM,SAAUC,oBAAoBA,CAClCC,aAA+B,EAC/BC,cAAiC,EACjCC,YAA0B,EAC1BC,kBAA2B;EAE3B,IAAMC,OAAO,GAAGH,cAAc,CAACI,kBAAkB,EAAE;EACnD,IAAMC,SAAS,GAAGC,YAAY,CAACH,OAAO,EAAED,kBAAkB,CAAC;EAC3D,IAAMK,WAAW,GAAGN,YAAY,CAACO,QAAQ,EAAE;EAE3C,OAAOZ,mBAAmB,CAACG,aAAa,EAAE;IACxCQ,WAAW,EAAAA,WAAA;IACXF,SAAS,EAAAA,SAAA;IACTF,OAAO,EAAAA;GACR,CAAC;AACJ;AAEA,SAASG,YAAYA,CAACH,OAA+B,EAAED,kBAA2B;EAChF,IAAI,CAACL,kBAAkB,EAAE,EAAE;IACzB,OAAO,uBAAuB;EAChC;EACA,IAAI,CAACM,OAAO,EAAE;IACZ;IACA;IACA;IACA,OAAO,iBAAiB;EAC1B;EACA,IAAI,CAACA,OAAO,CAACM,oBAAoB,EAAE;IACjC;IACA;IACA,OAAO,wBAAwB;EACjC;EACA,IAAI,CAACP,kBAAkB,EAAE;IACvB,OAAO,oBAAoB;EAC7B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}