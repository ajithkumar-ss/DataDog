{"ast":null,"code":"import { display } from '../../tools/display';\nexport var TAG_SIZE_LIMIT = 200;\nexport function buildTags(configuration) {\n  var env = configuration.env,\n    service = configuration.service,\n    version = configuration.version,\n    datacenter = configuration.datacenter;\n  var tags = [];\n  if (env) {\n    tags.push(buildTag('env', env));\n  }\n  if (service) {\n    tags.push(buildTag('service', service));\n  }\n  if (version) {\n    tags.push(buildTag('version', version));\n  }\n  if (datacenter) {\n    tags.push(buildTag('datacenter', datacenter));\n  }\n  return tags;\n}\nvar FORBIDDEN_CHARACTERS = /[^a-z0-9_:./-]/;\nexport function buildTag(key, rawValue) {\n  // See https://docs.datadoghq.com/getting_started/tagging/#defining-tags for tags syntax. Note\n  // that the backend may not follow the exact same rules, so we only want to display an informal\n  // warning.\n  var valueSizeLimit = TAG_SIZE_LIMIT - key.length - 1;\n  if (rawValue.length > valueSizeLimit || FORBIDDEN_CHARACTERS.test(rawValue)) {\n    display.warn(\"\".concat(key, \" value doesn't meet tag requirements and will be sanitized\"));\n  }\n  // Let the backend do most of the sanitization, but still make sure multiple tags can't be crafted\n  // by forging a value containing commas.\n  var sanitizedValue = rawValue.replace(/,/g, '_');\n  return \"\".concat(key, \":\").concat(sanitizedValue);\n}","map":{"version":3,"names":["display","TAG_SIZE_LIMIT","buildTags","configuration","env","service","version","datacenter","tags","push","buildTag","FORBIDDEN_CHARACTERS","key","rawValue","valueSizeLimit","length","test","warn","concat","sanitizedValue","replace"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\configuration\\tags.ts"],"sourcesContent":["import { display } from '../../tools/display'\nimport type { InitConfiguration } from './configuration'\n\nexport const TAG_SIZE_LIMIT = 200\n\nexport function buildTags(configuration: InitConfiguration): string[] {\n  const { env, service, version, datacenter } = configuration\n  const tags = []\n\n  if (env) {\n    tags.push(buildTag('env', env))\n  }\n  if (service) {\n    tags.push(buildTag('service', service))\n  }\n  if (version) {\n    tags.push(buildTag('version', version))\n  }\n  if (datacenter) {\n    tags.push(buildTag('datacenter', datacenter))\n  }\n\n  return tags\n}\n\nconst FORBIDDEN_CHARACTERS = /[^a-z0-9_:./-]/\n\nexport function buildTag(key: string, rawValue: string) {\n  // See https://docs.datadoghq.com/getting_started/tagging/#defining-tags for tags syntax. Note\n  // that the backend may not follow the exact same rules, so we only want to display an informal\n  // warning.\n  const valueSizeLimit = TAG_SIZE_LIMIT - key.length - 1\n\n  if (rawValue.length > valueSizeLimit || FORBIDDEN_CHARACTERS.test(rawValue)) {\n    display.warn(`${key} value doesn't meet tag requirements and will be sanitized`)\n  }\n\n  // Let the backend do most of the sanitization, but still make sure multiple tags can't be crafted\n  // by forging a value containing commas.\n  const sanitizedValue = rawValue.replace(/,/g, '_')\n\n  return `${key}:${sanitizedValue}`\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAG7C,OAAO,IAAMC,cAAc,GAAG,GAAG;AAEjC,OAAM,SAAUC,SAASA,CAACC,aAAgC;EAChD,IAAAC,GAAG,GAAmCD,aAAa,CAAAC,GAAhD;IAAEC,OAAO,GAA0BF,aAAa,CAAAE,OAAvC;IAAEC,OAAO,GAAiBH,aAAa,CAAAG,OAA9B;IAAEC,UAAU,GAAKJ,aAAa,CAAAI,UAAlB;EACzC,IAAMC,IAAI,GAAG,EAAE;EAEf,IAAIJ,GAAG,EAAE;IACPI,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,KAAK,EAAEN,GAAG,CAAC,CAAC;EACjC;EACA,IAAIC,OAAO,EAAE;IACXG,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,SAAS,EAAEL,OAAO,CAAC,CAAC;EACzC;EACA,IAAIC,OAAO,EAAE;IACXE,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,SAAS,EAAEJ,OAAO,CAAC,CAAC;EACzC;EACA,IAAIC,UAAU,EAAE;IACdC,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,YAAY,EAAEH,UAAU,CAAC,CAAC;EAC/C;EAEA,OAAOC,IAAI;AACb;AAEA,IAAMG,oBAAoB,GAAG,gBAAgB;AAE7C,OAAM,SAAUD,QAAQA,CAACE,GAAW,EAAEC,QAAgB;EACpD;EACA;EACA;EACA,IAAMC,cAAc,GAAGb,cAAc,GAAGW,GAAG,CAACG,MAAM,GAAG,CAAC;EAEtD,IAAIF,QAAQ,CAACE,MAAM,GAAGD,cAAc,IAAIH,oBAAoB,CAACK,IAAI,CAACH,QAAQ,CAAC,EAAE;IAC3Eb,OAAO,CAACiB,IAAI,CAAC,GAAAC,MAAA,CAAGN,GAAG,+DAA4D,CAAC;EAClF;EAEA;EACA;EACA,IAAMO,cAAc,GAAGN,QAAQ,CAACO,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAElD,OAAO,GAAAF,MAAA,CAAGN,GAAG,OAAAM,MAAA,CAAIC,cAAc,CAAE;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}