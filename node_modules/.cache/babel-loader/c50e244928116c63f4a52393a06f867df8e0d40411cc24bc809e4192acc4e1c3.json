{"ast":null,"code":"import { Observable, throttle, addEventListener, DOM_EVENT } from '@datadog/browser-core';\nvar viewportObservable;\nexport function initViewportObservable(configuration) {\n  if (!viewportObservable) {\n    viewportObservable = createViewportObservable(configuration);\n  }\n  return viewportObservable;\n}\nexport function createViewportObservable(configuration) {\n  return new Observable(function (observable) {\n    var updateDimension = throttle(function () {\n      observable.notify(getViewportDimension());\n    }, 200).throttled;\n    return addEventListener(configuration, window, DOM_EVENT.RESIZE, updateDimension, {\n      capture: true,\n      passive: true\n    }).stop;\n  });\n}\n// excludes the width and height of any rendered classic scrollbar that is fixed to the visual viewport\nexport function getViewportDimension() {\n  var visual = window.visualViewport;\n  if (visual) {\n    return {\n      width: Number(visual.width * visual.scale),\n      height: Number(visual.height * visual.scale)\n    };\n  }\n  return {\n    width: Number(window.innerWidth || 0),\n    height: Number(window.innerHeight || 0)\n  };\n}","map":{"version":3,"names":["Observable","throttle","addEventListener","DOM_EVENT","viewportObservable","initViewportObservable","configuration","createViewportObservable","observable","updateDimension","notify","getViewportDimension","throttled","window","RESIZE","capture","passive","stop","visual","visualViewport","width","Number","scale","height","innerWidth","innerHeight"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\browser\\viewportObservable.ts"],"sourcesContent":["import { Observable, throttle, addEventListener, DOM_EVENT } from '@datadog/browser-core'\nimport type { RumConfiguration } from '../domain/configuration'\n\nexport interface ViewportDimension {\n  height: number\n  width: number\n}\n\nlet viewportObservable: Observable<ViewportDimension> | undefined\n\nexport function initViewportObservable(configuration: RumConfiguration) {\n  if (!viewportObservable) {\n    viewportObservable = createViewportObservable(configuration)\n  }\n  return viewportObservable\n}\n\nexport function createViewportObservable(configuration: RumConfiguration) {\n  return new Observable<ViewportDimension>((observable) => {\n    const { throttled: updateDimension } = throttle(() => {\n      observable.notify(getViewportDimension())\n    }, 200)\n\n    return addEventListener(configuration, window, DOM_EVENT.RESIZE, updateDimension, { capture: true, passive: true })\n      .stop\n  })\n}\n\n// excludes the width and height of any rendered classic scrollbar that is fixed to the visual viewport\nexport function getViewportDimension(): ViewportDimension {\n  const visual = window.visualViewport\n  if (visual) {\n    return {\n      width: Number(visual.width * visual.scale),\n      height: Number(visual.height * visual.scale),\n    }\n  }\n\n  return {\n    width: Number(window.innerWidth || 0),\n    height: Number(window.innerHeight || 0),\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,gBAAgB,EAAEC,SAAS,QAAQ,uBAAuB;AAQzF,IAAIC,kBAA6D;AAEjE,OAAM,SAAUC,sBAAsBA,CAACC,aAA+B;EACpE,IAAI,CAACF,kBAAkB,EAAE;IACvBA,kBAAkB,GAAGG,wBAAwB,CAACD,aAAa,CAAC;EAC9D;EACA,OAAOF,kBAAkB;AAC3B;AAEA,OAAM,SAAUG,wBAAwBA,CAACD,aAA+B;EACtE,OAAO,IAAIN,UAAU,CAAoB,UAACQ,UAAU;IAC1C,IAAWC,eAAe,GAAKR,QAAQ,CAAC;MAC9CO,UAAU,CAACE,MAAM,CAACC,oBAAoB,EAAE,CAAC;IAC3C,CAAC,EAAE,GAAG,CAAC,CAAAC,SAF2B;IAIlC,OAAOV,gBAAgB,CAACI,aAAa,EAAEO,MAAM,EAAEV,SAAS,CAACW,MAAM,EAAEL,eAAe,EAAE;MAAEM,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAI,CAAE,CAAC,CAChHC,IAAI;EACT,CAAC,CAAC;AACJ;AAEA;AACA,OAAM,SAAUN,oBAAoBA,CAAA;EAClC,IAAMO,MAAM,GAAGL,MAAM,CAACM,cAAc;EACpC,IAAID,MAAM,EAAE;IACV,OAAO;MACLE,KAAK,EAAEC,MAAM,CAACH,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACI,KAAK,CAAC;MAC1CC,MAAM,EAAEF,MAAM,CAACH,MAAM,CAACK,MAAM,GAAGL,MAAM,CAACI,KAAK;KAC5C;EACH;EAEA,OAAO;IACLF,KAAK,EAAEC,MAAM,CAACR,MAAM,CAACW,UAAU,IAAI,CAAC,CAAC;IACrCD,MAAM,EAAEF,MAAM,CAACR,MAAM,CAACY,WAAW,IAAI,CAAC;GACvC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}