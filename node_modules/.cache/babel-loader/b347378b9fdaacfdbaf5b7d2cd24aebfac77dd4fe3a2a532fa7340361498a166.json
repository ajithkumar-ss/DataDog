{"ast":null,"code":"import { isChromium } from '../../../tools/utils/browserDetection';\nimport { getCurrentSite, areCookiesAuthorized, getCookie, setCookie } from '../../../browser/cookie';\nimport { tryOldCookiesMigration } from '../oldCookiesMigration';\nimport { SESSION_EXPIRATION_DELAY, SESSION_TIME_OUT_DELAY } from '../sessionConstants';\nimport { toSessionString, toSessionState, getExpiredSessionState } from '../sessionState';\nimport { SESSION_STORE_KEY } from './sessionStoreStrategy';\nexport function selectCookieStrategy(initConfiguration) {\n  var cookieOptions = buildCookieOptions(initConfiguration);\n  return areCookiesAuthorized(cookieOptions) ? {\n    type: 'Cookie',\n    cookieOptions: cookieOptions\n  } : undefined;\n}\nexport function initCookieStrategy(cookieOptions) {\n  var cookieStore = {\n    /**\n     * Lock strategy allows mitigating issues due to concurrent access to cookie.\n     * This issue concerns only chromium browsers and enabling this on firefox increases cookie write failures.\n     */\n    isLockEnabled: isChromium(),\n    persistSession: persistSessionCookie(cookieOptions),\n    retrieveSession: retrieveSessionCookie,\n    expireSession: function () {\n      return expireSessionCookie(cookieOptions);\n    }\n  };\n  tryOldCookiesMigration(cookieStore);\n  return cookieStore;\n}\nfunction persistSessionCookie(options) {\n  return function (session) {\n    setCookie(SESSION_STORE_KEY, toSessionString(session), SESSION_EXPIRATION_DELAY, options);\n  };\n}\nfunction expireSessionCookie(options) {\n  setCookie(SESSION_STORE_KEY, toSessionString(getExpiredSessionState()), SESSION_TIME_OUT_DELAY, options);\n}\nfunction retrieveSessionCookie() {\n  var sessionString = getCookie(SESSION_STORE_KEY);\n  return toSessionState(sessionString);\n}\nexport function buildCookieOptions(initConfiguration) {\n  var cookieOptions = {};\n  cookieOptions.secure = !!initConfiguration.useSecureSessionCookie || !!initConfiguration.usePartitionedCrossSiteSessionCookie || !!initConfiguration.useCrossSiteSessionCookie;\n  cookieOptions.crossSite = !!initConfiguration.usePartitionedCrossSiteSessionCookie || !!initConfiguration.useCrossSiteSessionCookie;\n  cookieOptions.partitioned = !!initConfiguration.usePartitionedCrossSiteSessionCookie;\n  if (initConfiguration.trackSessionAcrossSubdomains) {\n    cookieOptions.domain = getCurrentSite();\n  }\n  return cookieOptions;\n}","map":{"version":3,"names":["isChromium","getCurrentSite","areCookiesAuthorized","getCookie","setCookie","tryOldCookiesMigration","SESSION_EXPIRATION_DELAY","SESSION_TIME_OUT_DELAY","toSessionString","toSessionState","getExpiredSessionState","SESSION_STORE_KEY","selectCookieStrategy","initConfiguration","cookieOptions","buildCookieOptions","type","undefined","initCookieStrategy","cookieStore","isLockEnabled","persistSession","persistSessionCookie","retrieveSession","retrieveSessionCookie","expireSession","expireSessionCookie","options","session","sessionString","secure","useSecureSessionCookie","usePartitionedCrossSiteSessionCookie","useCrossSiteSessionCookie","crossSite","partitioned","trackSessionAcrossSubdomains","domain"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\session\\storeStrategies\\sessionInCookie.ts"],"sourcesContent":["import { isChromium } from '../../../tools/utils/browserDetection'\nimport type { CookieOptions } from '../../../browser/cookie'\nimport { getCurrentSite, areCookiesAuthorized, getCookie, setCookie } from '../../../browser/cookie'\nimport type { InitConfiguration } from '../../configuration'\nimport { tryOldCookiesMigration } from '../oldCookiesMigration'\nimport { SESSION_EXPIRATION_DELAY, SESSION_TIME_OUT_DELAY } from '../sessionConstants'\nimport type { SessionState } from '../sessionState'\nimport { toSessionString, toSessionState, getExpiredSessionState } from '../sessionState'\nimport type { SessionStoreStrategy, SessionStoreStrategyType } from './sessionStoreStrategy'\nimport { SESSION_STORE_KEY } from './sessionStoreStrategy'\n\nexport function selectCookieStrategy(initConfiguration: InitConfiguration): SessionStoreStrategyType | undefined {\n  const cookieOptions = buildCookieOptions(initConfiguration)\n  return areCookiesAuthorized(cookieOptions) ? { type: 'Cookie', cookieOptions } : undefined\n}\n\nexport function initCookieStrategy(cookieOptions: CookieOptions): SessionStoreStrategy {\n  const cookieStore = {\n    /**\n     * Lock strategy allows mitigating issues due to concurrent access to cookie.\n     * This issue concerns only chromium browsers and enabling this on firefox increases cookie write failures.\n     */\n    isLockEnabled: isChromium(),\n    persistSession: persistSessionCookie(cookieOptions),\n    retrieveSession: retrieveSessionCookie,\n    expireSession: () => expireSessionCookie(cookieOptions),\n  }\n\n  tryOldCookiesMigration(cookieStore)\n\n  return cookieStore\n}\n\nfunction persistSessionCookie(options: CookieOptions) {\n  return (session: SessionState) => {\n    setCookie(SESSION_STORE_KEY, toSessionString(session), SESSION_EXPIRATION_DELAY, options)\n  }\n}\n\nfunction expireSessionCookie(options: CookieOptions) {\n  setCookie(SESSION_STORE_KEY, toSessionString(getExpiredSessionState()), SESSION_TIME_OUT_DELAY, options)\n}\n\nfunction retrieveSessionCookie(): SessionState {\n  const sessionString = getCookie(SESSION_STORE_KEY)\n  return toSessionState(sessionString)\n}\n\nexport function buildCookieOptions(initConfiguration: InitConfiguration) {\n  const cookieOptions: CookieOptions = {}\n\n  cookieOptions.secure =\n    !!initConfiguration.useSecureSessionCookie ||\n    !!initConfiguration.usePartitionedCrossSiteSessionCookie ||\n    !!initConfiguration.useCrossSiteSessionCookie\n  cookieOptions.crossSite =\n    !!initConfiguration.usePartitionedCrossSiteSessionCookie || !!initConfiguration.useCrossSiteSessionCookie\n  cookieOptions.partitioned = !!initConfiguration.usePartitionedCrossSiteSessionCookie\n\n  if (initConfiguration.trackSessionAcrossSubdomains) {\n    cookieOptions.domain = getCurrentSite()\n  }\n\n  return cookieOptions\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,uCAAuC;AAElE,SAASC,cAAc,EAAEC,oBAAoB,EAAEC,SAAS,EAAEC,SAAS,QAAQ,yBAAyB;AAEpG,SAASC,sBAAsB,QAAQ,wBAAwB;AAC/D,SAASC,wBAAwB,EAAEC,sBAAsB,QAAQ,qBAAqB;AAEtF,SAASC,eAAe,EAAEC,cAAc,EAAEC,sBAAsB,QAAQ,iBAAiB;AAEzF,SAASC,iBAAiB,QAAQ,wBAAwB;AAE1D,OAAM,SAAUC,oBAAoBA,CAACC,iBAAoC;EACvE,IAAMC,aAAa,GAAGC,kBAAkB,CAACF,iBAAiB,CAAC;EAC3D,OAAOX,oBAAoB,CAACY,aAAa,CAAC,GAAG;IAAEE,IAAI,EAAE,QAAQ;IAAEF,aAAa,EAAAA;EAAA,CAAE,GAAGG,SAAS;AAC5F;AAEA,OAAM,SAAUC,kBAAkBA,CAACJ,aAA4B;EAC7D,IAAMK,WAAW,GAAG;IAClB;;;;IAIAC,aAAa,EAAEpB,UAAU,EAAE;IAC3BqB,cAAc,EAAEC,oBAAoB,CAACR,aAAa,CAAC;IACnDS,eAAe,EAAEC,qBAAqB;IACtCC,aAAa,EAAE,SAAAA,CAAA;MAAM,OAAAC,mBAAmB,CAACZ,aAAa,CAAC;IAAlC;GACtB;EAEDT,sBAAsB,CAACc,WAAW,CAAC;EAEnC,OAAOA,WAAW;AACpB;AAEA,SAASG,oBAAoBA,CAACK,OAAsB;EAClD,OAAO,UAACC,OAAqB;IAC3BxB,SAAS,CAACO,iBAAiB,EAAEH,eAAe,CAACoB,OAAO,CAAC,EAAEtB,wBAAwB,EAAEqB,OAAO,CAAC;EAC3F,CAAC;AACH;AAEA,SAASD,mBAAmBA,CAACC,OAAsB;EACjDvB,SAAS,CAACO,iBAAiB,EAAEH,eAAe,CAACE,sBAAsB,EAAE,CAAC,EAAEH,sBAAsB,EAAEoB,OAAO,CAAC;AAC1G;AAEA,SAASH,qBAAqBA,CAAA;EAC5B,IAAMK,aAAa,GAAG1B,SAAS,CAACQ,iBAAiB,CAAC;EAClD,OAAOF,cAAc,CAACoB,aAAa,CAAC;AACtC;AAEA,OAAM,SAAUd,kBAAkBA,CAACF,iBAAoC;EACrE,IAAMC,aAAa,GAAkB,EAAE;EAEvCA,aAAa,CAACgB,MAAM,GAClB,CAAC,CAACjB,iBAAiB,CAACkB,sBAAsB,IAC1C,CAAC,CAAClB,iBAAiB,CAACmB,oCAAoC,IACxD,CAAC,CAACnB,iBAAiB,CAACoB,yBAAyB;EAC/CnB,aAAa,CAACoB,SAAS,GACrB,CAAC,CAACrB,iBAAiB,CAACmB,oCAAoC,IAAI,CAAC,CAACnB,iBAAiB,CAACoB,yBAAyB;EAC3GnB,aAAa,CAACqB,WAAW,GAAG,CAAC,CAACtB,iBAAiB,CAACmB,oCAAoC;EAEpF,IAAInB,iBAAiB,CAACuB,4BAA4B,EAAE;IAClDtB,aAAa,CAACuB,MAAM,GAAGpC,cAAc,EAAE;EACzC;EAEA,OAAOa,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}