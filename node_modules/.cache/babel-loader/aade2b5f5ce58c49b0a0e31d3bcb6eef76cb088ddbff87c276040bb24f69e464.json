{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\deflate\\types.ts"],"sourcesContent":["import type { Encoder } from '../../tools/encoder'\n\nexport type DeflateWorkerAction =\n  // Action to send when creating the worker to check if the communication is working correctly.\n  // The worker should respond with a 'initialized' response.\n  | {\n      action: 'init'\n    }\n  // Action to send when writing some unfinished data. The worker will respond with a 'wrote'\n  // response, with the same id and measurements of the wrote data bytes count.\n  | {\n      action: 'write'\n      id: number\n      streamId: number\n      data: string\n    }\n  // Action to send when all data has been written and the state of the stream needs to be reset.\n  | {\n      action: 'reset'\n      streamId: number\n    }\n\nexport type DeflateWorkerResponse =\n  // Response to 'init' action\n  | {\n      type: 'initialized'\n      version: string\n    }\n  // Response to 'write' action\n  | {\n      type: 'wrote'\n      id: number\n      streamId: number\n      result: Uint8Array\n      trailer: Uint8Array\n      additionalBytesCount: number\n    }\n  // Could happen at any time when something goes wrong in the worker\n  | {\n      type: 'errored'\n      streamId?: number\n      error: Error | string\n    }\n\nexport interface DeflateWorker extends Worker {\n  postMessage(message: DeflateWorkerAction): void\n}\n\nexport type DeflateEncoder = Encoder<Uint8Array> & { stop: () => void }\n\nexport const enum DeflateEncoderStreamId {\n  REPLAY = 1,\n  RUM = 2,\n  RUM_REPLICA = 3,\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}