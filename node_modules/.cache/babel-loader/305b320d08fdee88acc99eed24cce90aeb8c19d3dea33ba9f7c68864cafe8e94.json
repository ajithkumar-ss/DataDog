{"ast":null,"code":"import { isEmptyObject } from '../../tools/utils/objectUtils';\nimport { objectEntries } from '../../tools/utils/polyfills';\nimport { dateNow } from '../../tools/utils/timeUtils';\nimport { SESSION_EXPIRATION_DELAY, SESSION_TIME_OUT_DELAY } from './sessionConstants';\nvar SESSION_ENTRY_REGEXP = /^([a-zA-Z]+)=([a-z0-9-]+)$/;\nvar SESSION_ENTRY_SEPARATOR = '&';\nexport var EXPIRED = '1';\nexport function getExpiredSessionState() {\n  return {\n    isExpired: EXPIRED\n  };\n}\nexport function isSessionInNotStartedState(session) {\n  return isEmptyObject(session);\n}\nexport function isSessionStarted(session) {\n  return !isSessionInNotStartedState(session);\n}\nexport function isSessionInExpiredState(session) {\n  return session.isExpired !== undefined || !isActiveSession(session);\n}\n// An active session is a session in either `Tracked` or `NotTracked` state\nfunction isActiveSession(sessionState) {\n  // created and expire can be undefined for versions which was not storing them\n  // these checks could be removed when older versions will not be available/live anymore\n  return (sessionState.created === undefined || dateNow() - Number(sessionState.created) < SESSION_TIME_OUT_DELAY) && (sessionState.expire === undefined || dateNow() < Number(sessionState.expire));\n}\nexport function expandSessionState(session) {\n  session.expire = String(dateNow() + SESSION_EXPIRATION_DELAY);\n}\nexport function toSessionString(session) {\n  return objectEntries(session).map(function (_a) {\n    var key = _a[0],\n      value = _a[1];\n    return \"\".concat(key, \"=\").concat(value);\n  }).join(SESSION_ENTRY_SEPARATOR);\n}\nexport function toSessionState(sessionString) {\n  var session = {};\n  if (isValidSessionString(sessionString)) {\n    sessionString.split(SESSION_ENTRY_SEPARATOR).forEach(function (entry) {\n      var matches = SESSION_ENTRY_REGEXP.exec(entry);\n      if (matches !== null) {\n        var key = matches[1],\n          value = matches[2];\n        session[key] = value;\n      }\n    });\n  }\n  return session;\n}\nfunction isValidSessionString(sessionString) {\n  return !!sessionString && (sessionString.indexOf(SESSION_ENTRY_SEPARATOR) !== -1 || SESSION_ENTRY_REGEXP.test(sessionString));\n}","map":{"version":3,"names":["isEmptyObject","objectEntries","dateNow","SESSION_EXPIRATION_DELAY","SESSION_TIME_OUT_DELAY","SESSION_ENTRY_REGEXP","SESSION_ENTRY_SEPARATOR","EXPIRED","getExpiredSessionState","isExpired","isSessionInNotStartedState","session","isSessionStarted","isSessionInExpiredState","undefined","isActiveSession","sessionState","created","Number","expire","expandSessionState","String","toSessionString","map","_a","key","value","concat","join","toSessionState","sessionString","isValidSessionString","split","forEach","entry","matches","exec","indexOf","test"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\session\\sessionState.ts"],"sourcesContent":["import { isEmptyObject } from '../../tools/utils/objectUtils'\nimport { objectEntries } from '../../tools/utils/polyfills'\nimport { dateNow } from '../../tools/utils/timeUtils'\nimport { SESSION_EXPIRATION_DELAY, SESSION_TIME_OUT_DELAY } from './sessionConstants'\n\nconst SESSION_ENTRY_REGEXP = /^([a-zA-Z]+)=([a-z0-9-]+)$/\nconst SESSION_ENTRY_SEPARATOR = '&'\n\nexport const EXPIRED = '1'\n\nexport interface SessionState {\n  id?: string\n  created?: string\n  expire?: string\n  isExpired?: typeof EXPIRED\n\n  [key: string]: string | undefined\n}\n\nexport function getExpiredSessionState(): SessionState {\n  return {\n    isExpired: EXPIRED,\n  }\n}\n\nexport function isSessionInNotStartedState(session: SessionState) {\n  return isEmptyObject(session)\n}\n\nexport function isSessionStarted(session: SessionState) {\n  return !isSessionInNotStartedState(session)\n}\n\nexport function isSessionInExpiredState(session: SessionState) {\n  return session.isExpired !== undefined || !isActiveSession(session)\n}\n\n// An active session is a session in either `Tracked` or `NotTracked` state\nfunction isActiveSession(sessionState: SessionState) {\n  // created and expire can be undefined for versions which was not storing them\n  // these checks could be removed when older versions will not be available/live anymore\n  return (\n    (sessionState.created === undefined || dateNow() - Number(sessionState.created) < SESSION_TIME_OUT_DELAY) &&\n    (sessionState.expire === undefined || dateNow() < Number(sessionState.expire))\n  )\n}\n\nexport function expandSessionState(session: SessionState) {\n  session.expire = String(dateNow() + SESSION_EXPIRATION_DELAY)\n}\n\nexport function toSessionString(session: SessionState) {\n  return objectEntries(session)\n    .map(([key, value]) => `${key}=${value}`)\n    .join(SESSION_ENTRY_SEPARATOR)\n}\n\nexport function toSessionState(sessionString: string | undefined | null) {\n  const session: SessionState = {}\n  if (isValidSessionString(sessionString)) {\n    sessionString.split(SESSION_ENTRY_SEPARATOR).forEach((entry) => {\n      const matches = SESSION_ENTRY_REGEXP.exec(entry)\n      if (matches !== null) {\n        const [, key, value] = matches\n        session[key] = value\n      }\n    })\n  }\n  return session\n}\n\nfunction isValidSessionString(sessionString: string | undefined | null): sessionString is string {\n  return (\n    !!sessionString &&\n    (sessionString.indexOf(SESSION_ENTRY_SEPARATOR) !== -1 || SESSION_ENTRY_REGEXP.test(sessionString))\n  )\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,+BAA+B;AAC7D,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,OAAO,QAAQ,6BAA6B;AACrD,SAASC,wBAAwB,EAAEC,sBAAsB,QAAQ,oBAAoB;AAErF,IAAMC,oBAAoB,GAAG,4BAA4B;AACzD,IAAMC,uBAAuB,GAAG,GAAG;AAEnC,OAAO,IAAMC,OAAO,GAAG,GAAG;AAW1B,OAAM,SAAUC,sBAAsBA,CAAA;EACpC,OAAO;IACLC,SAAS,EAAEF;GACZ;AACH;AAEA,OAAM,SAAUG,0BAA0BA,CAACC,OAAqB;EAC9D,OAAOX,aAAa,CAACW,OAAO,CAAC;AAC/B;AAEA,OAAM,SAAUC,gBAAgBA,CAACD,OAAqB;EACpD,OAAO,CAACD,0BAA0B,CAACC,OAAO,CAAC;AAC7C;AAEA,OAAM,SAAUE,uBAAuBA,CAACF,OAAqB;EAC3D,OAAOA,OAAO,CAACF,SAAS,KAAKK,SAAS,IAAI,CAACC,eAAe,CAACJ,OAAO,CAAC;AACrE;AAEA;AACA,SAASI,eAAeA,CAACC,YAA0B;EACjD;EACA;EACA,OACE,CAACA,YAAY,CAACC,OAAO,KAAKH,SAAS,IAAIZ,OAAO,EAAE,GAAGgB,MAAM,CAACF,YAAY,CAACC,OAAO,CAAC,GAAGb,sBAAsB,MACvGY,YAAY,CAACG,MAAM,KAAKL,SAAS,IAAIZ,OAAO,EAAE,GAAGgB,MAAM,CAACF,YAAY,CAACG,MAAM,CAAC,CAAC;AAElF;AAEA,OAAM,SAAUC,kBAAkBA,CAACT,OAAqB;EACtDA,OAAO,CAACQ,MAAM,GAAGE,MAAM,CAACnB,OAAO,EAAE,GAAGC,wBAAwB,CAAC;AAC/D;AAEA,OAAM,SAAUmB,eAAeA,CAACX,OAAqB;EACnD,OAAOV,aAAa,CAACU,OAAO,CAAC,CAC1BY,GAAG,CAAC,UAACC,EAAY;QAAXC,GAAG,GAAAD,EAAA;MAAEE,KAAK,GAAAF,EAAA;IAAM,UAAAG,MAAA,CAAGF,GAAG,OAAAE,MAAA,CAAID,KAAK,CAAE;EAAjB,CAAiB,CAAC,CACxCE,IAAI,CAACtB,uBAAuB,CAAC;AAClC;AAEA,OAAM,SAAUuB,cAAcA,CAACC,aAAwC;EACrE,IAAMnB,OAAO,GAAiB,EAAE;EAChC,IAAIoB,oBAAoB,CAACD,aAAa,CAAC,EAAE;IACvCA,aAAa,CAACE,KAAK,CAAC1B,uBAAuB,CAAC,CAAC2B,OAAO,CAAC,UAACC,KAAK;MACzD,IAAMC,OAAO,GAAG9B,oBAAoB,CAAC+B,IAAI,CAACF,KAAK,CAAC;MAChD,IAAIC,OAAO,KAAK,IAAI,EAAE;QACX,IAAAV,GAAG,GAAWU,OAAO,GAAlB;UAAET,KAAK,GAAIS,OAAO,GAAX;QACnBxB,OAAO,CAACc,GAAG,CAAC,GAAGC,KAAK;MACtB;IACF,CAAC,CAAC;EACJ;EACA,OAAOf,OAAO;AAChB;AAEA,SAASoB,oBAAoBA,CAACD,aAAwC;EACpE,OACE,CAAC,CAACA,aAAa,KACdA,aAAa,CAACO,OAAO,CAAC/B,uBAAuB,CAAC,KAAK,CAAC,CAAC,IAAID,oBAAoB,CAACiC,IAAI,CAACR,aAAa,CAAC,CAAC;AAEvG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}