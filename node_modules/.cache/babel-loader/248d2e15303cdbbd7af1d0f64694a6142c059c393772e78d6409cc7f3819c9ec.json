{"ast":null,"code":"import { Batch } from './batch';\nimport { createHttpRequest } from './httpRequest';\nimport { createFlushController } from './flushController';\nexport function startBatchWithReplica(configuration, primary, replica, reportError, pageExitObservable, sessionExpireObservable) {\n  var primaryBatch = createBatch(configuration, primary);\n  var replicaBatch = replica && createBatch(configuration, replica);\n  function createBatch(configuration, _a) {\n    var endpoint = _a.endpoint,\n      encoder = _a.encoder;\n    return new Batch(encoder, createHttpRequest(configuration, endpoint, configuration.batchBytesLimit, reportError), createFlushController({\n      messagesLimit: configuration.batchMessagesLimit,\n      bytesLimit: configuration.batchBytesLimit,\n      durationLimit: configuration.flushTimeout,\n      pageExitObservable: pageExitObservable,\n      sessionExpireObservable: sessionExpireObservable\n    }), configuration.messageBytesLimit);\n  }\n  return {\n    flushObservable: primaryBatch.flushController.flushObservable,\n    add: function (message, replicated) {\n      if (replicated === void 0) {\n        replicated = true;\n      }\n      primaryBatch.add(message);\n      if (replicaBatch && replicated) {\n        replicaBatch.add(replica.transformMessage ? replica.transformMessage(message) : message);\n      }\n    },\n    upsert: function (message, key) {\n      primaryBatch.upsert(message, key);\n      if (replicaBatch) {\n        replicaBatch.upsert(replica.transformMessage ? replica.transformMessage(message) : message, key);\n      }\n    },\n    stop: function () {\n      primaryBatch.stop();\n      replicaBatch === null || replicaBatch === void 0 ? void 0 : replicaBatch.stop();\n    }\n  };\n}","map":{"version":3,"names":["Batch","createHttpRequest","createFlushController","startBatchWithReplica","configuration","primary","replica","reportError","pageExitObservable","sessionExpireObservable","primaryBatch","createBatch","replicaBatch","_a","endpoint","encoder","batchBytesLimit","messagesLimit","batchMessagesLimit","bytesLimit","durationLimit","flushTimeout","messageBytesLimit","flushObservable","flushController","add","message","replicated","transformMessage","upsert","key","stop"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\transport\\startBatchWithReplica.ts"],"sourcesContent":["import type { Configuration, EndpointBuilder } from '../domain/configuration'\nimport type { Context } from '../tools/serialisation/context'\nimport type { Observable } from '../tools/observable'\nimport type { PageExitEvent } from '../browser/pageExitObservable'\nimport type { RawError } from '../domain/error/error.types'\nimport type { Encoder } from '../tools/encoder'\nimport { Batch } from './batch'\nimport { createHttpRequest } from './httpRequest'\nimport { createFlushController } from './flushController'\n\nexport interface BatchConfiguration {\n  endpoint: EndpointBuilder\n  encoder: Encoder\n}\n\ninterface ReplicaBatchConfiguration<T> extends BatchConfiguration {\n  transformMessage?: (message: T) => T\n}\n\nexport function startBatchWithReplica<T extends Context>(\n  configuration: Configuration,\n  primary: BatchConfiguration,\n  replica: ReplicaBatchConfiguration<T> | undefined,\n  reportError: (error: RawError) => void,\n  pageExitObservable: Observable<PageExitEvent>,\n  sessionExpireObservable: Observable<void>\n) {\n  const primaryBatch = createBatch(configuration, primary)\n  const replicaBatch = replica && createBatch(configuration, replica)\n\n  function createBatch(configuration: Configuration, { endpoint, encoder }: BatchConfiguration) {\n    return new Batch(\n      encoder,\n      createHttpRequest(configuration, endpoint, configuration.batchBytesLimit, reportError),\n      createFlushController({\n        messagesLimit: configuration.batchMessagesLimit,\n        bytesLimit: configuration.batchBytesLimit,\n        durationLimit: configuration.flushTimeout,\n        pageExitObservable,\n        sessionExpireObservable,\n      }),\n      configuration.messageBytesLimit\n    )\n  }\n\n  return {\n    flushObservable: primaryBatch.flushController.flushObservable,\n\n    add(message: T, replicated = true) {\n      primaryBatch.add(message)\n      if (replicaBatch && replicated) {\n        replicaBatch.add(replica.transformMessage ? replica.transformMessage(message) : message)\n      }\n    },\n\n    upsert: (message: T, key: string) => {\n      primaryBatch.upsert(message, key)\n      if (replicaBatch) {\n        replicaBatch.upsert(replica.transformMessage ? replica.transformMessage(message) : message, key)\n      }\n    },\n\n    stop: () => {\n      primaryBatch.stop()\n      replicaBatch?.stop()\n    },\n  }\n}\n"],"mappings":"AAMA,SAASA,KAAK,QAAQ,SAAS;AAC/B,SAASC,iBAAiB,QAAQ,eAAe;AACjD,SAASC,qBAAqB,QAAQ,mBAAmB;AAWzD,OAAM,SAAUC,qBAAqBA,CACnCC,aAA4B,EAC5BC,OAA2B,EAC3BC,OAAiD,EACjDC,WAAsC,EACtCC,kBAA6C,EAC7CC,uBAAyC;EAEzC,IAAMC,YAAY,GAAGC,WAAW,CAACP,aAAa,EAAEC,OAAO,CAAC;EACxD,IAAMO,YAAY,GAAGN,OAAO,IAAIK,WAAW,CAACP,aAAa,EAAEE,OAAO,CAAC;EAEnE,SAASK,WAAWA,CAACP,aAA4B,EAAES,EAAyC;QAAvCC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;MAAEC,OAAO,GAAAF,EAAA,CAAAE,OAAA;IACpE,OAAO,IAAIf,KAAK,CACde,OAAO,EACPd,iBAAiB,CAACG,aAAa,EAAEU,QAAQ,EAAEV,aAAa,CAACY,eAAe,EAAET,WAAW,CAAC,EACtFL,qBAAqB,CAAC;MACpBe,aAAa,EAAEb,aAAa,CAACc,kBAAkB;MAC/CC,UAAU,EAAEf,aAAa,CAACY,eAAe;MACzCI,aAAa,EAAEhB,aAAa,CAACiB,YAAY;MACzCb,kBAAkB,EAAAA,kBAAA;MAClBC,uBAAuB,EAAAA;KACxB,CAAC,EACFL,aAAa,CAACkB,iBAAiB,CAChC;EACH;EAEA,OAAO;IACLC,eAAe,EAAEb,YAAY,CAACc,eAAe,CAACD,eAAe;IAE7DE,GAAG,WAAAA,CAACC,OAAU,EAAEC,UAAiB;MAAjB,IAAAA,UAAA;QAAAA,UAAA,OAAiB;MAAA;MAC/BjB,YAAY,CAACe,GAAG,CAACC,OAAO,CAAC;MACzB,IAAId,YAAY,IAAIe,UAAU,EAAE;QAC9Bf,YAAY,CAACa,GAAG,CAACnB,OAAO,CAACsB,gBAAgB,GAAGtB,OAAO,CAACsB,gBAAgB,CAACF,OAAO,CAAC,GAAGA,OAAO,CAAC;MAC1F;IACF,CAAC;IAEDG,MAAM,EAAE,SAAAA,CAACH,OAAU,EAAEI,GAAW;MAC9BpB,YAAY,CAACmB,MAAM,CAACH,OAAO,EAAEI,GAAG,CAAC;MACjC,IAAIlB,YAAY,EAAE;QAChBA,YAAY,CAACiB,MAAM,CAACvB,OAAO,CAACsB,gBAAgB,GAAGtB,OAAO,CAACsB,gBAAgB,CAACF,OAAO,CAAC,GAAGA,OAAO,EAAEI,GAAG,CAAC;MAClG;IACF,CAAC;IAEDC,IAAI,EAAE,SAAAA,CAAA;MACJrB,YAAY,CAACqB,IAAI,EAAE;MACnBnB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEmB,IAAI,EAAE;IACtB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}