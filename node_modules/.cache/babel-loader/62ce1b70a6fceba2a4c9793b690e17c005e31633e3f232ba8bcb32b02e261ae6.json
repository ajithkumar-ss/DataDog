{"ast":null,"code":"import { callMonitored } from '../monitor';\nimport { noop } from '../utils/functionUtils';\nimport { computeStackTrace } from './computeStackTrace';\n/**\n * Creates a stacktrace without SDK internal frames.\n * Constraints:\n * - Has to be called at the utmost position of the call stack.\n * - No monitored function should encapsulate it, that is why we need to use callMonitored inside it.\n */\nexport function createHandlingStack() {\n  /**\n   * Skip the two internal frames:\n   * - SDK API (console.error, ...)\n   * - this function\n   * in order to keep only the user calls\n   */\n  var internalFramesToSkip = 2;\n  var error = new Error();\n  var formattedStack;\n  // IE needs to throw the error to fill in the stack trace\n  if (!error.stack) {\n    try {\n      throw error;\n    } catch (e) {\n      noop();\n    }\n  }\n  callMonitored(function () {\n    var stackTrace = computeStackTrace(error);\n    stackTrace.stack = stackTrace.stack.slice(internalFramesToSkip);\n    formattedStack = toStackTraceString(stackTrace);\n  });\n  return formattedStack;\n}\nexport function toStackTraceString(stack) {\n  var result = formatErrorMessage(stack);\n  stack.stack.forEach(function (frame) {\n    var func = frame.func === '?' ? '<anonymous>' : frame.func;\n    var args = frame.args && frame.args.length > 0 ? \"(\".concat(frame.args.join(', '), \")\") : '';\n    var line = frame.line ? \":\".concat(frame.line) : '';\n    var column = frame.line && frame.column ? \":\".concat(frame.column) : '';\n    result += \"\\n  at \".concat(func).concat(args, \" @ \").concat(frame.url).concat(line).concat(column);\n  });\n  return result;\n}\nexport function formatErrorMessage(stack) {\n  return \"\".concat(stack.name || 'Error', \": \").concat(stack.message);\n}","map":{"version":3,"names":["callMonitored","noop","computeStackTrace","createHandlingStack","internalFramesToSkip","error","Error","formattedStack","stack","e","stackTrace","slice","toStackTraceString","result","formatErrorMessage","forEach","frame","func","args","length","concat","join","line","column","url","name","message"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\tools\\stackTrace\\handlingStack.ts"],"sourcesContent":["import { callMonitored } from '../monitor'\nimport { noop } from '../utils/functionUtils'\nimport type { StackTrace } from './computeStackTrace'\nimport { computeStackTrace } from './computeStackTrace'\n\n/**\n * Creates a stacktrace without SDK internal frames.\n * Constraints:\n * - Has to be called at the utmost position of the call stack.\n * - No monitored function should encapsulate it, that is why we need to use callMonitored inside it.\n */\nexport function createHandlingStack(): string {\n  /**\n   * Skip the two internal frames:\n   * - SDK API (console.error, ...)\n   * - this function\n   * in order to keep only the user calls\n   */\n  const internalFramesToSkip = 2\n  const error = new Error()\n  let formattedStack: string\n\n  // IE needs to throw the error to fill in the stack trace\n  if (!error.stack) {\n    try {\n      throw error\n    } catch (e) {\n      noop()\n    }\n  }\n\n  callMonitored(() => {\n    const stackTrace = computeStackTrace(error)\n    stackTrace.stack = stackTrace.stack.slice(internalFramesToSkip)\n    formattedStack = toStackTraceString(stackTrace)\n  })\n\n  return formattedStack!\n}\n\nexport function toStackTraceString(stack: StackTrace) {\n  let result = formatErrorMessage(stack)\n  stack.stack.forEach((frame) => {\n    const func = frame.func === '?' ? '<anonymous>' : frame.func\n    const args = frame.args && frame.args.length > 0 ? `(${frame.args.join(', ')})` : ''\n    const line = frame.line ? `:${frame.line}` : ''\n    const column = frame.line && frame.column ? `:${frame.column}` : ''\n    result += `\\n  at ${func!}${args} @ ${frame.url!}${line}${column}`\n  })\n  return result\n}\n\nexport function formatErrorMessage(stack: StackTrace) {\n  return `${stack.name || 'Error'}: ${stack.message!}`\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,YAAY;AAC1C,SAASC,IAAI,QAAQ,wBAAwB;AAE7C,SAASC,iBAAiB,QAAQ,qBAAqB;AAEvD;;;;;;AAMA,OAAM,SAAUC,mBAAmBA,CAAA;EACjC;;;;;;EAMA,IAAMC,oBAAoB,GAAG,CAAC;EAC9B,IAAMC,KAAK,GAAG,IAAIC,KAAK,EAAE;EACzB,IAAIC,cAAsB;EAE1B;EACA,IAAI,CAACF,KAAK,CAACG,KAAK,EAAE;IAChB,IAAI;MACF,MAAMH,KAAK;IACb,CAAC,CAAC,OAAOI,CAAC,EAAE;MACVR,IAAI,EAAE;IACR;EACF;EAEAD,aAAa,CAAC;IACZ,IAAMU,UAAU,GAAGR,iBAAiB,CAACG,KAAK,CAAC;IAC3CK,UAAU,CAACF,KAAK,GAAGE,UAAU,CAACF,KAAK,CAACG,KAAK,CAACP,oBAAoB,CAAC;IAC/DG,cAAc,GAAGK,kBAAkB,CAACF,UAAU,CAAC;EACjD,CAAC,CAAC;EAEF,OAAOH,cAAe;AACxB;AAEA,OAAM,SAAUK,kBAAkBA,CAACJ,KAAiB;EAClD,IAAIK,MAAM,GAAGC,kBAAkB,CAACN,KAAK,CAAC;EACtCA,KAAK,CAACA,KAAK,CAACO,OAAO,CAAC,UAACC,KAAK;IACxB,IAAMC,IAAI,GAAGD,KAAK,CAACC,IAAI,KAAK,GAAG,GAAG,aAAa,GAAGD,KAAK,CAACC,IAAI;IAC5D,IAAMC,IAAI,GAAGF,KAAK,CAACE,IAAI,IAAIF,KAAK,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,GAAG,IAAAC,MAAA,CAAIJ,KAAK,CAACE,IAAI,CAACG,IAAI,CAAC,IAAI,CAAC,MAAG,GAAG,EAAE;IACpF,IAAMC,IAAI,GAAGN,KAAK,CAACM,IAAI,GAAG,IAAAF,MAAA,CAAIJ,KAAK,CAACM,IAAI,CAAE,GAAG,EAAE;IAC/C,IAAMC,MAAM,GAAGP,KAAK,CAACM,IAAI,IAAIN,KAAK,CAACO,MAAM,GAAG,IAAAH,MAAA,CAAIJ,KAAK,CAACO,MAAM,CAAE,GAAG,EAAE;IACnEV,MAAM,IAAI,UAAAO,MAAA,CAAUH,IAAK,EAAAG,MAAA,CAAGF,IAAI,SAAAE,MAAA,CAAMJ,KAAK,CAACQ,GAAI,EAAAJ,MAAA,CAAGE,IAAI,EAAAF,MAAA,CAAGG,MAAM,CAAE;EACpE,CAAC,CAAC;EACF,OAAOV,MAAM;AACf;AAEA,OAAM,SAAUC,kBAAkBA,CAACN,KAAiB;EAClD,OAAO,GAAAY,MAAA,CAAGZ,KAAK,CAACiB,IAAI,IAAI,OAAO,QAAAL,MAAA,CAAKZ,KAAK,CAACkB,OAAQ,CAAE;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}