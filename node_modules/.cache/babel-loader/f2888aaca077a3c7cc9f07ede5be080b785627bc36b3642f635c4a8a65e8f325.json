{"ast":null,"code":"/**\n * Internal context keep returning v1 format\n * to not break compatibility with logs data format\n */\nexport function startInternalContext(applicationId, sessionManager, viewContexts, actionContexts, urlContexts) {\n  return {\n    get: function (startTime) {\n      var viewContext = viewContexts.findView(startTime);\n      var urlContext = urlContexts.findUrl(startTime);\n      var session = sessionManager.findTrackedSession(startTime);\n      if (session && viewContext && urlContext) {\n        var actionId = actionContexts.findActionId(startTime);\n        return {\n          application_id: applicationId,\n          session_id: session.id,\n          user_action: actionId ? {\n            id: actionId\n          } : undefined,\n          view: {\n            id: viewContext.id,\n            name: viewContext.name,\n            referrer: urlContext.referrer,\n            url: urlContext.url\n          }\n        };\n      }\n    }\n  };\n}","map":{"version":3,"names":["startInternalContext","applicationId","sessionManager","viewContexts","actionContexts","urlContexts","get","startTime","viewContext","findView","urlContext","findUrl","session","findTrackedSession","actionId","findActionId","application_id","session_id","id","user_action","undefined","view","name","referrer","url"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\contexts\\internalContext.ts"],"sourcesContent":["import type { RelativeTime } from '@datadog/browser-core'\nimport type { ActionContexts } from '../action/actionCollection'\nimport type { RumSessionManager } from '../rumSessionManager'\nimport type { ViewContexts } from './viewContexts'\nimport type { UrlContexts } from './urlContexts'\n\nexport interface InternalContext {\n  application_id: string\n  session_id: string | undefined\n  view?: {\n    id: string\n    url: string\n    referrer: string\n    name?: string\n  }\n  user_action?: {\n    id: string | string[]\n  }\n}\n\n/**\n * Internal context keep returning v1 format\n * to not break compatibility with logs data format\n */\nexport function startInternalContext(\n  applicationId: string,\n  sessionManager: RumSessionManager,\n  viewContexts: ViewContexts,\n  actionContexts: ActionContexts,\n  urlContexts: UrlContexts\n) {\n  return {\n    get: (startTime?: number): InternalContext | undefined => {\n      const viewContext = viewContexts.findView(startTime as RelativeTime)\n      const urlContext = urlContexts.findUrl(startTime as RelativeTime)\n      const session = sessionManager.findTrackedSession(startTime as RelativeTime)\n      if (session && viewContext && urlContext) {\n        const actionId = actionContexts.findActionId(startTime as RelativeTime)\n        return {\n          application_id: applicationId,\n          session_id: session.id,\n          user_action: actionId ? { id: actionId } : undefined,\n          view: { id: viewContext.id, name: viewContext.name, referrer: urlContext.referrer, url: urlContext.url },\n        }\n      }\n    },\n  }\n}\n"],"mappings":"AAoBA;;;;AAIA,OAAM,SAAUA,oBAAoBA,CAClCC,aAAqB,EACrBC,cAAiC,EACjCC,YAA0B,EAC1BC,cAA8B,EAC9BC,WAAwB;EAExB,OAAO;IACLC,GAAG,EAAE,SAAAA,CAACC,SAAkB;MACtB,IAAMC,WAAW,GAAGL,YAAY,CAACM,QAAQ,CAACF,SAAyB,CAAC;MACpE,IAAMG,UAAU,GAAGL,WAAW,CAACM,OAAO,CAACJ,SAAyB,CAAC;MACjE,IAAMK,OAAO,GAAGV,cAAc,CAACW,kBAAkB,CAACN,SAAyB,CAAC;MAC5E,IAAIK,OAAO,IAAIJ,WAAW,IAAIE,UAAU,EAAE;QACxC,IAAMI,QAAQ,GAAGV,cAAc,CAACW,YAAY,CAACR,SAAyB,CAAC;QACvE,OAAO;UACLS,cAAc,EAAEf,aAAa;UAC7BgB,UAAU,EAAEL,OAAO,CAACM,EAAE;UACtBC,WAAW,EAAEL,QAAQ,GAAG;YAAEI,EAAE,EAAEJ;UAAQ,CAAE,GAAGM,SAAS;UACpDC,IAAI,EAAE;YAAEH,EAAE,EAAEV,WAAW,CAACU,EAAE;YAAEI,IAAI,EAAEd,WAAW,CAACc,IAAI;YAAEC,QAAQ,EAAEb,UAAU,CAACa,QAAQ;YAAEC,GAAG,EAAEd,UAAU,CAACc;UAAG;SACvG;MACH;IACF;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}