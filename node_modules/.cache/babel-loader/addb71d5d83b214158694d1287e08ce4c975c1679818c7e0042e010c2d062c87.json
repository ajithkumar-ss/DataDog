{"ast":null,"code":"import { endsWith, includes } from '../tools/utils/polyfills';\nimport { getGlobalObject } from '../tools/getGlobalObject';\nexport function getEventBridge() {\n  var eventBridgeGlobal = getEventBridgeGlobal();\n  if (!eventBridgeGlobal) {\n    return;\n  }\n  return {\n    getCapabilities: function () {\n      var _a;\n      return JSON.parse(((_a = eventBridgeGlobal.getCapabilities) === null || _a === void 0 ? void 0 : _a.call(eventBridgeGlobal)) || '[]');\n    },\n    getPrivacyLevel: function () {\n      var _a;\n      return (_a = eventBridgeGlobal.getPrivacyLevel) === null || _a === void 0 ? void 0 : _a.call(eventBridgeGlobal);\n    },\n    getAllowedWebViewHosts: function () {\n      return JSON.parse(eventBridgeGlobal.getAllowedWebViewHosts());\n    },\n    send: function (eventType, event, viewId) {\n      var view = viewId ? {\n        id: viewId\n      } : undefined;\n      eventBridgeGlobal.send(JSON.stringify({\n        eventType: eventType,\n        event: event,\n        view: view\n      }));\n    }\n  };\n}\nexport function bridgeSupports(capability) {\n  var bridge = getEventBridge();\n  return !!bridge && includes(bridge.getCapabilities(), capability);\n}\nexport function canUseEventBridge(currentHost) {\n  var _a;\n  if (currentHost === void 0) {\n    currentHost = (_a = getGlobalObject().location) === null || _a === void 0 ? void 0 : _a.hostname;\n  }\n  var bridge = getEventBridge();\n  return !!bridge && bridge.getAllowedWebViewHosts().some(function (allowedHost) {\n    return currentHost === allowedHost || endsWith(currentHost, \".\".concat(allowedHost));\n  });\n}\nfunction getEventBridgeGlobal() {\n  return getGlobalObject().DatadogEventBridge;\n}","map":{"version":3,"names":["endsWith","includes","getGlobalObject","getEventBridge","eventBridgeGlobal","getEventBridgeGlobal","getCapabilities","JSON","parse","_a","call","getPrivacyLevel","getAllowedWebViewHosts","send","eventType","event","viewId","view","id","undefined","stringify","bridgeSupports","capability","bridge","canUseEventBridge","currentHost","location","hostname","some","allowedHost","concat","DatadogEventBridge"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\transport\\eventBridge.ts"],"sourcesContent":["import { endsWith, includes } from '../tools/utils/polyfills'\nimport { getGlobalObject } from '../tools/getGlobalObject'\n\nexport interface BrowserWindowWithEventBridge extends Window {\n  DatadogEventBridge?: DatadogEventBridge\n}\n\nexport interface DatadogEventBridge {\n  getCapabilities?(): string\n  getPrivacyLevel?(): string\n  getAllowedWebViewHosts(): string\n  send(msg: string): void\n}\n\nexport const enum BridgeCapability {\n  RECORDS = 'records',\n}\n\nexport function getEventBridge<T, E>() {\n  const eventBridgeGlobal = getEventBridgeGlobal()\n\n  if (!eventBridgeGlobal) {\n    return\n  }\n\n  return {\n    getCapabilities() {\n      return JSON.parse(eventBridgeGlobal.getCapabilities?.() || '[]') as BridgeCapability[]\n    },\n    getPrivacyLevel() {\n      return eventBridgeGlobal.getPrivacyLevel?.()\n    },\n    getAllowedWebViewHosts() {\n      return JSON.parse(eventBridgeGlobal.getAllowedWebViewHosts()) as string[]\n    },\n    send(eventType: T, event: E, viewId?: string) {\n      const view = viewId ? { id: viewId } : undefined\n      eventBridgeGlobal.send(JSON.stringify({ eventType, event, view }))\n    },\n  }\n}\n\nexport function bridgeSupports(capability: BridgeCapability): boolean {\n  const bridge = getEventBridge()\n  return !!bridge && includes(bridge.getCapabilities(), capability)\n}\n\nexport function canUseEventBridge(currentHost = getGlobalObject<Window>().location?.hostname): boolean {\n  const bridge = getEventBridge()\n  return (\n    !!bridge &&\n    bridge\n      .getAllowedWebViewHosts()\n      .some((allowedHost) => currentHost === allowedHost || endsWith(currentHost, `.${allowedHost}`))\n  )\n}\n\nfunction getEventBridgeGlobal() {\n  return getGlobalObject<BrowserWindowWithEventBridge>().DatadogEventBridge\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,QAAQ,QAAQ,0BAA0B;AAC7D,SAASC,eAAe,QAAQ,0BAA0B;AAiB1D,OAAM,SAAUC,cAAcA,CAAA;EAC5B,IAAMC,iBAAiB,GAAGC,oBAAoB,EAAE;EAEhD,IAAI,CAACD,iBAAiB,EAAE;IACtB;EACF;EAEA,OAAO;IACLE,eAAe,WAAAA,CAAA;;MACb,OAAOC,IAAI,CAACC,KAAK,CAAC,EAAAC,EAAA,GAAAL,iBAAiB,CAACE,eAAe,cAAAG,EAAA,uBAAAA,EAAA,CAAAC,IAAA,CAAAN,iBAAA,CAAI,KAAI,IAAI,CAAuB;IACxF,CAAC;IACDO,eAAe,WAAAA,CAAA;;MACb,OAAO,CAAAF,EAAA,GAAAL,iBAAiB,CAACO,eAAe,cAAAF,EAAA,uBAAAA,EAAA,CAAAC,IAAA,CAAAN,iBAAA,CAAI;IAC9C,CAAC;IACDQ,sBAAsB,WAAAA,CAAA;MACpB,OAAOL,IAAI,CAACC,KAAK,CAACJ,iBAAiB,CAACQ,sBAAsB,EAAE,CAAa;IAC3E,CAAC;IACDC,IAAI,WAAAA,CAACC,SAAY,EAAEC,KAAQ,EAAEC,MAAe;MAC1C,IAAMC,IAAI,GAAGD,MAAM,GAAG;QAAEE,EAAE,EAAEF;MAAM,CAAE,GAAGG,SAAS;MAChDf,iBAAiB,CAACS,IAAI,CAACN,IAAI,CAACa,SAAS,CAAC;QAAEN,SAAS,EAAAA,SAAA;QAAEC,KAAK,EAAAA,KAAA;QAAEE,IAAI,EAAAA;MAAA,CAAE,CAAC,CAAC;IACpE;GACD;AACH;AAEA,OAAM,SAAUI,cAAcA,CAACC,UAA4B;EACzD,IAAMC,MAAM,GAAGpB,cAAc,EAAE;EAC/B,OAAO,CAAC,CAACoB,MAAM,IAAItB,QAAQ,CAACsB,MAAM,CAACjB,eAAe,EAAE,EAAEgB,UAAU,CAAC;AACnE;AAEA,OAAM,SAAUE,iBAAiBA,CAACC,WAA0D;;EAA1D,IAAAA,WAAA;IAAAA,WAAA,IAAAhB,EAAA,GAAcP,eAAe,EAAU,CAACwB,QAAQ,cAAAjB,EAAA,uBAAAA,EAAA,CAAEkB,QAAQ;EAAA;EAC1F,IAAMJ,MAAM,GAAGpB,cAAc,EAAE;EAC/B,OACE,CAAC,CAACoB,MAAM,IACRA,MAAM,CACHX,sBAAsB,EAAE,CACxBgB,IAAI,CAAC,UAACC,WAAW;IAAK,OAAAJ,WAAW,KAAKI,WAAW,IAAI7B,QAAQ,CAACyB,WAAW,EAAE,IAAAK,MAAA,CAAID,WAAW,CAAE,CAAC;EAAvE,CAAuE,CAAC;AAErG;AAEA,SAASxB,oBAAoBA,CAAA;EAC3B,OAAOH,eAAe,EAAgC,CAAC6B,kBAAkB;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}