{"ast":null,"code":"import { buildUrl } from '@datadog/browser-core';\nimport { getParentNode, isNodeShadowRoot } from '@datadog/browser-rum-core';\nimport { CENSORED_STRING_MARK } from '../../../constants';\nimport { shouldMaskNode } from '../privacy';\nvar serializedNodeIds = new WeakMap();\nexport function hasSerializedNode(node) {\n  return serializedNodeIds.has(node);\n}\nexport function nodeAndAncestorsHaveSerializedNode(node) {\n  var current = node;\n  while (current) {\n    if (!hasSerializedNode(current) && !isNodeShadowRoot(current)) {\n      return false;\n    }\n    current = getParentNode(current);\n  }\n  return true;\n}\nexport function getSerializedNodeId(node) {\n  return serializedNodeIds.get(node);\n}\nexport function setSerializedNodeId(node, serializeNodeId) {\n  serializedNodeIds.set(node, serializeNodeId);\n}\n/**\n * Get the element \"value\" to be serialized as an attribute or an input update record. It respects\n * the input privacy mode of the element.\n * PERFROMANCE OPTIMIZATION: Assumes that privacy level `HIDDEN` is never encountered because of earlier checks.\n */\nexport function getElementInputValue(element, nodePrivacyLevel) {\n  /*\n   BROWSER SPEC NOTE: <input>, <select>\n   For some <input> elements, the `value` is an exceptional property/attribute that has the\n   value synced between el.value and el.getAttribute()\n   input[type=button,checkbox,hidden,image,radio,reset,submit]\n   */\n  var tagName = element.tagName;\n  var value = element.value;\n  if (shouldMaskNode(element, nodePrivacyLevel)) {\n    var type = element.type;\n    if (tagName === 'INPUT' && (type === 'button' || type === 'submit' || type === 'reset')) {\n      // Overrule `MASK` privacy level for button-like element values, as they are used during replay\n      // to display their label. They can still be hidden via the \"hidden\" privacy attribute or class name.\n      return value;\n    } else if (!value || tagName === 'OPTION') {\n      // <Option> value provides no benefit\n      return;\n    }\n    return CENSORED_STRING_MARK;\n  }\n  if (tagName === 'OPTION' || tagName === 'SELECT') {\n    return element.value;\n  }\n  if (tagName !== 'INPUT' && tagName !== 'TEXTAREA') {\n    return;\n  }\n  return value;\n}\nexport var URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")([^\"]*)\"|([^)]*))\\)/gm;\nexport var ABSOLUTE_URL = /^[A-Za-z]+:|^\\/\\//;\nexport var DATA_URI = /^data:.*,/i;\nexport function switchToAbsoluteUrl(cssText, cssHref) {\n  return cssText.replace(URL_IN_CSS_REF, function (matchingSubstring, singleQuote, urlWrappedInSingleQuotes, doubleQuote, urlWrappedInDoubleQuotes, urlNotWrappedInQuotes) {\n    var url = urlWrappedInSingleQuotes || urlWrappedInDoubleQuotes || urlNotWrappedInQuotes;\n    if (!cssHref || !url || ABSOLUTE_URL.test(url) || DATA_URI.test(url)) {\n      return matchingSubstring;\n    }\n    var quote = singleQuote || doubleQuote || '';\n    return \"url(\".concat(quote).concat(makeUrlAbsolute(url, cssHref)).concat(quote, \")\");\n  });\n}\nexport function makeUrlAbsolute(url, baseUrl) {\n  try {\n    return buildUrl(url, baseUrl).href;\n  } catch (_) {\n    return url;\n  }\n}\nvar TAG_NAME_REGEX = /[^a-z1-6-_]/;\nexport function getValidTagName(tagName) {\n  var processedTagName = tagName.toLowerCase().trim();\n  if (TAG_NAME_REGEX.test(processedTagName)) {\n    // if the tag name is odd and we cannot extract\n    // anything from the string, then we return a\n    // generic div\n    return 'div';\n  }\n  return processedTagName;\n}\nexport function censoredImageForSize(width, height) {\n  return \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='\".concat(width, \"' height='\").concat(height, \"' style='background-color:silver'%3E%3C/svg%3E\");\n}","map":{"version":3,"names":["buildUrl","getParentNode","isNodeShadowRoot","CENSORED_STRING_MARK","shouldMaskNode","serializedNodeIds","WeakMap","hasSerializedNode","node","has","nodeAndAncestorsHaveSerializedNode","current","getSerializedNodeId","get","setSerializedNodeId","serializeNodeId","set","getElementInputValue","element","nodePrivacyLevel","tagName","value","type","URL_IN_CSS_REF","ABSOLUTE_URL","DATA_URI","switchToAbsoluteUrl","cssText","cssHref","replace","matchingSubstring","singleQuote","urlWrappedInSingleQuotes","doubleQuote","urlWrappedInDoubleQuotes","urlNotWrappedInQuotes","url","test","quote","concat","makeUrlAbsolute","baseUrl","href","_","TAG_NAME_REGEX","getValidTagName","processedTagName","toLowerCase","trim","censoredImageForSize","width","height"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\record\\serialization\\serializationUtils.ts"],"sourcesContent":["import { buildUrl } from '@datadog/browser-core'\nimport { getParentNode, isNodeShadowRoot } from '@datadog/browser-rum-core'\nimport type { NodePrivacyLevel } from '../../../constants'\nimport { CENSORED_STRING_MARK } from '../../../constants'\nimport { shouldMaskNode } from '../privacy'\nimport type { NodeWithSerializedNode } from './serialization.types'\n\nconst serializedNodeIds = new WeakMap<Node, number>()\n\nexport function hasSerializedNode(node: Node): node is NodeWithSerializedNode {\n  return serializedNodeIds.has(node)\n}\n\nexport function nodeAndAncestorsHaveSerializedNode(node: Node): node is NodeWithSerializedNode {\n  let current: Node | null = node\n  while (current) {\n    if (!hasSerializedNode(current) && !isNodeShadowRoot(current)) {\n      return false\n    }\n    current = getParentNode(current)\n  }\n  return true\n}\n\nexport function getSerializedNodeId(node: NodeWithSerializedNode): number\nexport function getSerializedNodeId(node: Node): number | undefined\nexport function getSerializedNodeId(node: Node) {\n  return serializedNodeIds.get(node)\n}\n\nexport function setSerializedNodeId(node: Node, serializeNodeId: number) {\n  serializedNodeIds.set(node, serializeNodeId)\n}\n\n/**\n * Get the element \"value\" to be serialized as an attribute or an input update record. It respects\n * the input privacy mode of the element.\n * PERFROMANCE OPTIMIZATION: Assumes that privacy level `HIDDEN` is never encountered because of earlier checks.\n */\nexport function getElementInputValue(element: Element, nodePrivacyLevel: NodePrivacyLevel) {\n  /*\n   BROWSER SPEC NOTE: <input>, <select>\n   For some <input> elements, the `value` is an exceptional property/attribute that has the\n   value synced between el.value and el.getAttribute()\n   input[type=button,checkbox,hidden,image,radio,reset,submit]\n   */\n  const tagName = element.tagName\n  const value = (element as HTMLInputElement | HTMLTextAreaElement).value\n\n  if (shouldMaskNode(element, nodePrivacyLevel)) {\n    const type = (element as HTMLInputElement | HTMLTextAreaElement).type\n    if (tagName === 'INPUT' && (type === 'button' || type === 'submit' || type === 'reset')) {\n      // Overrule `MASK` privacy level for button-like element values, as they are used during replay\n      // to display their label. They can still be hidden via the \"hidden\" privacy attribute or class name.\n      return value\n    } else if (!value || tagName === 'OPTION') {\n      // <Option> value provides no benefit\n      return\n    }\n    return CENSORED_STRING_MARK\n  }\n\n  if (tagName === 'OPTION' || tagName === 'SELECT') {\n    return (element as HTMLOptionElement | HTMLSelectElement).value\n  }\n\n  if (tagName !== 'INPUT' && tagName !== 'TEXTAREA') {\n    return\n  }\n\n  return value\n}\n\nexport const URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")([^\"]*)\"|([^)]*))\\)/gm\nexport const ABSOLUTE_URL = /^[A-Za-z]+:|^\\/\\//\nexport const DATA_URI = /^data:.*,/i\n\nexport function switchToAbsoluteUrl(cssText: string, cssHref: string | null): string {\n  return cssText.replace(\n    URL_IN_CSS_REF,\n    (\n      matchingSubstring: string,\n      singleQuote: string | undefined,\n      urlWrappedInSingleQuotes: string | undefined,\n      doubleQuote: string | undefined,\n      urlWrappedInDoubleQuotes: string | undefined,\n      urlNotWrappedInQuotes: string | undefined\n    ) => {\n      const url = urlWrappedInSingleQuotes || urlWrappedInDoubleQuotes || urlNotWrappedInQuotes\n\n      if (!cssHref || !url || ABSOLUTE_URL.test(url) || DATA_URI.test(url)) {\n        return matchingSubstring\n      }\n\n      const quote = singleQuote || doubleQuote || ''\n      return `url(${quote}${makeUrlAbsolute(url, cssHref)}${quote})`\n    }\n  )\n}\n\nexport function makeUrlAbsolute(url: string, baseUrl: string): string {\n  try {\n    return buildUrl(url, baseUrl).href\n  } catch (_) {\n    return url\n  }\n}\n\nconst TAG_NAME_REGEX = /[^a-z1-6-_]/\nexport function getValidTagName(tagName: string): string {\n  const processedTagName = tagName.toLowerCase().trim()\n\n  if (TAG_NAME_REGEX.test(processedTagName)) {\n    // if the tag name is odd and we cannot extract\n    // anything from the string, then we return a\n    // generic div\n    return 'div'\n  }\n\n  return processedTagName\n}\n\nexport function censoredImageForSize(width: number, height: number) {\n  return `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='${width}' height='${height}' style='background-color:silver'%3E%3C/svg%3E`\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,2BAA2B;AAE3E,SAASC,oBAAoB,QAAQ,oBAAoB;AACzD,SAASC,cAAc,QAAQ,YAAY;AAG3C,IAAMC,iBAAiB,GAAG,IAAIC,OAAO,EAAgB;AAErD,OAAM,SAAUC,iBAAiBA,CAACC,IAAU;EAC1C,OAAOH,iBAAiB,CAACI,GAAG,CAACD,IAAI,CAAC;AACpC;AAEA,OAAM,SAAUE,kCAAkCA,CAACF,IAAU;EAC3D,IAAIG,OAAO,GAAgBH,IAAI;EAC/B,OAAOG,OAAO,EAAE;IACd,IAAI,CAACJ,iBAAiB,CAACI,OAAO,CAAC,IAAI,CAACT,gBAAgB,CAACS,OAAO,CAAC,EAAE;MAC7D,OAAO,KAAK;IACd;IACAA,OAAO,GAAGV,aAAa,CAACU,OAAO,CAAC;EAClC;EACA,OAAO,IAAI;AACb;AAIA,OAAM,SAAUC,mBAAmBA,CAACJ,IAAU;EAC5C,OAAOH,iBAAiB,CAACQ,GAAG,CAACL,IAAI,CAAC;AACpC;AAEA,OAAM,SAAUM,mBAAmBA,CAACN,IAAU,EAAEO,eAAuB;EACrEV,iBAAiB,CAACW,GAAG,CAACR,IAAI,EAAEO,eAAe,CAAC;AAC9C;AAEA;;;;;AAKA,OAAM,SAAUE,oBAAoBA,CAACC,OAAgB,EAAEC,gBAAkC;EACvF;;;;;;EAMA,IAAMC,OAAO,GAAGF,OAAO,CAACE,OAAO;EAC/B,IAAMC,KAAK,GAAIH,OAAkD,CAACG,KAAK;EAEvE,IAAIjB,cAAc,CAACc,OAAO,EAAEC,gBAAgB,CAAC,EAAE;IAC7C,IAAMG,IAAI,GAAIJ,OAAkD,CAACI,IAAI;IACrE,IAAIF,OAAO,KAAK,OAAO,KAAKE,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,OAAO,CAAC,EAAE;MACvF;MACA;MACA,OAAOD,KAAK;IACd,CAAC,MAAM,IAAI,CAACA,KAAK,IAAID,OAAO,KAAK,QAAQ,EAAE;MACzC;MACA;IACF;IACA,OAAOjB,oBAAoB;EAC7B;EAEA,IAAIiB,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,QAAQ,EAAE;IAChD,OAAQF,OAAiD,CAACG,KAAK;EACjE;EAEA,IAAID,OAAO,KAAK,OAAO,IAAIA,OAAO,KAAK,UAAU,EAAE;IACjD;EACF;EAEA,OAAOC,KAAK;AACd;AAEA,OAAO,IAAME,cAAc,GAAG,8CAA8C;AAC5E,OAAO,IAAMC,YAAY,GAAG,mBAAmB;AAC/C,OAAO,IAAMC,QAAQ,GAAG,YAAY;AAEpC,OAAM,SAAUC,mBAAmBA,CAACC,OAAe,EAAEC,OAAsB;EACzE,OAAOD,OAAO,CAACE,OAAO,CACpBN,cAAc,EACd,UACEO,iBAAyB,EACzBC,WAA+B,EAC/BC,wBAA4C,EAC5CC,WAA+B,EAC/BC,wBAA4C,EAC5CC,qBAAyC;IAEzC,IAAMC,GAAG,GAAGJ,wBAAwB,IAAIE,wBAAwB,IAAIC,qBAAqB;IAEzF,IAAI,CAACP,OAAO,IAAI,CAACQ,GAAG,IAAIZ,YAAY,CAACa,IAAI,CAACD,GAAG,CAAC,IAAIX,QAAQ,CAACY,IAAI,CAACD,GAAG,CAAC,EAAE;MACpE,OAAON,iBAAiB;IAC1B;IAEA,IAAMQ,KAAK,GAAGP,WAAW,IAAIE,WAAW,IAAI,EAAE;IAC9C,OAAO,OAAAM,MAAA,CAAOD,KAAK,EAAAC,MAAA,CAAGC,eAAe,CAACJ,GAAG,EAAER,OAAO,CAAC,EAAAW,MAAA,CAAGD,KAAK,MAAG;EAChE,CAAC,CACF;AACH;AAEA,OAAM,SAAUE,eAAeA,CAACJ,GAAW,EAAEK,OAAe;EAC1D,IAAI;IACF,OAAOzC,QAAQ,CAACoC,GAAG,EAAEK,OAAO,CAAC,CAACC,IAAI;EACpC,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,OAAOP,GAAG;EACZ;AACF;AAEA,IAAMQ,cAAc,GAAG,aAAa;AACpC,OAAM,SAAUC,eAAeA,CAACzB,OAAe;EAC7C,IAAM0B,gBAAgB,GAAG1B,OAAO,CAAC2B,WAAW,EAAE,CAACC,IAAI,EAAE;EAErD,IAAIJ,cAAc,CAACP,IAAI,CAACS,gBAAgB,CAAC,EAAE;IACzC;IACA;IACA;IACA,OAAO,KAAK;EACd;EAEA,OAAOA,gBAAgB;AACzB;AAEA,OAAM,SAAUG,oBAAoBA,CAACC,KAAa,EAAEC,MAAc;EAChE,OAAO,uEAAAZ,MAAA,CAAuEW,KAAK,gBAAAX,MAAA,CAAaY,MAAM,mDAAgD;AACxJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}