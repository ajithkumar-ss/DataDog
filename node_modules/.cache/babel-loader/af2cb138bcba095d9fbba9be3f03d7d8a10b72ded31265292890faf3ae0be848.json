{"ast":null,"code":"import { ConsoleApiName } from '../../tools/display';\nimport { NO_ERROR_STACK_PRESENT_MESSAGE } from '../error/error';\nimport { toStackTraceString } from '../../tools/stackTrace/handlingStack';\nimport { getExperimentalFeatures } from '../../tools/experimentalFeatures';\nimport { INTAKE_SITE_STAGING, INTAKE_SITE_US1_FED } from '../configuration';\nimport { Observable } from '../../tools/observable';\nimport { timeStampNow } from '../../tools/utils/timeUtils';\nimport { displayIfDebugEnabled, startMonitorErrorCollection } from '../../tools/monitor';\nimport { sendToExtension } from '../../tools/sendToExtension';\nimport { startsWith, arrayFrom, includes, assign } from '../../tools/utils/polyfills';\nimport { performDraw } from '../../tools/utils/numberUtils';\nimport { jsonStringify } from '../../tools/serialisation/jsonStringify';\nimport { combine } from '../../tools/mergeInto';\nimport { computeStackTrace } from '../../tools/stackTrace/computeStackTrace';\nimport { getConnectivity } from '../connectivity';\nimport { TelemetryType } from './rawTelemetryEvent.types';\nvar ALLOWED_FRAME_URLS = ['https://www.datadoghq-browser-agent.com', 'https://www.datad0g-browser-agent.com', 'https://d3uc069fcn7uxw.cloudfront.net', 'https://d20xtzwzcl0ceb.cloudfront.net', 'http://localhost', '<anonymous>'];\nvar TELEMETRY_EXCLUDED_SITES = [INTAKE_SITE_US1_FED];\nvar telemetryConfiguration = {\n  maxEventsPerPage: 0,\n  sentEventCount: 0\n};\nvar onRawTelemetryEventCollected;\nexport function startTelemetry(telemetryService, configuration) {\n  var _a;\n  var contextProvider;\n  var observable = new Observable();\n  var telemetryEnabled = !includes(TELEMETRY_EXCLUDED_SITES, configuration.site) && performDraw(configuration.telemetrySampleRate);\n  var telemetryEnabledPerType = (_a = {}, _a[TelemetryType.log] = telemetryEnabled, _a[TelemetryType.configuration] = telemetryEnabled && performDraw(configuration.telemetryConfigurationSampleRate), _a[TelemetryType.usage] = telemetryEnabled && performDraw(configuration.telemetryUsageSampleRate), _a);\n  var runtimeEnvInfo = getRuntimeEnvInfo();\n  onRawTelemetryEventCollected = function (rawEvent) {\n    if (telemetryEnabledPerType[rawEvent.type]) {\n      var event_1 = toTelemetryEvent(telemetryService, rawEvent, runtimeEnvInfo);\n      observable.notify(event_1);\n      sendToExtension('telemetry', event_1);\n    }\n  };\n  startMonitorErrorCollection(addTelemetryError);\n  assign(telemetryConfiguration, {\n    maxEventsPerPage: configuration.maxTelemetryEventsPerPage,\n    sentEventCount: 0\n  });\n  function toTelemetryEvent(telemetryService, event, runtimeEnvInfo) {\n    return combine({\n      type: 'telemetry',\n      date: timeStampNow(),\n      service: telemetryService,\n      version: \"5.17.1\",\n      source: 'browser',\n      _dd: {\n        format_version: 2\n      },\n      telemetry: combine(event, {\n        runtime_env: runtimeEnvInfo,\n        connectivity: getConnectivity()\n      }),\n      experimental_features: arrayFrom(getExperimentalFeatures())\n    }, contextProvider !== undefined ? contextProvider() : {});\n  }\n  return {\n    setContextProvider: function (provider) {\n      contextProvider = provider;\n    },\n    observable: observable,\n    enabled: telemetryEnabled\n  };\n}\nfunction getRuntimeEnvInfo() {\n  return {\n    is_local_file: window.location.protocol === 'file:',\n    is_worker: 'WorkerGlobalScope' in self\n  };\n}\nexport function startFakeTelemetry() {\n  var events = [];\n  assign(telemetryConfiguration, {\n    maxEventsPerPage: Infinity,\n    sentEventCount: 0\n  });\n  onRawTelemetryEventCollected = function (event) {\n    events.push(event);\n  };\n  return events;\n}\nexport function resetTelemetry() {\n  onRawTelemetryEventCollected = undefined;\n}\n/**\n * Avoid mixing telemetry events from different data centers\n * but keep replicating staging events for reliability\n */\nexport function isTelemetryReplicationAllowed(configuration) {\n  return configuration.site === INTAKE_SITE_STAGING;\n}\nexport function addTelemetryDebug(message, context) {\n  displayIfDebugEnabled(ConsoleApiName.debug, message, context);\n  addTelemetry(assign({\n    type: TelemetryType.log,\n    message: message,\n    status: \"debug\" /* StatusType.debug */\n  }, context));\n}\nexport function addTelemetryError(e, context) {\n  addTelemetry(assign({\n    type: TelemetryType.log,\n    status: \"error\" /* StatusType.error */\n  }, formatError(e), context));\n}\nexport function addTelemetryConfiguration(configuration) {\n  addTelemetry({\n    type: TelemetryType.configuration,\n    configuration: configuration\n  });\n}\nexport function addTelemetryUsage(usage) {\n  addTelemetry({\n    type: TelemetryType.usage,\n    usage: usage\n  });\n}\nfunction addTelemetry(event) {\n  if (onRawTelemetryEventCollected && telemetryConfiguration.sentEventCount < telemetryConfiguration.maxEventsPerPage) {\n    telemetryConfiguration.sentEventCount += 1;\n    onRawTelemetryEventCollected(event);\n  }\n}\nexport function formatError(e) {\n  if (e instanceof Error) {\n    var stackTrace = computeStackTrace(e);\n    return {\n      error: {\n        kind: stackTrace.name,\n        stack: toStackTraceString(scrubCustomerFrames(stackTrace))\n      },\n      message: stackTrace.message\n    };\n  }\n  return {\n    error: {\n      stack: NO_ERROR_STACK_PRESENT_MESSAGE\n    },\n    message: \"\".concat(\"Uncaught\" /* NonErrorPrefix.UNCAUGHT */, \" \").concat(jsonStringify(e))\n  };\n}\nexport function scrubCustomerFrames(stackTrace) {\n  stackTrace.stack = stackTrace.stack.filter(function (frame) {\n    return !frame.url || ALLOWED_FRAME_URLS.some(function (allowedFrameUrl) {\n      return startsWith(frame.url, allowedFrameUrl);\n    });\n  });\n  return stackTrace;\n}","map":{"version":3,"names":["ConsoleApiName","NO_ERROR_STACK_PRESENT_MESSAGE","toStackTraceString","getExperimentalFeatures","INTAKE_SITE_STAGING","INTAKE_SITE_US1_FED","Observable","timeStampNow","displayIfDebugEnabled","startMonitorErrorCollection","sendToExtension","startsWith","arrayFrom","includes","assign","performDraw","jsonStringify","combine","computeStackTrace","getConnectivity","TelemetryType","ALLOWED_FRAME_URLS","TELEMETRY_EXCLUDED_SITES","telemetryConfiguration","maxEventsPerPage","sentEventCount","onRawTelemetryEventCollected","startTelemetry","telemetryService","configuration","contextProvider","observable","telemetryEnabled","site","telemetrySampleRate","telemetryEnabledPerType","_a","log","telemetryConfigurationSampleRate","usage","telemetryUsageSampleRate","runtimeEnvInfo","getRuntimeEnvInfo","rawEvent","type","event_1","toTelemetryEvent","notify","addTelemetryError","maxTelemetryEventsPerPage","event","date","service","version","source","_dd","format_version","telemetry","runtime_env","connectivity","experimental_features","undefined","setContextProvider","provider","enabled","is_local_file","window","location","protocol","is_worker","self","startFakeTelemetry","events","Infinity","push","resetTelemetry","isTelemetryReplicationAllowed","addTelemetryDebug","message","context","debug","addTelemetry","status","e","formatError","addTelemetryConfiguration","addTelemetryUsage","Error","stackTrace","error","kind","name","stack","scrubCustomerFrames","concat","filter","frame","url","some","allowedFrameUrl"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\telemetry\\telemetry.ts"],"sourcesContent":["import type { Context } from '../../tools/serialisation/context'\nimport { ConsoleApiName } from '../../tools/display'\nimport { NO_ERROR_STACK_PRESENT_MESSAGE } from '../error/error'\nimport { toStackTraceString } from '../../tools/stackTrace/handlingStack'\nimport { getExperimentalFeatures } from '../../tools/experimentalFeatures'\nimport type { Configuration } from '../configuration'\nimport { INTAKE_SITE_STAGING, INTAKE_SITE_US1_FED } from '../configuration'\nimport { Observable } from '../../tools/observable'\nimport { timeStampNow } from '../../tools/utils/timeUtils'\nimport { displayIfDebugEnabled, startMonitorErrorCollection } from '../../tools/monitor'\nimport { sendToExtension } from '../../tools/sendToExtension'\nimport { startsWith, arrayFrom, includes, assign } from '../../tools/utils/polyfills'\nimport { performDraw } from '../../tools/utils/numberUtils'\nimport { jsonStringify } from '../../tools/serialisation/jsonStringify'\nimport { combine } from '../../tools/mergeInto'\nimport { NonErrorPrefix } from '../error/error.types'\nimport type { StackTrace } from '../../tools/stackTrace/computeStackTrace'\nimport { computeStackTrace } from '../../tools/stackTrace/computeStackTrace'\nimport { getConnectivity } from '../connectivity'\nimport type { TelemetryEvent } from './telemetryEvent.types'\nimport type {\n  RawTelemetryConfiguration,\n  RawTelemetryEvent,\n  RuntimeEnvInfo,\n  RawTelemetryUsage,\n} from './rawTelemetryEvent.types'\nimport { StatusType, TelemetryType } from './rawTelemetryEvent.types'\n\n// replaced at build time\ndeclare const __BUILD_ENV__SDK_VERSION__: string\n\nconst ALLOWED_FRAME_URLS = [\n  'https://www.datadoghq-browser-agent.com',\n  'https://www.datad0g-browser-agent.com',\n  'https://d3uc069fcn7uxw.cloudfront.net',\n  'https://d20xtzwzcl0ceb.cloudfront.net',\n  'http://localhost',\n  '<anonymous>',\n]\n\nexport const enum TelemetryService {\n  LOGS = 'browser-logs-sdk',\n  RUM = 'browser-rum-sdk',\n}\n\nexport interface Telemetry {\n  setContextProvider: (provider: () => Context) => void\n  observable: Observable<TelemetryEvent & Context>\n  enabled: boolean\n}\n\nconst TELEMETRY_EXCLUDED_SITES: string[] = [INTAKE_SITE_US1_FED]\n\nconst telemetryConfiguration: {\n  maxEventsPerPage: number\n  sentEventCount: number\n} = {\n  maxEventsPerPage: 0,\n  sentEventCount: 0,\n}\n\nlet onRawTelemetryEventCollected: ((event: RawTelemetryEvent) => void) | undefined\n\nexport function startTelemetry(telemetryService: TelemetryService, configuration: Configuration): Telemetry {\n  let contextProvider: () => Context\n  const observable = new Observable<TelemetryEvent & Context>()\n\n  const telemetryEnabled =\n    !includes(TELEMETRY_EXCLUDED_SITES, configuration.site) && performDraw(configuration.telemetrySampleRate)\n\n  const telemetryEnabledPerType = {\n    [TelemetryType.log]: telemetryEnabled,\n    [TelemetryType.configuration]: telemetryEnabled && performDraw(configuration.telemetryConfigurationSampleRate),\n    [TelemetryType.usage]: telemetryEnabled && performDraw(configuration.telemetryUsageSampleRate),\n  }\n\n  const runtimeEnvInfo = getRuntimeEnvInfo()\n  onRawTelemetryEventCollected = (rawEvent: RawTelemetryEvent) => {\n    if (telemetryEnabledPerType[rawEvent.type!]) {\n      const event = toTelemetryEvent(telemetryService, rawEvent, runtimeEnvInfo)\n      observable.notify(event)\n      sendToExtension('telemetry', event)\n    }\n  }\n  startMonitorErrorCollection(addTelemetryError)\n\n  assign(telemetryConfiguration, {\n    maxEventsPerPage: configuration.maxTelemetryEventsPerPage,\n    sentEventCount: 0,\n  })\n\n  function toTelemetryEvent(\n    telemetryService: TelemetryService,\n    event: RawTelemetryEvent,\n    runtimeEnvInfo: RuntimeEnvInfo\n  ): TelemetryEvent & Context {\n    return combine(\n      {\n        type: 'telemetry' as const,\n        date: timeStampNow(),\n        service: telemetryService,\n        version: __BUILD_ENV__SDK_VERSION__,\n        source: 'browser' as const,\n        _dd: {\n          format_version: 2 as const,\n        },\n        telemetry: combine(event, {\n          runtime_env: runtimeEnvInfo,\n          connectivity: getConnectivity(),\n        }),\n        experimental_features: arrayFrom(getExperimentalFeatures()),\n      },\n      contextProvider !== undefined ? contextProvider() : {}\n    ) as TelemetryEvent & Context\n  }\n\n  return {\n    setContextProvider: (provider: () => Context) => {\n      contextProvider = provider\n    },\n    observable,\n    enabled: telemetryEnabled,\n  }\n}\nfunction getRuntimeEnvInfo(): RuntimeEnvInfo {\n  return {\n    is_local_file: window.location.protocol === 'file:',\n    is_worker: 'WorkerGlobalScope' in self,\n  }\n}\n\nexport function startFakeTelemetry() {\n  const events: RawTelemetryEvent[] = []\n  assign(telemetryConfiguration, {\n    maxEventsPerPage: Infinity,\n    sentEventCount: 0,\n  })\n\n  onRawTelemetryEventCollected = (event: RawTelemetryEvent) => {\n    events.push(event)\n  }\n\n  return events\n}\n\nexport function resetTelemetry() {\n  onRawTelemetryEventCollected = undefined\n}\n\n/**\n * Avoid mixing telemetry events from different data centers\n * but keep replicating staging events for reliability\n */\nexport function isTelemetryReplicationAllowed(configuration: Configuration) {\n  return configuration.site === INTAKE_SITE_STAGING\n}\n\nexport function addTelemetryDebug(message: string, context?: Context) {\n  displayIfDebugEnabled(ConsoleApiName.debug, message, context)\n  addTelemetry(\n    assign(\n      {\n        type: TelemetryType.log,\n        message,\n        status: StatusType.debug,\n      },\n      context\n    )\n  )\n}\n\nexport function addTelemetryError(e: unknown, context?: Context) {\n  addTelemetry(\n    assign(\n      {\n        type: TelemetryType.log,\n        status: StatusType.error,\n      },\n      formatError(e),\n      context\n    )\n  )\n}\n\nexport function addTelemetryConfiguration(configuration: RawTelemetryConfiguration) {\n  addTelemetry({\n    type: TelemetryType.configuration,\n    configuration,\n  })\n}\n\nexport function addTelemetryUsage(usage: RawTelemetryUsage) {\n  addTelemetry({\n    type: TelemetryType.usage,\n    usage,\n  })\n}\n\nfunction addTelemetry(event: RawTelemetryEvent) {\n  if (onRawTelemetryEventCollected && telemetryConfiguration.sentEventCount < telemetryConfiguration.maxEventsPerPage) {\n    telemetryConfiguration.sentEventCount += 1\n    onRawTelemetryEventCollected(event)\n  }\n}\n\nexport function formatError(e: unknown) {\n  if (e instanceof Error) {\n    const stackTrace = computeStackTrace(e)\n    return {\n      error: {\n        kind: stackTrace.name,\n        stack: toStackTraceString(scrubCustomerFrames(stackTrace)),\n      },\n      message: stackTrace.message!,\n    }\n  }\n  return {\n    error: {\n      stack: NO_ERROR_STACK_PRESENT_MESSAGE,\n    },\n    message: `${NonErrorPrefix.UNCAUGHT} ${jsonStringify(e)!}`,\n  }\n}\n\nexport function scrubCustomerFrames(stackTrace: StackTrace) {\n  stackTrace.stack = stackTrace.stack.filter(\n    (frame) => !frame.url || ALLOWED_FRAME_URLS.some((allowedFrameUrl) => startsWith(frame.url!, allowedFrameUrl))\n  )\n  return stackTrace\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}