{"ast":null,"code":"import { sendToExtension, createPageExitObservable, addTelemetryConfiguration, startTelemetry, canUseEventBridge, getEventBridge, addTelemetryDebug } from '@datadog/browser-core';\nimport { createDOMMutationObservable } from '../browser/domMutationObservable';\nimport { startPerformanceCollection } from '../browser/performanceCollection';\nimport { startRumAssembly } from '../domain/assembly';\nimport { startInternalContext } from '../domain/contexts/internalContext';\nimport { LifeCycle } from '../domain/lifeCycle';\nimport { startViewContexts } from '../domain/contexts/viewContexts';\nimport { startRequestCollection } from '../domain/requestCollection';\nimport { startActionCollection } from '../domain/action/actionCollection';\nimport { startErrorCollection } from '../domain/error/errorCollection';\nimport { startLongTaskCollection } from '../domain/longTask/longTaskCollection';\nimport { startResourceCollection } from '../domain/resource/resourceCollection';\nimport { startViewCollection } from '../domain/view/viewCollection';\nimport { startRumSessionManager, startRumSessionManagerStub } from '../domain/rumSessionManager';\nimport { startRumBatch } from '../transport/startRumBatch';\nimport { startRumEventBridge } from '../transport/startRumEventBridge';\nimport { startUrlContexts } from '../domain/contexts/urlContexts';\nimport { createLocationChangeObservable } from '../browser/locationChangeObservable';\nimport { serializeRumConfiguration } from '../domain/configuration';\nimport { startFeatureFlagContexts } from '../domain/contexts/featureFlagContext';\nimport { startCustomerDataTelemetry } from '../domain/startCustomerDataTelemetry';\nimport { startPageStateHistory } from '../domain/contexts/pageStateHistory';\nimport { startDisplayContext } from '../domain/contexts/displayContext';\nimport { startVitalCollection } from '../domain/vital/vitalCollection';\nimport { startCiVisibilityContext } from '../domain/contexts/ciVisibilityContext';\nexport function startRum(initConfiguration, configuration, recorderApi, customerDataTrackerManager, getCommonContext, initialViewOptions, createEncoder,\n// `startRum` and its subcomponents assume tracking consent is granted initially and starts\n// collecting logs unconditionally. As such, `startRum` should be called with a\n// `trackingConsentState` set to \"granted\".\ntrackingConsentState) {\n  var cleanupTasks = [];\n  var lifeCycle = new LifeCycle();\n  lifeCycle.subscribe(13 /* LifeCycleEventType.RUM_EVENT_COLLECTED */, function (event) {\n    return sendToExtension('rum', event);\n  });\n  var telemetry = startRumTelemetry(configuration);\n  telemetry.setContextProvider(function () {\n    var _a, _b;\n    return {\n      application: {\n        id: configuration.applicationId\n      },\n      session: {\n        id: (_a = session.findTrackedSession()) === null || _a === void 0 ? void 0 : _a.id\n      },\n      view: {\n        id: (_b = viewContexts.findView()) === null || _b === void 0 ? void 0 : _b.id\n      },\n      action: {\n        id: actionContexts.findActionId()\n      }\n    };\n  });\n  var reportError = function (error) {\n    lifeCycle.notify(14 /* LifeCycleEventType.RAW_ERROR_COLLECTED */, {\n      error: error\n    });\n    addTelemetryDebug('Error reported to customer', {\n      'error.message': error.message\n    });\n  };\n  var featureFlagContexts = startFeatureFlagContexts(lifeCycle, customerDataTrackerManager.getOrCreateTracker(0 /* CustomerDataType.FeatureFlag */));\n  var pageExitObservable = createPageExitObservable(configuration);\n  var pageExitSubscription = pageExitObservable.subscribe(function (event) {\n    lifeCycle.notify(11 /* LifeCycleEventType.PAGE_EXITED */, event);\n  });\n  cleanupTasks.push(function () {\n    return pageExitSubscription.unsubscribe();\n  });\n  var session = !canUseEventBridge() ? startRumSessionManager(configuration, lifeCycle, trackingConsentState) : startRumSessionManagerStub();\n  if (!canUseEventBridge()) {\n    var batch_1 = startRumBatch(configuration, lifeCycle, telemetry.observable, reportError, pageExitObservable, session.expireObservable, createEncoder);\n    cleanupTasks.push(function () {\n      return batch_1.stop();\n    });\n    startCustomerDataTelemetry(configuration, telemetry, lifeCycle, customerDataTrackerManager, batch_1.flushObservable);\n  } else {\n    startRumEventBridge(lifeCycle);\n  }\n  var domMutationObservable = createDOMMutationObservable();\n  var locationChangeObservable = createLocationChangeObservable(configuration, location);\n  var _a = startRumEventCollection(lifeCycle, configuration, location, session, locationChangeObservable, domMutationObservable, getCommonContext, reportError),\n    viewContexts = _a.viewContexts,\n    pageStateHistory = _a.pageStateHistory,\n    urlContexts = _a.urlContexts,\n    actionContexts = _a.actionContexts,\n    addAction = _a.addAction,\n    stopRumEventCollection = _a.stop;\n  cleanupTasks.push(stopRumEventCollection);\n  addTelemetryConfiguration(serializeRumConfiguration(initConfiguration));\n  startLongTaskCollection(lifeCycle, configuration, session);\n  startResourceCollection(lifeCycle, configuration, session, pageStateHistory);\n  var _b = startViewCollection(lifeCycle, configuration, location, domMutationObservable, locationChangeObservable, featureFlagContexts, pageStateHistory, recorderApi, initialViewOptions),\n    addTiming = _b.addTiming,\n    startView = _b.startView,\n    stopViewCollection = _b.stop;\n  cleanupTasks.push(stopViewCollection);\n  var addError = startErrorCollection(lifeCycle, configuration, pageStateHistory, featureFlagContexts).addError;\n  startRequestCollection(lifeCycle, configuration, session);\n  var stopPerformanceCollection = startPerformanceCollection(lifeCycle, configuration).stop;\n  cleanupTasks.push(stopPerformanceCollection);\n  var vitalCollection = startVitalCollection(lifeCycle, pageStateHistory);\n  var internalContext = startInternalContext(configuration.applicationId, session, viewContexts, actionContexts, urlContexts);\n  return {\n    addAction: addAction,\n    addError: addError,\n    addTiming: addTiming,\n    addFeatureFlagEvaluation: featureFlagContexts.addFeatureFlagEvaluation,\n    startView: startView,\n    lifeCycle: lifeCycle,\n    viewContexts: viewContexts,\n    session: session,\n    stopSession: function () {\n      return session.expire();\n    },\n    getInternalContext: internalContext.get,\n    startDurationVital: vitalCollection.startDurationVital,\n    stopDurationVital: vitalCollection.stopDurationVital,\n    stop: function () {\n      cleanupTasks.forEach(function (task) {\n        return task();\n      });\n    }\n  };\n}\nfunction startRumTelemetry(configuration) {\n  var telemetry = startTelemetry(\"browser-rum-sdk\" /* TelemetryService.RUM */, configuration);\n  if (canUseEventBridge()) {\n    var bridge_1 = getEventBridge();\n    telemetry.observable.subscribe(function (event) {\n      return bridge_1.send('internal_telemetry', event);\n    });\n  }\n  return telemetry;\n}\nexport function startRumEventCollection(lifeCycle, configuration, location, sessionManager, locationChangeObservable, domMutationObservable, getCommonContext, reportError) {\n  var viewContexts = startViewContexts(lifeCycle);\n  var urlContexts = startUrlContexts(lifeCycle, locationChangeObservable, location);\n  var pageStateHistory = startPageStateHistory(configuration);\n  var _a = startActionCollection(lifeCycle, domMutationObservable, configuration, pageStateHistory),\n    addAction = _a.addAction,\n    actionContexts = _a.actionContexts;\n  var displayContext = startDisplayContext(configuration);\n  var ciVisibilityContext = startCiVisibilityContext(configuration);\n  startRumAssembly(configuration, lifeCycle, sessionManager, viewContexts, urlContexts, actionContexts, displayContext, ciVisibilityContext, getCommonContext, reportError);\n  return {\n    viewContexts: viewContexts,\n    pageStateHistory: pageStateHistory,\n    urlContexts: urlContexts,\n    addAction: addAction,\n    actionContexts: actionContexts,\n    stop: function () {\n      ciVisibilityContext.stop();\n      displayContext.stop();\n      pageStateHistory.stop();\n      urlContexts.stop();\n      viewContexts.stop();\n      pageStateHistory.stop();\n    }\n  };\n}","map":{"version":3,"names":["sendToExtension","createPageExitObservable","addTelemetryConfiguration","startTelemetry","canUseEventBridge","getEventBridge","addTelemetryDebug","createDOMMutationObservable","startPerformanceCollection","startRumAssembly","startInternalContext","LifeCycle","startViewContexts","startRequestCollection","startActionCollection","startErrorCollection","startLongTaskCollection","startResourceCollection","startViewCollection","startRumSessionManager","startRumSessionManagerStub","startRumBatch","startRumEventBridge","startUrlContexts","createLocationChangeObservable","serializeRumConfiguration","startFeatureFlagContexts","startCustomerDataTelemetry","startPageStateHistory","startDisplayContext","startVitalCollection","startCiVisibilityContext","startRum","initConfiguration","configuration","recorderApi","customerDataTrackerManager","getCommonContext","initialViewOptions","createEncoder","trackingConsentState","cleanupTasks","lifeCycle","subscribe","event","telemetry","startRumTelemetry","setContextProvider","application","id","applicationId","session","_a","findTrackedSession","view","_b","viewContexts","findView","action","actionContexts","findActionId","reportError","error","notify","message","featureFlagContexts","getOrCreateTracker","pageExitObservable","pageExitSubscription","push","unsubscribe","batch_1","observable","expireObservable","stop","flushObservable","domMutationObservable","locationChangeObservable","location","startRumEventCollection","pageStateHistory","urlContexts","addAction","stopRumEventCollection","addTiming","startView","stopViewCollection","addError","stopPerformanceCollection","vitalCollection","internalContext","addFeatureFlagEvaluation","stopSession","expire","getInternalContext","get","startDurationVital","stopDurationVital","forEach","task","bridge_1","send","sessionManager","displayContext","ciVisibilityContext"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\boot\\startRum.ts"],"sourcesContent":["import type {\n  Observable,\n  TelemetryEvent,\n  RawError,\n  DeflateEncoderStreamId,\n  Encoder,\n  CustomerDataTrackerManager,\n  TrackingConsentState,\n} from '@datadog/browser-core'\nimport {\n  sendToExtension,\n  createPageExitObservable,\n  TelemetryService,\n  addTelemetryConfiguration,\n  startTelemetry,\n  canUseEventBridge,\n  getEventBridge,\n  addTelemetryDebug,\n  CustomerDataType,\n} from '@datadog/browser-core'\nimport { createDOMMutationObservable } from '../browser/domMutationObservable'\nimport { startPerformanceCollection } from '../browser/performanceCollection'\nimport { startRumAssembly } from '../domain/assembly'\nimport { startInternalContext } from '../domain/contexts/internalContext'\nimport { LifeCycle, LifeCycleEventType } from '../domain/lifeCycle'\nimport { startViewContexts } from '../domain/contexts/viewContexts'\nimport { startRequestCollection } from '../domain/requestCollection'\nimport { startActionCollection } from '../domain/action/actionCollection'\nimport { startErrorCollection } from '../domain/error/errorCollection'\nimport { startLongTaskCollection } from '../domain/longTask/longTaskCollection'\nimport { startResourceCollection } from '../domain/resource/resourceCollection'\nimport { startViewCollection } from '../domain/view/viewCollection'\nimport type { RumSessionManager } from '../domain/rumSessionManager'\nimport { startRumSessionManager, startRumSessionManagerStub } from '../domain/rumSessionManager'\nimport { startRumBatch } from '../transport/startRumBatch'\nimport { startRumEventBridge } from '../transport/startRumEventBridge'\nimport { startUrlContexts } from '../domain/contexts/urlContexts'\nimport type { LocationChange } from '../browser/locationChangeObservable'\nimport { createLocationChangeObservable } from '../browser/locationChangeObservable'\nimport type { RumConfiguration, RumInitConfiguration } from '../domain/configuration'\nimport { serializeRumConfiguration } from '../domain/configuration'\nimport type { ViewOptions } from '../domain/view/trackViews'\nimport { startFeatureFlagContexts } from '../domain/contexts/featureFlagContext'\nimport { startCustomerDataTelemetry } from '../domain/startCustomerDataTelemetry'\nimport { startPageStateHistory } from '../domain/contexts/pageStateHistory'\nimport type { CommonContext } from '../domain/contexts/commonContext'\nimport { startDisplayContext } from '../domain/contexts/displayContext'\nimport { startVitalCollection } from '../domain/vital/vitalCollection'\nimport { startCiVisibilityContext } from '../domain/contexts/ciVisibilityContext'\nimport type { RecorderApi } from './rumPublicApi'\n\nexport type StartRum = typeof startRum\nexport type StartRumResult = ReturnType<StartRum>\n\nexport function startRum(\n  initConfiguration: RumInitConfiguration,\n  configuration: RumConfiguration,\n  recorderApi: RecorderApi,\n  customerDataTrackerManager: CustomerDataTrackerManager,\n  getCommonContext: () => CommonContext,\n  initialViewOptions: ViewOptions | undefined,\n  createEncoder: (streamId: DeflateEncoderStreamId) => Encoder,\n\n  // `startRum` and its subcomponents assume tracking consent is granted initially and starts\n  // collecting logs unconditionally. As such, `startRum` should be called with a\n  // `trackingConsentState` set to \"granted\".\n  trackingConsentState: TrackingConsentState\n) {\n  const cleanupTasks: Array<() => void> = []\n  const lifeCycle = new LifeCycle()\n\n  lifeCycle.subscribe(LifeCycleEventType.RUM_EVENT_COLLECTED, (event) => sendToExtension('rum', event))\n\n  const telemetry = startRumTelemetry(configuration)\n  telemetry.setContextProvider(() => ({\n    application: {\n      id: configuration.applicationId,\n    },\n    session: {\n      id: session.findTrackedSession()?.id,\n    },\n    view: {\n      id: viewContexts.findView()?.id,\n    },\n    action: {\n      id: actionContexts.findActionId(),\n    },\n  }))\n\n  const reportError = (error: RawError) => {\n    lifeCycle.notify(LifeCycleEventType.RAW_ERROR_COLLECTED, { error })\n    addTelemetryDebug('Error reported to customer', { 'error.message': error.message })\n  }\n  const featureFlagContexts = startFeatureFlagContexts(\n    lifeCycle,\n    customerDataTrackerManager.getOrCreateTracker(CustomerDataType.FeatureFlag)\n  )\n\n  const pageExitObservable = createPageExitObservable(configuration)\n  const pageExitSubscription = pageExitObservable.subscribe((event) => {\n    lifeCycle.notify(LifeCycleEventType.PAGE_EXITED, event)\n  })\n  cleanupTasks.push(() => pageExitSubscription.unsubscribe())\n\n  const session = !canUseEventBridge()\n    ? startRumSessionManager(configuration, lifeCycle, trackingConsentState)\n    : startRumSessionManagerStub()\n  if (!canUseEventBridge()) {\n    const batch = startRumBatch(\n      configuration,\n      lifeCycle,\n      telemetry.observable,\n      reportError,\n      pageExitObservable,\n      session.expireObservable,\n      createEncoder\n    )\n    cleanupTasks.push(() => batch.stop())\n    startCustomerDataTelemetry(configuration, telemetry, lifeCycle, customerDataTrackerManager, batch.flushObservable)\n  } else {\n    startRumEventBridge(lifeCycle)\n  }\n\n  const domMutationObservable = createDOMMutationObservable()\n  const locationChangeObservable = createLocationChangeObservable(configuration, location)\n\n  const {\n    viewContexts,\n    pageStateHistory,\n    urlContexts,\n    actionContexts,\n    addAction,\n    stop: stopRumEventCollection,\n  } = startRumEventCollection(\n    lifeCycle,\n    configuration,\n    location,\n    session,\n    locationChangeObservable,\n    domMutationObservable,\n    getCommonContext,\n    reportError\n  )\n  cleanupTasks.push(stopRumEventCollection)\n\n  addTelemetryConfiguration(serializeRumConfiguration(initConfiguration))\n\n  startLongTaskCollection(lifeCycle, configuration, session)\n  startResourceCollection(lifeCycle, configuration, session, pageStateHistory)\n\n  const {\n    addTiming,\n    startView,\n    stop: stopViewCollection,\n  } = startViewCollection(\n    lifeCycle,\n    configuration,\n    location,\n    domMutationObservable,\n    locationChangeObservable,\n    featureFlagContexts,\n    pageStateHistory,\n    recorderApi,\n    initialViewOptions\n  )\n  cleanupTasks.push(stopViewCollection)\n\n  const { addError } = startErrorCollection(lifeCycle, configuration, pageStateHistory, featureFlagContexts)\n\n  startRequestCollection(lifeCycle, configuration, session)\n  const { stop: stopPerformanceCollection } = startPerformanceCollection(lifeCycle, configuration)\n  cleanupTasks.push(stopPerformanceCollection)\n\n  const vitalCollection = startVitalCollection(lifeCycle, pageStateHistory)\n  const internalContext = startInternalContext(\n    configuration.applicationId,\n    session,\n    viewContexts,\n    actionContexts,\n    urlContexts\n  )\n\n  return {\n    addAction,\n    addError,\n    addTiming,\n    addFeatureFlagEvaluation: featureFlagContexts.addFeatureFlagEvaluation,\n    startView,\n    lifeCycle,\n    viewContexts,\n    session,\n    stopSession: () => session.expire(),\n    getInternalContext: internalContext.get,\n    startDurationVital: vitalCollection.startDurationVital,\n    stopDurationVital: vitalCollection.stopDurationVital,\n    stop: () => {\n      cleanupTasks.forEach((task) => task())\n    },\n  }\n}\n\nfunction startRumTelemetry(configuration: RumConfiguration) {\n  const telemetry = startTelemetry(TelemetryService.RUM, configuration)\n  if (canUseEventBridge()) {\n    const bridge = getEventBridge<'internal_telemetry', TelemetryEvent>()!\n    telemetry.observable.subscribe((event) => bridge.send('internal_telemetry', event))\n  }\n  return telemetry\n}\n\nexport function startRumEventCollection(\n  lifeCycle: LifeCycle,\n  configuration: RumConfiguration,\n  location: Location,\n  sessionManager: RumSessionManager,\n  locationChangeObservable: Observable<LocationChange>,\n  domMutationObservable: Observable<void>,\n  getCommonContext: () => CommonContext,\n  reportError: (error: RawError) => void\n) {\n  const viewContexts = startViewContexts(lifeCycle)\n  const urlContexts = startUrlContexts(lifeCycle, locationChangeObservable, location)\n\n  const pageStateHistory = startPageStateHistory(configuration)\n\n  const { addAction, actionContexts } = startActionCollection(\n    lifeCycle,\n    domMutationObservable,\n    configuration,\n    pageStateHistory\n  )\n\n  const displayContext = startDisplayContext(configuration)\n  const ciVisibilityContext = startCiVisibilityContext(configuration)\n\n  startRumAssembly(\n    configuration,\n    lifeCycle,\n    sessionManager,\n    viewContexts,\n    urlContexts,\n    actionContexts,\n    displayContext,\n    ciVisibilityContext,\n    getCommonContext,\n    reportError\n  )\n\n  return {\n    viewContexts,\n    pageStateHistory,\n    urlContexts,\n    addAction,\n    actionContexts,\n    stop: () => {\n      ciVisibilityContext.stop()\n      displayContext.stop()\n      pageStateHistory.stop()\n      urlContexts.stop()\n      viewContexts.stop()\n      pageStateHistory.stop()\n    },\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}