{"ast":null,"code":"import { noop, PageExitReason, shallowClone, elapsed, generateUUID, ONE_MINUTE, throttle, clocksNow, clocksOrigin, timeStampNow, display, looksLikeRelativeTime, setInterval, clearInterval, setTimeout, Observable } from '@datadog/browser-core';\nimport { trackViewEventCounts } from './trackViewEventCounts';\nimport { trackInitialViewMetrics } from './viewMetrics/trackInitialViewMetrics';\nimport { trackCommonViewMetrics } from './viewMetrics/trackCommonViewMetrics';\nexport var THROTTLE_VIEW_UPDATE_PERIOD = 3000;\nexport var SESSION_KEEP_ALIVE_INTERVAL = 5 * ONE_MINUTE;\n// Some events or metrics can be captured after the end of the view. To avoid missing those;\n// an arbitrary delay is added for stopping their tracking after the view ends.\n//\n// Ideally, we would not stop and keep tracking events or metrics until the end of the session.\n// But this might have a small performance impact if there are many many views.\n// So let's have a fairly short delay improving the situation in most cases and avoid impacting performances too much.\nexport var KEEP_TRACKING_AFTER_VIEW_DELAY = 5 * ONE_MINUTE;\nexport function trackViews(location, lifeCycle, domMutationObservable, configuration, locationChangeObservable, areViewsTrackedAutomatically, initialViewOptions) {\n  var activeViews = new Set();\n  var currentView = startNewView(\"initial_load\" /* ViewLoadingType.INITIAL_LOAD */, clocksOrigin(), initialViewOptions);\n  startViewLifeCycle();\n  var locationChangeSubscription;\n  if (areViewsTrackedAutomatically) {\n    locationChangeSubscription = renewViewOnLocationChange(locationChangeObservable);\n  }\n  function startNewView(loadingType, startClocks, viewOptions) {\n    var newlyCreatedView = newView(lifeCycle, domMutationObservable, configuration, location, loadingType, startClocks, viewOptions);\n    activeViews.add(newlyCreatedView);\n    newlyCreatedView.stopObservable.subscribe(function () {\n      activeViews.delete(newlyCreatedView);\n    });\n    return newlyCreatedView;\n  }\n  function startViewLifeCycle() {\n    lifeCycle.subscribe(10 /* LifeCycleEventType.SESSION_RENEWED */, function () {\n      // Renew view on session renewal\n      currentView = startNewView(\"route_change\" /* ViewLoadingType.ROUTE_CHANGE */, undefined, {\n        name: currentView.name,\n        service: currentView.service,\n        version: currentView.version\n      });\n    });\n    lifeCycle.subscribe(9 /* LifeCycleEventType.SESSION_EXPIRED */, function () {\n      currentView.end({\n        sessionIsActive: false\n      });\n    });\n    // End the current view on page unload\n    lifeCycle.subscribe(11 /* LifeCycleEventType.PAGE_EXITED */, function (pageExitEvent) {\n      if (pageExitEvent.reason === PageExitReason.UNLOADING || pageExitEvent.reason === PageExitReason.PAGEHIDE) {\n        currentView.end();\n      }\n    });\n  }\n  function renewViewOnLocationChange(locationChangeObservable) {\n    return locationChangeObservable.subscribe(function (_a) {\n      var oldLocation = _a.oldLocation,\n        newLocation = _a.newLocation;\n      if (areDifferentLocation(oldLocation, newLocation)) {\n        currentView.end();\n        currentView = startNewView(\"route_change\" /* ViewLoadingType.ROUTE_CHANGE */);\n      }\n    });\n  }\n  return {\n    addTiming: function (name, time) {\n      if (time === void 0) {\n        time = timeStampNow();\n      }\n      currentView.addTiming(name, time);\n    },\n    startView: function (options, startClocks) {\n      currentView.end({\n        endClocks: startClocks\n      });\n      currentView = startNewView(\"route_change\" /* ViewLoadingType.ROUTE_CHANGE */, startClocks, options);\n    },\n    stop: function () {\n      locationChangeSubscription === null || locationChangeSubscription === void 0 ? void 0 : locationChangeSubscription.unsubscribe();\n      currentView.end();\n      activeViews.forEach(function (view) {\n        return view.stop();\n      });\n    }\n  };\n}\nfunction newView(lifeCycle, domMutationObservable, configuration, initialLocation, loadingType, startClocks, viewOptions) {\n  if (startClocks === void 0) {\n    startClocks = clocksNow();\n  }\n  // Setup initial values\n  var id = generateUUID();\n  var stopObservable = new Observable();\n  var customTimings = {};\n  var documentVersion = 0;\n  var endClocks;\n  var location = shallowClone(initialLocation);\n  var sessionIsActive = true;\n  var name;\n  var service;\n  var version;\n  if (viewOptions) {\n    name = viewOptions.name;\n    service = viewOptions.service;\n    version = viewOptions.version;\n  }\n  var viewCreatedEvent = {\n    id: id,\n    name: name,\n    startClocks: startClocks,\n    service: service,\n    version: version\n  };\n  lifeCycle.notify(2 /* LifeCycleEventType.BEFORE_VIEW_CREATED */, viewCreatedEvent);\n  lifeCycle.notify(3 /* LifeCycleEventType.VIEW_CREATED */, viewCreatedEvent);\n  // Update the view every time the measures are changing\n  var _a = throttle(triggerViewUpdate, THROTTLE_VIEW_UPDATE_PERIOD, {\n      leading: false\n    }),\n    scheduleViewUpdate = _a.throttled,\n    cancelScheduleViewUpdate = _a.cancel;\n  var _b = trackCommonViewMetrics(lifeCycle, domMutationObservable, configuration, scheduleViewUpdate, loadingType, startClocks),\n    setLoadEvent = _b.setLoadEvent,\n    setViewEnd = _b.setViewEnd,\n    stopCommonViewMetricsTracking = _b.stop,\n    stopINPTracking = _b.stopINPTracking,\n    getCommonViewMetrics = _b.getCommonViewMetrics;\n  var _c = loadingType === \"initial_load\" /* ViewLoadingType.INITIAL_LOAD */ ? trackInitialViewMetrics(lifeCycle, configuration, setLoadEvent, scheduleViewUpdate) : {\n      stop: noop,\n      initialViewMetrics: {}\n    },\n    stopInitialViewMetricsTracking = _c.stop,\n    initialViewMetrics = _c.initialViewMetrics;\n  var _d = trackViewEventCounts(lifeCycle, id, scheduleViewUpdate),\n    stopEventCountsTracking = _d.stop,\n    eventCounts = _d.eventCounts;\n  // Session keep alive\n  var keepAliveIntervalId = setInterval(triggerViewUpdate, SESSION_KEEP_ALIVE_INTERVAL);\n  // Initial view update\n  triggerViewUpdate();\n  function triggerViewUpdate() {\n    cancelScheduleViewUpdate();\n    documentVersion += 1;\n    var currentEnd = endClocks === undefined ? timeStampNow() : endClocks.timeStamp;\n    lifeCycle.notify(4 /* LifeCycleEventType.VIEW_UPDATED */, {\n      customTimings: customTimings,\n      documentVersion: documentVersion,\n      id: id,\n      name: name,\n      service: service,\n      version: version,\n      loadingType: loadingType,\n      location: location,\n      startClocks: startClocks,\n      commonViewMetrics: getCommonViewMetrics(),\n      initialViewMetrics: initialViewMetrics,\n      duration: elapsed(startClocks.timeStamp, currentEnd),\n      isActive: endClocks === undefined,\n      sessionIsActive: sessionIsActive,\n      eventCounts: eventCounts\n    });\n  }\n  return {\n    name: name,\n    service: service,\n    version: version,\n    stopObservable: stopObservable,\n    end: function (options) {\n      var _this = this;\n      var _a, _b;\n      if (options === void 0) {\n        options = {};\n      }\n      if (endClocks) {\n        // view already ended\n        return;\n      }\n      endClocks = (_a = options.endClocks) !== null && _a !== void 0 ? _a : clocksNow();\n      sessionIsActive = (_b = options.sessionIsActive) !== null && _b !== void 0 ? _b : true;\n      lifeCycle.notify(5 /* LifeCycleEventType.VIEW_ENDED */, {\n        endClocks: endClocks\n      });\n      lifeCycle.notify(6 /* LifeCycleEventType.AFTER_VIEW_ENDED */, {\n        endClocks: endClocks\n      });\n      clearInterval(keepAliveIntervalId);\n      setViewEnd(endClocks.relative);\n      stopCommonViewMetricsTracking();\n      triggerViewUpdate();\n      setTimeout(function () {\n        _this.stop();\n      }, KEEP_TRACKING_AFTER_VIEW_DELAY);\n    },\n    stop: function () {\n      stopInitialViewMetricsTracking();\n      stopEventCountsTracking();\n      stopINPTracking();\n      stopObservable.notify();\n    },\n    addTiming: function (name, time) {\n      if (endClocks) {\n        return;\n      }\n      var relativeTime = looksLikeRelativeTime(time) ? time : elapsed(startClocks.timeStamp, time);\n      customTimings[sanitizeTiming(name)] = relativeTime;\n      scheduleViewUpdate();\n    }\n  };\n}\n/**\n * Timing name is used as facet path that must contain only letters, digits, or the characters - _ . @ $\n */\nfunction sanitizeTiming(name) {\n  var sanitized = name.replace(/[^a-zA-Z0-9-_.@$]/g, '_');\n  if (sanitized !== name) {\n    display.warn(\"Invalid timing name: \".concat(name, \", sanitized to: \").concat(sanitized));\n  }\n  return sanitized;\n}\nfunction areDifferentLocation(currentLocation, otherLocation) {\n  return currentLocation.pathname !== otherLocation.pathname || !isHashAnAnchor(otherLocation.hash) && getPathFromHash(otherLocation.hash) !== getPathFromHash(currentLocation.hash);\n}\nfunction isHashAnAnchor(hash) {\n  var correspondingId = hash.substring(1);\n  // check if the correspondingId is empty because on Firefox an empty string passed to getElementById() prints a consol warning\n  return correspondingId !== '' && !!document.getElementById(correspondingId);\n}\nfunction getPathFromHash(hash) {\n  var index = hash.indexOf('?');\n  return index < 0 ? hash : hash.slice(0, index);\n}","map":{"version":3,"names":["noop","PageExitReason","shallowClone","elapsed","generateUUID","ONE_MINUTE","throttle","clocksNow","clocksOrigin","timeStampNow","display","looksLikeRelativeTime","setInterval","clearInterval","setTimeout","Observable","trackViewEventCounts","trackInitialViewMetrics","trackCommonViewMetrics","THROTTLE_VIEW_UPDATE_PERIOD","SESSION_KEEP_ALIVE_INTERVAL","KEEP_TRACKING_AFTER_VIEW_DELAY","trackViews","location","lifeCycle","domMutationObservable","configuration","locationChangeObservable","areViewsTrackedAutomatically","initialViewOptions","activeViews","Set","currentView","startNewView","startViewLifeCycle","locationChangeSubscription","renewViewOnLocationChange","loadingType","startClocks","viewOptions","newlyCreatedView","newView","add","stopObservable","subscribe","delete","undefined","name","service","version","end","sessionIsActive","pageExitEvent","reason","UNLOADING","PAGEHIDE","_a","oldLocation","newLocation","areDifferentLocation","addTiming","time","startView","options","endClocks","stop","unsubscribe","forEach","view","initialLocation","id","customTimings","documentVersion","viewCreatedEvent","notify","triggerViewUpdate","leading","scheduleViewUpdate","throttled","cancelScheduleViewUpdate","cancel","_b","setLoadEvent","setViewEnd","stopCommonViewMetricsTracking","stopINPTracking","getCommonViewMetrics","_c","initialViewMetrics","stopInitialViewMetricsTracking","_d","stopEventCountsTracking","eventCounts","keepAliveIntervalId","currentEnd","timeStamp","commonViewMetrics","duration","isActive","_this","relative","relativeTime","sanitizeTiming","sanitized","replace","warn","concat","currentLocation","otherLocation","pathname","isHashAnAnchor","hash","getPathFromHash","correspondingId","substring","document","getElementById","index","indexOf","slice"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\view\\trackViews.ts"],"sourcesContent":["import type { Duration, ClocksState, TimeStamp, Subscription, RelativeTime } from '@datadog/browser-core'\nimport {\n  noop,\n  PageExitReason,\n  shallowClone,\n  elapsed,\n  generateUUID,\n  ONE_MINUTE,\n  throttle,\n  clocksNow,\n  clocksOrigin,\n  timeStampNow,\n  display,\n  looksLikeRelativeTime,\n  setInterval,\n  clearInterval,\n  setTimeout,\n  Observable,\n} from '@datadog/browser-core'\n\nimport type { ViewCustomTimings } from '../../rawRumEvent.types'\nimport { ViewLoadingType } from '../../rawRumEvent.types'\n\nimport type { LifeCycle } from '../lifeCycle'\nimport { LifeCycleEventType } from '../lifeCycle'\nimport type { EventCounts } from '../trackEventCounts'\nimport type { LocationChange } from '../../browser/locationChangeObservable'\nimport type { RumConfiguration } from '../configuration'\nimport { trackViewEventCounts } from './trackViewEventCounts'\nimport { trackInitialViewMetrics } from './viewMetrics/trackInitialViewMetrics'\nimport type { InitialViewMetrics } from './viewMetrics/trackInitialViewMetrics'\nimport type { CommonViewMetrics } from './viewMetrics/trackCommonViewMetrics'\nimport { trackCommonViewMetrics } from './viewMetrics/trackCommonViewMetrics'\n\nexport interface ViewEvent {\n  id: string\n  name?: string\n  service?: string\n  version?: string\n  location: Readonly<Location>\n  commonViewMetrics: CommonViewMetrics\n  initialViewMetrics: InitialViewMetrics\n  customTimings: ViewCustomTimings\n  eventCounts: EventCounts\n  documentVersion: number\n  startClocks: ClocksState\n  duration: Duration\n  isActive: boolean\n  sessionIsActive: boolean\n  loadingType: ViewLoadingType\n}\n\nexport interface ViewCreatedEvent {\n  id: string\n  name?: string\n  service?: string\n  version?: string\n  startClocks: ClocksState\n}\n\nexport interface ViewEndedEvent {\n  endClocks: ClocksState\n}\n\nexport const THROTTLE_VIEW_UPDATE_PERIOD = 3000\nexport const SESSION_KEEP_ALIVE_INTERVAL = 5 * ONE_MINUTE\n\n// Some events or metrics can be captured after the end of the view. To avoid missing those;\n// an arbitrary delay is added for stopping their tracking after the view ends.\n//\n// Ideally, we would not stop and keep tracking events or metrics until the end of the session.\n// But this might have a small performance impact if there are many many views.\n// So let's have a fairly short delay improving the situation in most cases and avoid impacting performances too much.\nexport const KEEP_TRACKING_AFTER_VIEW_DELAY = 5 * ONE_MINUTE\n\nexport interface ViewOptions {\n  name?: string\n  service?: string\n  version?: string\n}\n\nexport function trackViews(\n  location: Location,\n  lifeCycle: LifeCycle,\n  domMutationObservable: Observable<void>,\n  configuration: RumConfiguration,\n  locationChangeObservable: Observable<LocationChange>,\n  areViewsTrackedAutomatically: boolean,\n  initialViewOptions?: ViewOptions\n) {\n  const activeViews: Set<ReturnType<typeof newView>> = new Set()\n  let currentView = startNewView(ViewLoadingType.INITIAL_LOAD, clocksOrigin(), initialViewOptions)\n\n  startViewLifeCycle()\n\n  let locationChangeSubscription: Subscription\n  if (areViewsTrackedAutomatically) {\n    locationChangeSubscription = renewViewOnLocationChange(locationChangeObservable)\n  }\n\n  function startNewView(loadingType: ViewLoadingType, startClocks?: ClocksState, viewOptions?: ViewOptions) {\n    const newlyCreatedView = newView(\n      lifeCycle,\n      domMutationObservable,\n      configuration,\n      location,\n      loadingType,\n      startClocks,\n      viewOptions\n    )\n    activeViews.add(newlyCreatedView)\n    newlyCreatedView.stopObservable.subscribe(() => {\n      activeViews.delete(newlyCreatedView)\n    })\n    return newlyCreatedView\n  }\n\n  function startViewLifeCycle() {\n    lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, () => {\n      // Renew view on session renewal\n      currentView = startNewView(ViewLoadingType.ROUTE_CHANGE, undefined, {\n        name: currentView.name,\n        service: currentView.service,\n        version: currentView.version,\n      })\n    })\n\n    lifeCycle.subscribe(LifeCycleEventType.SESSION_EXPIRED, () => {\n      currentView.end({ sessionIsActive: false })\n    })\n\n    // End the current view on page unload\n    lifeCycle.subscribe(LifeCycleEventType.PAGE_EXITED, (pageExitEvent) => {\n      if (pageExitEvent.reason === PageExitReason.UNLOADING || pageExitEvent.reason === PageExitReason.PAGEHIDE) {\n        currentView.end()\n      }\n    })\n  }\n\n  function renewViewOnLocationChange(locationChangeObservable: Observable<LocationChange>) {\n    return locationChangeObservable.subscribe(({ oldLocation, newLocation }) => {\n      if (areDifferentLocation(oldLocation, newLocation)) {\n        currentView.end()\n        currentView = startNewView(ViewLoadingType.ROUTE_CHANGE)\n      }\n    })\n  }\n\n  return {\n    addTiming: (name: string, time: RelativeTime | TimeStamp = timeStampNow()) => {\n      currentView.addTiming(name, time)\n    },\n    startView: (options?: ViewOptions, startClocks?: ClocksState) => {\n      currentView.end({ endClocks: startClocks })\n      currentView = startNewView(ViewLoadingType.ROUTE_CHANGE, startClocks, options)\n    },\n    stop: () => {\n      locationChangeSubscription?.unsubscribe()\n      currentView.end()\n      activeViews.forEach((view) => view.stop())\n    },\n  }\n}\n\nfunction newView(\n  lifeCycle: LifeCycle,\n  domMutationObservable: Observable<void>,\n  configuration: RumConfiguration,\n  initialLocation: Location,\n  loadingType: ViewLoadingType,\n  startClocks: ClocksState = clocksNow(),\n  viewOptions?: ViewOptions\n) {\n  // Setup initial values\n  const id = generateUUID()\n  const stopObservable = new Observable<void>()\n  const customTimings: ViewCustomTimings = {}\n  let documentVersion = 0\n  let endClocks: ClocksState | undefined\n  const location = shallowClone(initialLocation)\n\n  let sessionIsActive = true\n  let name: string | undefined\n  let service: string | undefined\n  let version: string | undefined\n  if (viewOptions) {\n    name = viewOptions.name\n    service = viewOptions.service\n    version = viewOptions.version\n  }\n\n  const viewCreatedEvent = {\n    id,\n    name,\n    startClocks,\n    service,\n    version,\n  }\n  lifeCycle.notify(LifeCycleEventType.BEFORE_VIEW_CREATED, viewCreatedEvent)\n  lifeCycle.notify(LifeCycleEventType.VIEW_CREATED, viewCreatedEvent)\n\n  // Update the view every time the measures are changing\n  const { throttled: scheduleViewUpdate, cancel: cancelScheduleViewUpdate } = throttle(\n    triggerViewUpdate,\n    THROTTLE_VIEW_UPDATE_PERIOD,\n    {\n      leading: false,\n    }\n  )\n\n  const {\n    setLoadEvent,\n    setViewEnd,\n    stop: stopCommonViewMetricsTracking,\n    stopINPTracking,\n    getCommonViewMetrics,\n  } = trackCommonViewMetrics(\n    lifeCycle,\n    domMutationObservable,\n    configuration,\n    scheduleViewUpdate,\n    loadingType,\n    startClocks\n  )\n\n  const { stop: stopInitialViewMetricsTracking, initialViewMetrics } =\n    loadingType === ViewLoadingType.INITIAL_LOAD\n      ? trackInitialViewMetrics(lifeCycle, configuration, setLoadEvent, scheduleViewUpdate)\n      : { stop: noop, initialViewMetrics: {} as InitialViewMetrics }\n\n  const { stop: stopEventCountsTracking, eventCounts } = trackViewEventCounts(lifeCycle, id, scheduleViewUpdate)\n\n  // Session keep alive\n  const keepAliveIntervalId = setInterval(triggerViewUpdate, SESSION_KEEP_ALIVE_INTERVAL)\n\n  // Initial view update\n  triggerViewUpdate()\n\n  function triggerViewUpdate() {\n    cancelScheduleViewUpdate()\n    documentVersion += 1\n    const currentEnd = endClocks === undefined ? timeStampNow() : endClocks.timeStamp\n\n    lifeCycle.notify(LifeCycleEventType.VIEW_UPDATED, {\n      customTimings,\n      documentVersion,\n      id,\n      name,\n      service,\n      version,\n      loadingType,\n      location,\n      startClocks,\n      commonViewMetrics: getCommonViewMetrics(),\n      initialViewMetrics,\n      duration: elapsed(startClocks.timeStamp, currentEnd),\n      isActive: endClocks === undefined,\n      sessionIsActive,\n      eventCounts,\n    })\n  }\n\n  return {\n    name,\n    service,\n    version,\n    stopObservable,\n    end(options: { endClocks?: ClocksState; sessionIsActive?: boolean } = {}) {\n      if (endClocks) {\n        // view already ended\n        return\n      }\n      endClocks = options.endClocks ?? clocksNow()\n      sessionIsActive = options.sessionIsActive ?? true\n\n      lifeCycle.notify(LifeCycleEventType.VIEW_ENDED, { endClocks })\n      lifeCycle.notify(LifeCycleEventType.AFTER_VIEW_ENDED, { endClocks })\n      clearInterval(keepAliveIntervalId)\n      setViewEnd(endClocks.relative)\n      stopCommonViewMetricsTracking()\n      triggerViewUpdate()\n      setTimeout(() => {\n        this.stop()\n      }, KEEP_TRACKING_AFTER_VIEW_DELAY)\n    },\n    stop() {\n      stopInitialViewMetricsTracking()\n      stopEventCountsTracking()\n      stopINPTracking()\n      stopObservable.notify()\n    },\n    addTiming(name: string, time: RelativeTime | TimeStamp) {\n      if (endClocks) {\n        return\n      }\n      const relativeTime = looksLikeRelativeTime(time) ? time : elapsed(startClocks.timeStamp, time)\n      customTimings[sanitizeTiming(name)] = relativeTime\n      scheduleViewUpdate()\n    },\n  }\n}\n\n/**\n * Timing name is used as facet path that must contain only letters, digits, or the characters - _ . @ $\n */\nfunction sanitizeTiming(name: string) {\n  const sanitized = name.replace(/[^a-zA-Z0-9-_.@$]/g, '_')\n  if (sanitized !== name) {\n    display.warn(`Invalid timing name: ${name}, sanitized to: ${sanitized}`)\n  }\n  return sanitized\n}\n\nfunction areDifferentLocation(currentLocation: Location, otherLocation: Location) {\n  return (\n    currentLocation.pathname !== otherLocation.pathname ||\n    (!isHashAnAnchor(otherLocation.hash) &&\n      getPathFromHash(otherLocation.hash) !== getPathFromHash(currentLocation.hash))\n  )\n}\n\nfunction isHashAnAnchor(hash: string) {\n  const correspondingId = hash.substring(1)\n  // check if the correspondingId is empty because on Firefox an empty string passed to getElementById() prints a consol warning\n  return correspondingId !== '' && !!document.getElementById(correspondingId)\n}\n\nfunction getPathFromHash(hash: string) {\n  const index = hash.indexOf('?')\n  return index < 0 ? hash : hash.slice(0, index)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}