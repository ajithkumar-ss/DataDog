{"ast":null,"code":"import { sanitize } from '../../tools/serialisation/sanitize';\nimport { jsonStringify } from '../../tools/serialisation/jsonStringify';\nimport { computeStackTrace } from '../../tools/stackTrace/computeStackTrace';\nimport { toStackTraceString } from '../../tools/stackTrace/handlingStack';\nexport var NO_ERROR_STACK_PRESENT_MESSAGE = 'No stack, consider using an instance of Error';\nexport function computeRawError(_a) {\n  var stackTrace = _a.stackTrace,\n    originalError = _a.originalError,\n    handlingStack = _a.handlingStack,\n    startClocks = _a.startClocks,\n    nonErrorPrefix = _a.nonErrorPrefix,\n    source = _a.source,\n    handling = _a.handling;\n  var isErrorInstance = originalError instanceof Error;\n  var message = computeMessage(stackTrace, isErrorInstance, nonErrorPrefix, originalError);\n  var stack = hasUsableStack(isErrorInstance, stackTrace) ? toStackTraceString(stackTrace) : NO_ERROR_STACK_PRESENT_MESSAGE;\n  var causes = isErrorInstance ? flattenErrorCauses(originalError, source) : undefined;\n  var type = stackTrace === null || stackTrace === void 0 ? void 0 : stackTrace.name;\n  var fingerprint = tryToGetFingerprint(originalError);\n  return {\n    startClocks: startClocks,\n    source: source,\n    handling: handling,\n    handlingStack: handlingStack,\n    originalError: originalError,\n    type: type,\n    message: message,\n    stack: stack,\n    causes: causes,\n    fingerprint: fingerprint\n  };\n}\nfunction computeMessage(stackTrace, isErrorInstance, nonErrorPrefix, originalError) {\n  // Favor stackTrace message only if tracekit has really been able to extract something meaningful (message + name)\n  // TODO rework tracekit integration to avoid scattering error building logic\n  return (stackTrace === null || stackTrace === void 0 ? void 0 : stackTrace.message) && (stackTrace === null || stackTrace === void 0 ? void 0 : stackTrace.name) ? stackTrace.message : !isErrorInstance ? \"\".concat(nonErrorPrefix, \" \").concat(jsonStringify(sanitize(originalError))) : 'Empty message';\n}\nfunction hasUsableStack(isErrorInstance, stackTrace) {\n  if (stackTrace === undefined) {\n    return false;\n  }\n  if (isErrorInstance) {\n    return true;\n  }\n  // handle cases where tracekit return stack = [] or stack = [{url: undefined, line: undefined, column: undefined}]\n  // TODO rework tracekit integration to avoid generating those unusable stack\n  return stackTrace.stack.length > 0 && (stackTrace.stack.length > 1 || stackTrace.stack[0].url !== undefined);\n}\nexport function tryToGetFingerprint(originalError) {\n  return originalError instanceof Error && 'dd_fingerprint' in originalError ? String(originalError.dd_fingerprint) : undefined;\n}\nexport function getFileFromStackTraceString(stack) {\n  var _a;\n  return (_a = /@ (.+)/.exec(stack)) === null || _a === void 0 ? void 0 : _a[1];\n}\nexport function flattenErrorCauses(error, parentSource) {\n  var currentError = error;\n  var causes = [];\n  while ((currentError === null || currentError === void 0 ? void 0 : currentError.cause) instanceof Error && causes.length < 10) {\n    var stackTrace = computeStackTrace(currentError.cause);\n    causes.push({\n      message: currentError.cause.message,\n      source: parentSource,\n      type: stackTrace === null || stackTrace === void 0 ? void 0 : stackTrace.name,\n      stack: stackTrace && toStackTraceString(stackTrace)\n    });\n    currentError = currentError.cause;\n  }\n  return causes.length ? causes : undefined;\n}","map":{"version":3,"names":["sanitize","jsonStringify","computeStackTrace","toStackTraceString","NO_ERROR_STACK_PRESENT_MESSAGE","computeRawError","_a","stackTrace","originalError","handlingStack","startClocks","nonErrorPrefix","source","handling","isErrorInstance","Error","message","computeMessage","stack","hasUsableStack","causes","flattenErrorCauses","undefined","type","name","fingerprint","tryToGetFingerprint","concat","length","url","String","dd_fingerprint","getFileFromStackTraceString","exec","error","parentSource","currentError","cause","push"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\error\\error.ts"],"sourcesContent":["import { sanitize } from '../../tools/serialisation/sanitize'\nimport type { ClocksState } from '../../tools/utils/timeUtils'\nimport { jsonStringify } from '../../tools/serialisation/jsonStringify'\nimport type { StackTrace } from '../../tools/stackTrace/computeStackTrace'\nimport { computeStackTrace } from '../../tools/stackTrace/computeStackTrace'\nimport { toStackTraceString } from '../../tools/stackTrace/handlingStack'\nimport type { ErrorSource, ErrorHandling, RawError, RawErrorCause, ErrorWithCause, NonErrorPrefix } from './error.types'\n\nexport const NO_ERROR_STACK_PRESENT_MESSAGE = 'No stack, consider using an instance of Error'\n\ntype RawErrorParams = {\n  stackTrace?: StackTrace\n  originalError: unknown\n\n  handlingStack?: string\n  startClocks: ClocksState\n  nonErrorPrefix: NonErrorPrefix\n  source: ErrorSource\n  handling: ErrorHandling\n}\n\nexport function computeRawError({\n  stackTrace,\n  originalError,\n  handlingStack,\n  startClocks,\n  nonErrorPrefix,\n  source,\n  handling,\n}: RawErrorParams): RawError {\n  const isErrorInstance = originalError instanceof Error\n\n  const message = computeMessage(stackTrace, isErrorInstance, nonErrorPrefix, originalError)\n  const stack = hasUsableStack(isErrorInstance, stackTrace)\n    ? toStackTraceString(stackTrace)\n    : NO_ERROR_STACK_PRESENT_MESSAGE\n  const causes = isErrorInstance ? flattenErrorCauses(originalError as ErrorWithCause, source) : undefined\n  const type = stackTrace?.name\n  const fingerprint = tryToGetFingerprint(originalError)\n\n  return {\n    startClocks,\n    source,\n    handling,\n    handlingStack,\n    originalError,\n    type,\n    message,\n    stack,\n    causes,\n    fingerprint,\n  }\n}\n\nfunction computeMessage(\n  stackTrace: StackTrace | undefined,\n  isErrorInstance: boolean,\n  nonErrorPrefix: NonErrorPrefix,\n  originalError: unknown\n) {\n  // Favor stackTrace message only if tracekit has really been able to extract something meaningful (message + name)\n  // TODO rework tracekit integration to avoid scattering error building logic\n  return stackTrace?.message && stackTrace?.name\n    ? stackTrace.message\n    : !isErrorInstance\n      ? `${nonErrorPrefix} ${jsonStringify(sanitize(originalError))!}`\n      : 'Empty message'\n}\n\nfunction hasUsableStack(isErrorInstance: boolean, stackTrace?: StackTrace): stackTrace is StackTrace {\n  if (stackTrace === undefined) {\n    return false\n  }\n  if (isErrorInstance) {\n    return true\n  }\n  // handle cases where tracekit return stack = [] or stack = [{url: undefined, line: undefined, column: undefined}]\n  // TODO rework tracekit integration to avoid generating those unusable stack\n  return stackTrace.stack.length > 0 && (stackTrace.stack.length > 1 || stackTrace.stack[0].url !== undefined)\n}\n\nexport function tryToGetFingerprint(originalError: unknown) {\n  return originalError instanceof Error && 'dd_fingerprint' in originalError\n    ? String(originalError.dd_fingerprint)\n    : undefined\n}\n\nexport function getFileFromStackTraceString(stack: string) {\n  return /@ (.+)/.exec(stack)?.[1]\n}\n\nexport function flattenErrorCauses(error: ErrorWithCause, parentSource: ErrorSource): RawErrorCause[] | undefined {\n  let currentError = error\n  const causes: RawErrorCause[] = []\n  while (currentError?.cause instanceof Error && causes.length < 10) {\n    const stackTrace = computeStackTrace(currentError.cause)\n    causes.push({\n      message: currentError.cause.message,\n      source: parentSource,\n      type: stackTrace?.name,\n      stack: stackTrace && toStackTraceString(stackTrace),\n    })\n    currentError = currentError.cause\n  }\n  return causes.length ? causes : undefined\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}