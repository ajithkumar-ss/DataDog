{"ast":null,"code":"/* eslint-disable local-rules/disallow-side-effects */\n/**\n * Keep references on console methods to avoid triggering patched behaviors\n *\n * NB: in some setup, console could already be patched by another SDK.\n * In this case, some display messages can be sent by the other SDK\n * but we should be safe from infinite loop nonetheless.\n */\nexport var ConsoleApiName = {\n  log: 'log',\n  debug: 'debug',\n  info: 'info',\n  warn: 'warn',\n  error: 'error'\n};\n/**\n * When building JS bundles, some users might use a plugin[1] or configuration[2] to remove\n * \"console.*\" references. This causes some issue as we expect `console.*` to be defined.\n * As a workaround, let's use a variable alias, so those expressions won't be taken into account by\n * simple static analysis.\n *\n * [1]: https://babeljs.io/docs/babel-plugin-transform-remove-console/\n * [2]: https://github.com/terser/terser#compress-options (look for drop_console)\n */\nexport var globalConsole = console;\nexport var originalConsoleMethods = {};\nObject.keys(ConsoleApiName).forEach(function (name) {\n  originalConsoleMethods[name] = globalConsole[name];\n});\nvar PREFIX = 'Datadog Browser SDK:';\nexport var display = {\n  debug: originalConsoleMethods.debug.bind(globalConsole, PREFIX),\n  log: originalConsoleMethods.log.bind(globalConsole, PREFIX),\n  info: originalConsoleMethods.info.bind(globalConsole, PREFIX),\n  warn: originalConsoleMethods.warn.bind(globalConsole, PREFIX),\n  error: originalConsoleMethods.error.bind(globalConsole, PREFIX)\n};","map":{"version":3,"names":["ConsoleApiName","log","debug","info","warn","error","globalConsole","console","originalConsoleMethods","Object","keys","forEach","name","PREFIX","display","bind"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\tools\\display.ts"],"sourcesContent":["/* eslint-disable local-rules/disallow-side-effects */\n/**\n * Keep references on console methods to avoid triggering patched behaviors\n *\n * NB: in some setup, console could already be patched by another SDK.\n * In this case, some display messages can be sent by the other SDK\n * but we should be safe from infinite loop nonetheless.\n */\n\nexport const ConsoleApiName = {\n  log: 'log',\n  debug: 'debug',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n} as const\n\nexport type ConsoleApiName = (typeof ConsoleApiName)[keyof typeof ConsoleApiName]\n\ninterface Display {\n  debug: typeof console.debug\n  log: typeof console.log\n  info: typeof console.info\n  warn: typeof console.warn\n  error: typeof console.error\n}\n\n/**\n * When building JS bundles, some users might use a plugin[1] or configuration[2] to remove\n * \"console.*\" references. This causes some issue as we expect `console.*` to be defined.\n * As a workaround, let's use a variable alias, so those expressions won't be taken into account by\n * simple static analysis.\n *\n * [1]: https://babeljs.io/docs/babel-plugin-transform-remove-console/\n * [2]: https://github.com/terser/terser#compress-options (look for drop_console)\n */\nexport const globalConsole = console\n\nexport const originalConsoleMethods = {} as Display\nObject.keys(ConsoleApiName).forEach((name) => {\n  originalConsoleMethods[name as ConsoleApiName] = globalConsole[name as ConsoleApiName]\n})\n\nconst PREFIX = 'Datadog Browser SDK:'\n\nexport const display: Display = {\n  debug: originalConsoleMethods.debug.bind(globalConsole, PREFIX),\n  log: originalConsoleMethods.log.bind(globalConsole, PREFIX),\n  info: originalConsoleMethods.info.bind(globalConsole, PREFIX),\n  warn: originalConsoleMethods.warn.bind(globalConsole, PREFIX),\n  error: originalConsoleMethods.error.bind(globalConsole, PREFIX),\n}\n"],"mappings":"AAAA;AACA;;;;;;;AAQA,OAAO,IAAMA,cAAc,GAAG;EAC5BC,GAAG,EAAE,KAAK;EACVC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE;CACC;AAYV;;;;;;;;;AASA,OAAO,IAAMC,aAAa,GAAGC,OAAO;AAEpC,OAAO,IAAMC,sBAAsB,GAAG,EAAa;AACnDC,MAAM,CAACC,IAAI,CAACV,cAAc,CAAC,CAACW,OAAO,CAAC,UAACC,IAAI;EACvCJ,sBAAsB,CAACI,IAAsB,CAAC,GAAGN,aAAa,CAACM,IAAsB,CAAC;AACxF,CAAC,CAAC;AAEF,IAAMC,MAAM,GAAG,sBAAsB;AAErC,OAAO,IAAMC,OAAO,GAAY;EAC9BZ,KAAK,EAAEM,sBAAsB,CAACN,KAAK,CAACa,IAAI,CAACT,aAAa,EAAEO,MAAM,CAAC;EAC/DZ,GAAG,EAAEO,sBAAsB,CAACP,GAAG,CAACc,IAAI,CAACT,aAAa,EAAEO,MAAM,CAAC;EAC3DV,IAAI,EAAEK,sBAAsB,CAACL,IAAI,CAACY,IAAI,CAACT,aAAa,EAAEO,MAAM,CAAC;EAC7DT,IAAI,EAAEI,sBAAsB,CAACJ,IAAI,CAACW,IAAI,CAACT,aAAa,EAAEO,MAAM,CAAC;EAC7DR,KAAK,EAAEG,sBAAsB,CAACH,KAAK,CAACU,IAAI,CAACT,aAAa,EAAEO,MAAM;CAC/D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}