{"ast":null,"code":"import { combine, generateUUID, toServerDuration, relativeToClocks, assign, isNumber, isExperimentalFeatureEnabled, ExperimentalFeature } from '@datadog/browser-core';\nimport { RumPerformanceEntryType } from '../../browser/performanceCollection';\nimport { matchRequestTiming } from './matchRequestTiming';\nimport { computePerformanceResourceDetails, computePerformanceResourceDuration, computeResourceKind, computeSize, isRequestKind, isLongDataUrl, sanitizeDataUrl } from './resourceUtils';\nexport function startResourceCollection(lifeCycle, configuration, sessionManager, pageStateHistory) {\n  lifeCycle.subscribe(8 /* LifeCycleEventType.REQUEST_COMPLETED */, function (request) {\n    var rawEvent = processRequest(request, configuration, sessionManager, pageStateHistory);\n    if (rawEvent) {\n      lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, rawEvent);\n    }\n  });\n  lifeCycle.subscribe(0 /* LifeCycleEventType.PERFORMANCE_ENTRIES_COLLECTED */, function (entries) {\n    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n      var entry = entries_1[_i];\n      if (entry.entryType === RumPerformanceEntryType.RESOURCE && !isRequestKind(entry)) {\n        var rawEvent = processResourceEntry(entry, configuration, sessionManager, pageStateHistory);\n        if (rawEvent) {\n          lifeCycle.notify(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, rawEvent);\n        }\n      }\n    }\n  });\n}\nfunction processRequest(request, configuration, sessionManager, pageStateHistory) {\n  var _a;\n  var matchingTiming = matchRequestTiming(request);\n  var startClocks = matchingTiming ? relativeToClocks(matchingTiming.startTime) : request.startClocks;\n  var shouldIndex = shouldIndexResource(configuration, sessionManager, startClocks);\n  var tracingInfo = computeRequestTracingInfo(request, configuration);\n  if (!shouldIndex && !tracingInfo) {\n    return;\n  }\n  var type = request.type === \"xhr\" /* RequestType.XHR */ ? \"xhr\" /* ResourceType.XHR */ : \"fetch\" /* ResourceType.FETCH */;\n  var correspondingTimingOverrides = matchingTiming ? computePerformanceEntryMetrics(matchingTiming) : undefined;\n  var duration = computeRequestDuration(pageStateHistory, startClocks, request.duration);\n  var pageStateInfo = computePageStateInfo(pageStateHistory, startClocks, (_a = matchingTiming === null || matchingTiming === void 0 ? void 0 : matchingTiming.duration) !== null && _a !== void 0 ? _a : request.duration);\n  var resourceEvent = combine({\n    date: startClocks.timeStamp,\n    resource: {\n      id: generateUUID(),\n      type: type,\n      duration: duration,\n      method: request.method,\n      status_code: request.status,\n      url: isLongDataUrl(request.url) ? sanitizeDataUrl(request.url) : request.url\n    },\n    type: \"resource\" /* RumEventType.RESOURCE */,\n    _dd: {\n      discarded: !shouldIndex\n    }\n  }, tracingInfo, correspondingTimingOverrides, pageStateInfo);\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: matchingTiming,\n      xhr: request.xhr,\n      response: request.response,\n      requestInput: request.input,\n      requestInit: request.init,\n      error: request.error,\n      isAborted: request.isAborted\n    }\n  };\n}\nfunction processResourceEntry(entry, configuration, sessionManager, pageStateHistory) {\n  var startClocks = relativeToClocks(entry.startTime);\n  var shouldIndex = shouldIndexResource(configuration, sessionManager, startClocks);\n  var tracingInfo = computeEntryTracingInfo(entry, configuration);\n  if (!shouldIndex && !tracingInfo) {\n    return;\n  }\n  var type = computeResourceKind(entry);\n  var entryMetrics = computePerformanceEntryMetrics(entry);\n  var pageStateInfo = computePageStateInfo(pageStateHistory, startClocks, entry.duration);\n  var resourceEvent = combine({\n    date: startClocks.timeStamp,\n    resource: {\n      id: generateUUID(),\n      type: type,\n      url: entry.name,\n      status_code: discardZeroStatus(entry.responseStatus)\n    },\n    type: \"resource\" /* RumEventType.RESOURCE */,\n    _dd: {\n      discarded: !shouldIndex\n    }\n  }, tracingInfo, entryMetrics, pageStateInfo);\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: entry\n    }\n  };\n}\nfunction shouldIndexResource(configuration, sessionManager, resourceStart) {\n  return configuration.trackResources && sessionManager.findTrackedSession(resourceStart.relative);\n}\nfunction computePerformanceEntryMetrics(timing) {\n  var renderBlockingStatus = timing.renderBlockingStatus;\n  return {\n    resource: assign({\n      duration: computePerformanceResourceDuration(timing),\n      render_blocking_status: renderBlockingStatus\n    }, computeSize(timing), computePerformanceResourceDetails(timing))\n  };\n}\nfunction computeRequestTracingInfo(request, configuration) {\n  var hasBeenTraced = request.traceSampled && request.traceId && request.spanId;\n  if (!hasBeenTraced) {\n    return undefined;\n  }\n  return {\n    _dd: {\n      span_id: request.spanId.toDecimalString(),\n      trace_id: request.traceId.toDecimalString(),\n      rule_psr: getRulePsr(configuration)\n    }\n  };\n}\nfunction computeEntryTracingInfo(entry, configuration) {\n  var hasBeenTraced = entry.traceId;\n  if (!hasBeenTraced) {\n    return undefined;\n  }\n  return {\n    _dd: {\n      trace_id: entry.traceId,\n      rule_psr: getRulePsr(configuration)\n    }\n  };\n}\n/**\n * @returns number between 0 and 1 which represents trace sample rate\n */\nfunction getRulePsr(configuration) {\n  return isNumber(configuration.traceSampleRate) ? configuration.traceSampleRate / 100 : undefined;\n}\nfunction computePageStateInfo(pageStateHistory, startClocks, duration) {\n  if (!isExperimentalFeatureEnabled(ExperimentalFeature.RESOURCE_PAGE_STATES)) {\n    return;\n  }\n  return {\n    _dd: {\n      page_states: pageStateHistory.findAll(startClocks.relative, duration),\n      page_was_discarded: String(document.wasDiscarded)\n    }\n  };\n}\nfunction computeRequestDuration(pageStateHistory, startClocks, duration) {\n  return !pageStateHistory.wasInPageStateDuringPeriod(\"frozen\" /* PageState.FROZEN */, startClocks.relative, duration) ? toServerDuration(duration) : undefined;\n}\n/**\n * The status is 0 for cross-origin resources without CORS headers, so the status is meaningless, and we shouldn't report it\n * https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStatus#cross-origin_response_status_codes\n */\nfunction discardZeroStatus(statusCode) {\n  return statusCode === 0 ? undefined : statusCode;\n}","map":{"version":3,"names":["combine","generateUUID","toServerDuration","relativeToClocks","assign","isNumber","isExperimentalFeatureEnabled","ExperimentalFeature","RumPerformanceEntryType","matchRequestTiming","computePerformanceResourceDetails","computePerformanceResourceDuration","computeResourceKind","computeSize","isRequestKind","isLongDataUrl","sanitizeDataUrl","startResourceCollection","lifeCycle","configuration","sessionManager","pageStateHistory","subscribe","request","rawEvent","processRequest","notify","entries","_i","entries_1","length","entry","entryType","RESOURCE","processResourceEntry","matchingTiming","startClocks","startTime","shouldIndex","shouldIndexResource","tracingInfo","computeRequestTracingInfo","type","correspondingTimingOverrides","computePerformanceEntryMetrics","undefined","duration","computeRequestDuration","pageStateInfo","computePageStateInfo","_a","resourceEvent","date","timeStamp","resource","id","method","status_code","status","url","_dd","discarded","relative","rawRumEvent","domainContext","performanceEntry","xhr","response","requestInput","input","requestInit","init","error","isAborted","computeEntryTracingInfo","entryMetrics","name","discardZeroStatus","responseStatus","resourceStart","trackResources","findTrackedSession","timing","renderBlockingStatus","render_blocking_status","hasBeenTraced","traceSampled","traceId","spanId","span_id","toDecimalString","trace_id","rule_psr","getRulePsr","traceSampleRate","RESOURCE_PAGE_STATES","page_states","findAll","page_was_discarded","String","document","wasDiscarded","wasInPageStateDuringPeriod","statusCode"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\resource\\resourceCollection.ts"],"sourcesContent":["import type { ClocksState, Duration } from '@datadog/browser-core'\nimport {\n  combine,\n  generateUUID,\n  RequestType,\n  ResourceType,\n  toServerDuration,\n  relativeToClocks,\n  assign,\n  isNumber,\n  isExperimentalFeatureEnabled,\n  ExperimentalFeature,\n} from '@datadog/browser-core'\nimport type { RumConfiguration } from '../configuration'\nimport type { RumPerformanceResourceTiming } from '../../browser/performanceCollection'\nimport { RumPerformanceEntryType } from '../../browser/performanceCollection'\nimport type { RumXhrResourceEventDomainContext, RumFetchResourceEventDomainContext } from '../../domainContext.types'\nimport type { RawRumResourceEvent } from '../../rawRumEvent.types'\nimport { RumEventType } from '../../rawRumEvent.types'\nimport { LifeCycleEventType } from '../lifeCycle'\nimport type { RawRumEventCollectedData, LifeCycle } from '../lifeCycle'\nimport type { RequestCompleteEvent } from '../requestCollection'\nimport type { RumSessionManager } from '../rumSessionManager'\nimport type { PageStateHistory } from '../contexts/pageStateHistory'\nimport { PageState } from '../contexts/pageStateHistory'\nimport { matchRequestTiming } from './matchRequestTiming'\nimport {\n  computePerformanceResourceDetails,\n  computePerformanceResourceDuration,\n  computeResourceKind,\n  computeSize,\n  isRequestKind,\n  isLongDataUrl,\n  sanitizeDataUrl,\n} from './resourceUtils'\n\nexport function startResourceCollection(\n  lifeCycle: LifeCycle,\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  pageStateHistory: PageStateHistory\n) {\n  lifeCycle.subscribe(LifeCycleEventType.REQUEST_COMPLETED, (request: RequestCompleteEvent) => {\n    const rawEvent = processRequest(request, configuration, sessionManager, pageStateHistory)\n    if (rawEvent) {\n      lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, rawEvent)\n    }\n  })\n\n  lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRIES_COLLECTED, (entries) => {\n    for (const entry of entries) {\n      if (entry.entryType === RumPerformanceEntryType.RESOURCE && !isRequestKind(entry)) {\n        const rawEvent = processResourceEntry(entry, configuration, sessionManager, pageStateHistory)\n        if (rawEvent) {\n          lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, rawEvent)\n        }\n      }\n    }\n  })\n}\n\nfunction processRequest(\n  request: RequestCompleteEvent,\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  pageStateHistory: PageStateHistory\n): RawRumEventCollectedData<RawRumResourceEvent> | undefined {\n  const matchingTiming = matchRequestTiming(request)\n  const startClocks = matchingTiming ? relativeToClocks(matchingTiming.startTime) : request.startClocks\n  const shouldIndex = shouldIndexResource(configuration, sessionManager, startClocks)\n  const tracingInfo = computeRequestTracingInfo(request, configuration)\n  if (!shouldIndex && !tracingInfo) {\n    return\n  }\n\n  const type = request.type === RequestType.XHR ? ResourceType.XHR : ResourceType.FETCH\n\n  const correspondingTimingOverrides = matchingTiming ? computePerformanceEntryMetrics(matchingTiming) : undefined\n\n  const duration = computeRequestDuration(pageStateHistory, startClocks, request.duration)\n  const pageStateInfo = computePageStateInfo(\n    pageStateHistory,\n    startClocks,\n    matchingTiming?.duration ?? request.duration\n  )\n\n  const resourceEvent = combine(\n    {\n      date: startClocks.timeStamp,\n      resource: {\n        id: generateUUID(),\n        type,\n        duration,\n        method: request.method,\n        status_code: request.status,\n        url: isLongDataUrl(request.url) ? sanitizeDataUrl(request.url) : request.url,\n      },\n      type: RumEventType.RESOURCE as const,\n      _dd: {\n        discarded: !shouldIndex,\n      },\n    },\n    tracingInfo,\n    correspondingTimingOverrides,\n    pageStateInfo\n  )\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: matchingTiming,\n      xhr: request.xhr,\n      response: request.response,\n      requestInput: request.input,\n      requestInit: request.init,\n      error: request.error,\n      isAborted: request.isAborted,\n    } as RumFetchResourceEventDomainContext | RumXhrResourceEventDomainContext,\n  }\n}\n\nfunction processResourceEntry(\n  entry: RumPerformanceResourceTiming,\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  pageStateHistory: PageStateHistory\n): RawRumEventCollectedData<RawRumResourceEvent> | undefined {\n  const startClocks = relativeToClocks(entry.startTime)\n  const shouldIndex = shouldIndexResource(configuration, sessionManager, startClocks)\n  const tracingInfo = computeEntryTracingInfo(entry, configuration)\n  if (!shouldIndex && !tracingInfo) {\n    return\n  }\n\n  const type = computeResourceKind(entry)\n  const entryMetrics = computePerformanceEntryMetrics(entry)\n\n  const pageStateInfo = computePageStateInfo(pageStateHistory, startClocks, entry.duration)\n\n  const resourceEvent = combine(\n    {\n      date: startClocks.timeStamp,\n      resource: {\n        id: generateUUID(),\n        type,\n        url: entry.name,\n        status_code: discardZeroStatus(entry.responseStatus),\n      },\n      type: RumEventType.RESOURCE as const,\n      _dd: {\n        discarded: !shouldIndex,\n      },\n    },\n    tracingInfo,\n    entryMetrics,\n    pageStateInfo\n  )\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: entry,\n    },\n  }\n}\n\nfunction shouldIndexResource(\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  resourceStart: ClocksState\n) {\n  return configuration.trackResources && sessionManager.findTrackedSession(resourceStart.relative)\n}\n\nfunction computePerformanceEntryMetrics(timing: RumPerformanceResourceTiming) {\n  const { renderBlockingStatus } = timing\n  return {\n    resource: assign(\n      {\n        duration: computePerformanceResourceDuration(timing),\n        render_blocking_status: renderBlockingStatus,\n      },\n      computeSize(timing),\n      computePerformanceResourceDetails(timing)\n    ),\n  }\n}\n\nfunction computeRequestTracingInfo(request: RequestCompleteEvent, configuration: RumConfiguration) {\n  const hasBeenTraced = request.traceSampled && request.traceId && request.spanId\n  if (!hasBeenTraced) {\n    return undefined\n  }\n  return {\n    _dd: {\n      span_id: request.spanId!.toDecimalString(),\n      trace_id: request.traceId!.toDecimalString(),\n      rule_psr: getRulePsr(configuration),\n    },\n  }\n}\n\nfunction computeEntryTracingInfo(entry: RumPerformanceResourceTiming, configuration: RumConfiguration) {\n  const hasBeenTraced = entry.traceId\n  if (!hasBeenTraced) {\n    return undefined\n  }\n  return {\n    _dd: {\n      trace_id: entry.traceId,\n      rule_psr: getRulePsr(configuration),\n    },\n  }\n}\n\n/**\n * @returns number between 0 and 1 which represents trace sample rate\n */\nfunction getRulePsr(configuration: RumConfiguration) {\n  return isNumber(configuration.traceSampleRate) ? configuration.traceSampleRate / 100 : undefined\n}\n\nfunction computePageStateInfo(pageStateHistory: PageStateHistory, startClocks: ClocksState, duration: Duration) {\n  if (!isExperimentalFeatureEnabled(ExperimentalFeature.RESOURCE_PAGE_STATES)) {\n    return\n  }\n\n  return {\n    _dd: {\n      page_states: pageStateHistory.findAll(startClocks.relative, duration),\n      page_was_discarded: String((document as any).wasDiscarded),\n    },\n  }\n}\n\nfunction computeRequestDuration(pageStateHistory: PageStateHistory, startClocks: ClocksState, duration: Duration) {\n  return !pageStateHistory.wasInPageStateDuringPeriod(PageState.FROZEN, startClocks.relative, duration)\n    ? toServerDuration(duration)\n    : undefined\n}\n\n/**\n * The status is 0 for cross-origin resources without CORS headers, so the status is meaningless, and we shouldn't report it\n * https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStatus#cross-origin_response_status_codes\n */\nfunction discardZeroStatus(statusCode: number | undefined): number | undefined {\n  return statusCode === 0 ? undefined : statusCode\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}