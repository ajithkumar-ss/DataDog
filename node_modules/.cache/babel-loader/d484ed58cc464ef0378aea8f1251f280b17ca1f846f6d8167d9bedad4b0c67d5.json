{"ast":null,"code":"import { catchUserErrors } from '../tools/catchUserErrors';\nimport { setDebugMode } from '../tools/monitor';\nimport { assign } from '../tools/utils/polyfills';\nexport function makePublicApi(stub) {\n  var publicApi = assign({\n    version: \"5.17.1\",\n    // This API method is intentionally not monitored, since the only thing executed is the\n    // user-provided 'callback'.  All SDK usages executed in the callback should be monitored, and\n    // we don't want to interfere with the user uncaught exceptions.\n    onReady: function (callback) {\n      callback();\n    }\n  }, stub);\n  // Add a \"hidden\" property to set debug mode. We define it that way to hide it\n  // as much as possible but of course it's not a real protection.\n  Object.defineProperty(publicApi, '_setDebug', {\n    get: function () {\n      return setDebugMode;\n    },\n    enumerable: false\n  });\n  return publicApi;\n}\nexport function defineGlobal(global, name, api) {\n  var existingGlobalVariable = global[name];\n  global[name] = api;\n  if (existingGlobalVariable && existingGlobalVariable.q) {\n    existingGlobalVariable.q.forEach(function (fn) {\n      return catchUserErrors(fn, 'onReady callback threw an error:')();\n    });\n  }\n}","map":{"version":3,"names":["catchUserErrors","setDebugMode","assign","makePublicApi","stub","publicApi","version","onReady","callback","Object","defineProperty","get","enumerable","defineGlobal","global","name","api","existingGlobalVariable","q","forEach","fn"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\boot\\init.ts"],"sourcesContent":["import { catchUserErrors } from '../tools/catchUserErrors'\nimport { setDebugMode } from '../tools/monitor'\nimport { assign } from '../tools/utils/polyfills'\n\n// replaced at build time\ndeclare const __BUILD_ENV__SDK_VERSION__: string\n\nexport function makePublicApi<T>(stub: T): T & { onReady(callback: () => void): void; version: string } {\n  const publicApi = assign(\n    {\n      version: __BUILD_ENV__SDK_VERSION__,\n\n      // This API method is intentionally not monitored, since the only thing executed is the\n      // user-provided 'callback'.  All SDK usages executed in the callback should be monitored, and\n      // we don't want to interfere with the user uncaught exceptions.\n      onReady(callback: () => void) {\n        callback()\n      },\n    },\n    stub\n  )\n\n  // Add a \"hidden\" property to set debug mode. We define it that way to hide it\n  // as much as possible but of course it's not a real protection.\n  Object.defineProperty(publicApi, '_setDebug', {\n    get() {\n      return setDebugMode\n    },\n    enumerable: false,\n  })\n\n  return publicApi\n}\n\nexport function defineGlobal<Global, Name extends keyof Global>(global: Global, name: Name, api: Global[Name]) {\n  const existingGlobalVariable = global[name] as { q?: Array<() => void> } | undefined\n  global[name] = api\n  if (existingGlobalVariable && existingGlobalVariable.q) {\n    existingGlobalVariable.q.forEach((fn) => catchUserErrors(fn, 'onReady callback threw an error:')())\n  }\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,MAAM,QAAQ,0BAA0B;AAKjD,OAAM,SAAUC,aAAaA,CAAIC,IAAO;EACtC,IAAMC,SAAS,GAAGH,MAAM,CACtB;IACEI,OAAO,EAAE;IAET;IACA;IACA;IACAC,OAAO,WAAAA,CAACC,QAAoB;MAC1BA,QAAQ,EAAE;IACZ;GACD,EACDJ,IAAI,CACL;EAED;EACA;EACAK,MAAM,CAACC,cAAc,CAACL,SAAS,EAAE,WAAW,EAAE;IAC5CM,GAAG,WAAAA,CAAA;MACD,OAAOV,YAAY;IACrB,CAAC;IACDW,UAAU,EAAE;GACb,CAAC;EAEF,OAAOP,SAAS;AAClB;AAEA,OAAM,SAAUQ,YAAYA,CAAoCC,MAAc,EAAEC,IAAU,EAAEC,GAAiB;EAC3G,IAAMC,sBAAsB,GAAGH,MAAM,CAACC,IAAI,CAA0C;EACpFD,MAAM,CAACC,IAAI,CAAC,GAAGC,GAAG;EAClB,IAAIC,sBAAsB,IAAIA,sBAAsB,CAACC,CAAC,EAAE;IACtDD,sBAAsB,CAACC,CAAC,CAACC,OAAO,CAAC,UAACC,EAAE;MAAK,OAAApB,eAAe,CAACoB,EAAE,EAAE,kCAAkC,CAAC,EAAE;IAAzD,CAAyD,CAAC;EACrG;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}