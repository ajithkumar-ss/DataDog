{"ast":null,"code":"export function isIE() {\n  return detectBrowserCached() === 0 /* Browser.IE */;\n}\nexport function isChromium() {\n  return detectBrowserCached() === 1 /* Browser.CHROMIUM */;\n}\nexport function isSafari() {\n  return detectBrowserCached() === 2 /* Browser.SAFARI */;\n}\nvar browserCache;\nfunction detectBrowserCached() {\n  return browserCache !== null && browserCache !== void 0 ? browserCache : browserCache = detectBrowser();\n}\n// Exported only for tests\nexport function detectBrowser(browserWindow) {\n  var _a;\n  if (browserWindow === void 0) {\n    browserWindow = window;\n  }\n  var userAgent = browserWindow.navigator.userAgent;\n  if (browserWindow.chrome || /HeadlessChrome/.test(userAgent)) {\n    return 1 /* Browser.CHROMIUM */;\n  }\n  if (\n  // navigator.vendor is deprecated, but it is the most resilient way we found to detect\n  // \"Apple maintained browsers\" (AKA Safari). If one day it gets removed, we still have the\n  // useragent test as a semi-working fallback.\n  ((_a = browserWindow.navigator.vendor) === null || _a === void 0 ? void 0 : _a.indexOf('Apple')) === 0 || /safari/i.test(userAgent) && !/chrome|android/i.test(userAgent)) {\n    return 2 /* Browser.SAFARI */;\n  }\n  if (browserWindow.document.documentMode) {\n    return 0 /* Browser.IE */;\n  }\n  return 3 /* Browser.OTHER */;\n}","map":{"version":3,"names":["isIE","detectBrowserCached","isChromium","isSafari","browserCache","detectBrowser","browserWindow","window","userAgent","navigator","chrome","test","_a","vendor","indexOf","document","documentMode"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\tools\\utils\\browserDetection.ts"],"sourcesContent":["// Exported only for tests\nexport const enum Browser {\n  IE,\n  CHROMIUM,\n  SAFARI,\n  OTHER,\n}\n\nexport function isIE() {\n  return detectBrowserCached() === Browser.IE\n}\n\nexport function isChromium() {\n  return detectBrowserCached() === Browser.CHROMIUM\n}\n\nexport function isSafari() {\n  return detectBrowserCached() === Browser.SAFARI\n}\n\nlet browserCache: Browser | undefined\nfunction detectBrowserCached() {\n  return browserCache ?? (browserCache = detectBrowser())\n}\n\n// Exported only for tests\nexport function detectBrowser(browserWindow: Window = window) {\n  const userAgent = browserWindow.navigator.userAgent\n  if ((browserWindow as any).chrome || /HeadlessChrome/.test(userAgent)) {\n    return Browser.CHROMIUM\n  }\n\n  if (\n    // navigator.vendor is deprecated, but it is the most resilient way we found to detect\n    // \"Apple maintained browsers\" (AKA Safari). If one day it gets removed, we still have the\n    // useragent test as a semi-working fallback.\n    browserWindow.navigator.vendor?.indexOf('Apple') === 0 ||\n    (/safari/i.test(userAgent) && !/chrome|android/i.test(userAgent))\n  ) {\n    return Browser.SAFARI\n  }\n\n  if ((browserWindow.document as any).documentMode) {\n    return Browser.IE\n  }\n\n  return Browser.OTHER\n}\n"],"mappings":"AAQA,OAAM,SAAUA,IAAIA,CAAA;EAClB,OAAOC,mBAAmB,EAAE;AAC9B;AAEA,OAAM,SAAUC,UAAUA,CAAA;EACxB,OAAOD,mBAAmB,EAAE;AAC9B;AAEA,OAAM,SAAUE,QAAQA,CAAA;EACtB,OAAOF,mBAAmB,EAAE;AAC9B;AAEA,IAAIG,YAAiC;AACrC,SAASH,mBAAmBA,CAAA;EAC1B,OAAOG,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAKA,YAAY,GAAGC,aAAa,EAAG;AACzD;AAEA;AACA,OAAM,SAAUA,aAAaA,CAACC,aAA8B;;EAA9B,IAAAA,aAAA;IAAAA,aAAA,GAAAC,MAA8B;EAAA;EAC1D,IAAMC,SAAS,GAAGF,aAAa,CAACG,SAAS,CAACD,SAAS;EACnD,IAAKF,aAAqB,CAACI,MAAM,IAAI,gBAAgB,CAACC,IAAI,CAACH,SAAS,CAAC,EAAE;IACrE;EACF;EAEA;EACE;EACA;EACA;EACA,EAAAI,EAAA,GAAAN,aAAa,CAACG,SAAS,CAACI,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,OAAO,CAAC,OAAO,CAAC,MAAK,CAAC,IACrD,SAAS,CAACH,IAAI,CAACH,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAACG,IAAI,CAACH,SAAS,CAAE,EACjE;IACA;EACF;EAEA,IAAKF,aAAa,CAACS,QAAgB,CAACC,YAAY,EAAE;IAChD;EACF;EAEA;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}