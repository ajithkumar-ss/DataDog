{"ast":null,"code":"import { addEventListener, DOM_EVENT, instrumentMethod, Observable, shallowClone } from '@datadog/browser-core';\nexport function createLocationChangeObservable(configuration, location) {\n  var currentLocation = shallowClone(location);\n  return new Observable(function (observable) {\n    var stopHistoryTracking = trackHistory(configuration, onLocationChange).stop;\n    var stopHashTracking = trackHash(configuration, onLocationChange).stop;\n    function onLocationChange() {\n      if (currentLocation.href === location.href) {\n        return;\n      }\n      var newLocation = shallowClone(location);\n      observable.notify({\n        newLocation: newLocation,\n        oldLocation: currentLocation\n      });\n      currentLocation = newLocation;\n    }\n    return function () {\n      stopHistoryTracking();\n      stopHashTracking();\n    };\n  });\n}\nfunction trackHistory(configuration, onHistoryChange) {\n  var stopInstrumentingPushState = instrumentMethod(history, 'pushState', function (_a) {\n    var onPostCall = _a.onPostCall;\n    onPostCall(onHistoryChange);\n  }).stop;\n  var stopInstrumentingReplaceState = instrumentMethod(history, 'replaceState', function (_a) {\n    var onPostCall = _a.onPostCall;\n    onPostCall(onHistoryChange);\n  }).stop;\n  var removeListener = addEventListener(configuration, window, DOM_EVENT.POP_STATE, onHistoryChange).stop;\n  return {\n    stop: function () {\n      stopInstrumentingPushState();\n      stopInstrumentingReplaceState();\n      removeListener();\n    }\n  };\n}\nfunction trackHash(configuration, onHashChange) {\n  return addEventListener(configuration, window, DOM_EVENT.HASH_CHANGE, onHashChange);\n}","map":{"version":3,"names":["addEventListener","DOM_EVENT","instrumentMethod","Observable","shallowClone","createLocationChangeObservable","configuration","location","currentLocation","observable","stopHistoryTracking","trackHistory","onLocationChange","stop","stopHashTracking","trackHash","href","newLocation","notify","oldLocation","onHistoryChange","stopInstrumentingPushState","history","_a","onPostCall","stopInstrumentingReplaceState","removeListener","window","POP_STATE","onHashChange","HASH_CHANGE"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\browser\\locationChangeObservable.ts"],"sourcesContent":["import { addEventListener, DOM_EVENT, instrumentMethod, Observable, shallowClone } from '@datadog/browser-core'\nimport type { RumConfiguration } from '../domain/configuration'\n\nexport interface LocationChange {\n  oldLocation: Readonly<Location>\n  newLocation: Readonly<Location>\n}\n\nexport function createLocationChangeObservable(configuration: RumConfiguration, location: Location) {\n  let currentLocation = shallowClone(location)\n\n  return new Observable<LocationChange>((observable) => {\n    const { stop: stopHistoryTracking } = trackHistory(configuration, onLocationChange)\n    const { stop: stopHashTracking } = trackHash(configuration, onLocationChange)\n\n    function onLocationChange() {\n      if (currentLocation.href === location.href) {\n        return\n      }\n      const newLocation = shallowClone(location)\n      observable.notify({\n        newLocation,\n        oldLocation: currentLocation,\n      })\n      currentLocation = newLocation\n    }\n\n    return () => {\n      stopHistoryTracking()\n      stopHashTracking()\n    }\n  })\n}\n\nfunction trackHistory(configuration: RumConfiguration, onHistoryChange: () => void) {\n  const { stop: stopInstrumentingPushState } = instrumentMethod(history, 'pushState', ({ onPostCall }) => {\n    onPostCall(onHistoryChange)\n  })\n  const { stop: stopInstrumentingReplaceState } = instrumentMethod(history, 'replaceState', ({ onPostCall }) => {\n    onPostCall(onHistoryChange)\n  })\n  const { stop: removeListener } = addEventListener(configuration, window, DOM_EVENT.POP_STATE, onHistoryChange)\n\n  return {\n    stop: () => {\n      stopInstrumentingPushState()\n      stopInstrumentingReplaceState()\n      removeListener()\n    },\n  }\n}\n\nfunction trackHash(configuration: RumConfiguration, onHashChange: () => void) {\n  return addEventListener(configuration, window, DOM_EVENT.HASH_CHANGE, onHashChange)\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,YAAY,QAAQ,uBAAuB;AAQ/G,OAAM,SAAUC,8BAA8BA,CAACC,aAA+B,EAAEC,QAAkB;EAChG,IAAIC,eAAe,GAAGJ,YAAY,CAACG,QAAQ,CAAC;EAE5C,OAAO,IAAIJ,UAAU,CAAiB,UAACM,UAAU;IACvC,IAAMC,mBAAmB,GAAKC,YAAY,CAACL,aAAa,EAAEM,gBAAgB,CAAC,CAAAC,IAAlD;IACzB,IAAMC,gBAAgB,GAAKC,SAAS,CAACT,aAAa,EAAEM,gBAAgB,CAAC,CAAAC,IAA/C;IAE9B,SAASD,gBAAgBA,CAAA;MACvB,IAAIJ,eAAe,CAACQ,IAAI,KAAKT,QAAQ,CAACS,IAAI,EAAE;QAC1C;MACF;MACA,IAAMC,WAAW,GAAGb,YAAY,CAACG,QAAQ,CAAC;MAC1CE,UAAU,CAACS,MAAM,CAAC;QAChBD,WAAW,EAAAA,WAAA;QACXE,WAAW,EAAEX;OACd,CAAC;MACFA,eAAe,GAAGS,WAAW;IAC/B;IAEA,OAAO;MACLP,mBAAmB,EAAE;MACrBI,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC,CAAC;AACJ;AAEA,SAASH,YAAYA,CAACL,aAA+B,EAAEc,eAA2B;EACxE,IAAMC,0BAA0B,GAAKnB,gBAAgB,CAACoB,OAAO,EAAE,WAAW,EAAE,UAACC,EAAc;QAAZC,UAAU,GAAAD,EAAA,CAAAC,UAAA;IAC/FA,UAAU,CAACJ,eAAe,CAAC;EAC7B,CAAC,CAAC,CAAAP,IAFsC;EAGhC,IAAMY,6BAA6B,GAAKvB,gBAAgB,CAACoB,OAAO,EAAE,cAAc,EAAE,UAACC,EAAc;QAAZC,UAAU,GAAAD,EAAA,CAAAC,UAAA;IACrGA,UAAU,CAACJ,eAAe,CAAC;EAC7B,CAAC,CAAC,CAAAP,IAFyC;EAGnC,IAAMa,cAAc,GAAK1B,gBAAgB,CAACM,aAAa,EAAEqB,MAAM,EAAE1B,SAAS,CAAC2B,SAAS,EAAER,eAAe,CAAC,CAAAP,IAAlF;EAE5B,OAAO;IACLA,IAAI,EAAE,SAAAA,CAAA;MACJQ,0BAA0B,EAAE;MAC5BI,6BAA6B,EAAE;MAC/BC,cAAc,EAAE;IAClB;GACD;AACH;AAEA,SAASX,SAASA,CAACT,aAA+B,EAAEuB,YAAwB;EAC1E,OAAO7B,gBAAgB,CAACM,aAAa,EAAEqB,MAAM,EAAE1B,SAAS,CAAC6B,WAAW,EAAED,YAAY,CAAC;AACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}