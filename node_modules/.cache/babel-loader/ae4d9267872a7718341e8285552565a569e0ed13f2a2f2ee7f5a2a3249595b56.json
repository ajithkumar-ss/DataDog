{"ast":null,"code":"import { sanitize, deepClone, getType, objectEntries } from '@datadog/browser-core';\n/**\n * Current limitation:\n * - field path do not support array, 'a.b.c' only\n */\nexport function limitModification(object, modifiableFieldPaths, modifier) {\n  var clone = deepClone(object);\n  var result = modifier(clone);\n  objectEntries(modifiableFieldPaths).forEach(function (_a) {\n    var fieldPath = _a[0],\n      fieldType = _a[1];\n    var newValue = get(clone, fieldPath);\n    var newType = getType(newValue);\n    if (newType === fieldType) {\n      set(object, fieldPath, sanitize(newValue));\n    } else if (fieldType === 'object' && (newType === 'undefined' || newType === 'null')) {\n      set(object, fieldPath, {});\n    }\n  });\n  return result;\n}\nfunction get(object, path) {\n  var current = object;\n  for (var _i = 0, _a = path.split('.'); _i < _a.length; _i++) {\n    var field = _a[_i];\n    if (!isValidObjectContaining(current, field)) {\n      return;\n    }\n    current = current[field];\n  }\n  return current;\n}\nfunction set(object, path, value) {\n  var current = object;\n  var fields = path.split('.');\n  for (var i = 0; i < fields.length; i += 1) {\n    var field = fields[i];\n    if (!isValidObject(current)) {\n      return;\n    }\n    if (i !== fields.length - 1) {\n      current = current[field];\n    } else {\n      current[field] = value;\n    }\n  }\n}\nfunction isValidObject(object) {\n  return getType(object) === 'object';\n}\nfunction isValidObjectContaining(object, field) {\n  return isValidObject(object) && Object.prototype.hasOwnProperty.call(object, field);\n}","map":{"version":3,"names":["sanitize","deepClone","getType","objectEntries","limitModification","object","modifiableFieldPaths","modifier","clone","result","forEach","_a","fieldPath","fieldType","newValue","get","newType","set","path","current","_i","split","length","field","isValidObjectContaining","value","fields","i","isValidObject","Object","prototype","hasOwnProperty","call"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\limitModification.ts"],"sourcesContent":["import { sanitize, deepClone, getType, objectEntries } from '@datadog/browser-core'\nimport type { Context } from '@datadog/browser-core'\n\nexport type ModifiableFieldPaths = Record<string, 'string' | 'object'>\n\n/**\n * Current limitation:\n * - field path do not support array, 'a.b.c' only\n */\nexport function limitModification<T extends Context, Result>(\n  object: T,\n  modifiableFieldPaths: ModifiableFieldPaths,\n  modifier: (object: T) => Result\n): Result | undefined {\n  const clone = deepClone(object)\n  const result = modifier(clone)\n  objectEntries(modifiableFieldPaths).forEach(([fieldPath, fieldType]) => {\n    const newValue = get(clone, fieldPath)\n    const newType = getType(newValue)\n    if (newType === fieldType) {\n      set(object, fieldPath, sanitize(newValue))\n    } else if (fieldType === 'object' && (newType === 'undefined' || newType === 'null')) {\n      set(object, fieldPath, {})\n    }\n  })\n  return result\n}\n\nfunction get(object: unknown, path: string) {\n  let current = object\n  for (const field of path.split('.')) {\n    if (!isValidObjectContaining(current, field)) {\n      return\n    }\n    current = current[field]\n  }\n  return current\n}\n\nfunction set(object: unknown, path: string, value: unknown) {\n  let current = object\n  const fields = path.split('.')\n  for (let i = 0; i < fields.length; i += 1) {\n    const field = fields[i]\n    if (!isValidObject(current)) {\n      return\n    }\n    if (i !== fields.length - 1) {\n      current = current[field]\n    } else {\n      current[field] = value\n    }\n  }\n}\n\nfunction isValidObject(object: unknown): object is Record<string, unknown> {\n  return getType(object) === 'object'\n}\n\nfunction isValidObjectContaining(object: unknown, field: string): object is Record<string, unknown> {\n  return isValidObject(object) && Object.prototype.hasOwnProperty.call(object, field)\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,aAAa,QAAQ,uBAAuB;AAKnF;;;;AAIA,OAAM,SAAUC,iBAAiBA,CAC/BC,MAAS,EACTC,oBAA0C,EAC1CC,QAA+B;EAE/B,IAAMC,KAAK,GAAGP,SAAS,CAACI,MAAM,CAAC;EAC/B,IAAMI,MAAM,GAAGF,QAAQ,CAACC,KAAK,CAAC;EAC9BL,aAAa,CAACG,oBAAoB,CAAC,CAACI,OAAO,CAAC,UAACC,EAAsB;QAArBC,SAAS,GAAAD,EAAA;MAAEE,SAAS,GAAAF,EAAA;IAChE,IAAMG,QAAQ,GAAGC,GAAG,CAACP,KAAK,EAAEI,SAAS,CAAC;IACtC,IAAMI,OAAO,GAAGd,OAAO,CAACY,QAAQ,CAAC;IACjC,IAAIE,OAAO,KAAKH,SAAS,EAAE;MACzBI,GAAG,CAACZ,MAAM,EAAEO,SAAS,EAAEZ,QAAQ,CAACc,QAAQ,CAAC,CAAC;IAC5C,CAAC,MAAM,IAAID,SAAS,KAAK,QAAQ,KAAKG,OAAO,KAAK,WAAW,IAAIA,OAAO,KAAK,MAAM,CAAC,EAAE;MACpFC,GAAG,CAACZ,MAAM,EAAEO,SAAS,EAAE,EAAE,CAAC;IAC5B;EACF,CAAC,CAAC;EACF,OAAOH,MAAM;AACf;AAEA,SAASM,GAAGA,CAACV,MAAe,EAAEa,IAAY;EACxC,IAAIC,OAAO,GAAGd,MAAM;EACpB,KAAoB,IAAAe,EAAA,IAAe,EAAfT,EAAA,GAAAO,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,EAAfD,EAAA,GAAAT,EAAA,CAAAW,MAAe,EAAfF,EAAA,EAAe,EAAE;IAAhC,IAAMG,KAAK,GAAAZ,EAAA,CAAAS,EAAA;IACd,IAAI,CAACI,uBAAuB,CAACL,OAAO,EAAEI,KAAK,CAAC,EAAE;MAC5C;IACF;IACAJ,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;EAC1B;EACA,OAAOJ,OAAO;AAChB;AAEA,SAASF,GAAGA,CAACZ,MAAe,EAAEa,IAAY,EAAEO,KAAc;EACxD,IAAIN,OAAO,GAAGd,MAAM;EACpB,IAAMqB,MAAM,GAAGR,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAC9B,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACJ,MAAM,EAAEK,CAAC,IAAI,CAAC,EAAE;IACzC,IAAMJ,KAAK,GAAGG,MAAM,CAACC,CAAC,CAAC;IACvB,IAAI,CAACC,aAAa,CAACT,OAAO,CAAC,EAAE;MAC3B;IACF;IACA,IAAIQ,CAAC,KAAKD,MAAM,CAACJ,MAAM,GAAG,CAAC,EAAE;MAC3BH,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;IAC1B,CAAC,MAAM;MACLJ,OAAO,CAACI,KAAK,CAAC,GAAGE,KAAK;IACxB;EACF;AACF;AAEA,SAASG,aAAaA,CAACvB,MAAe;EACpC,OAAOH,OAAO,CAACG,MAAM,CAAC,KAAK,QAAQ;AACrC;AAEA,SAASmB,uBAAuBA,CAACnB,MAAe,EAAEkB,KAAa;EAC7D,OAAOK,aAAa,CAACvB,MAAM,CAAC,IAAIwB,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAAC3B,MAAM,EAAEkB,KAAK,CAAC;AACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}