{"ast":null,"code":"import { setTimeout } from '../../tools/timer';\nimport { clocksNow, ONE_MINUTE } from '../../tools/utils/timeUtils';\nimport { ErrorSource } from '../error/error.types';\nexport function createEventRateLimiter(eventType, limit, onLimitReached) {\n  var eventCount = 0;\n  var allowNextEvent = false;\n  return {\n    isLimitReached: function () {\n      if (eventCount === 0) {\n        setTimeout(function () {\n          eventCount = 0;\n        }, ONE_MINUTE);\n      }\n      eventCount += 1;\n      if (eventCount <= limit || allowNextEvent) {\n        allowNextEvent = false;\n        return false;\n      }\n      if (eventCount === limit + 1) {\n        allowNextEvent = true;\n        try {\n          onLimitReached({\n            message: \"Reached max number of \".concat(eventType, \"s by minute: \").concat(limit),\n            source: ErrorSource.AGENT,\n            startClocks: clocksNow()\n          });\n        } finally {\n          allowNextEvent = false;\n        }\n      }\n      return true;\n    }\n  };\n}","map":{"version":3,"names":["setTimeout","clocksNow","ONE_MINUTE","ErrorSource","createEventRateLimiter","eventType","limit","onLimitReached","eventCount","allowNextEvent","isLimitReached","message","concat","source","AGENT","startClocks"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\eventRateLimiter\\createEventRateLimiter.ts"],"sourcesContent":["import { setTimeout } from '../../tools/timer'\nimport { clocksNow, ONE_MINUTE } from '../../tools/utils/timeUtils'\nimport type { RawError } from '../error/error.types'\nimport { ErrorSource } from '../error/error.types'\n\nexport type EventRateLimiter = ReturnType<typeof createEventRateLimiter>\n\nexport function createEventRateLimiter(\n  eventType: string,\n  limit: number,\n  onLimitReached: (limitError: RawError) => void\n) {\n  let eventCount = 0\n  let allowNextEvent = false\n\n  return {\n    isLimitReached() {\n      if (eventCount === 0) {\n        setTimeout(() => {\n          eventCount = 0\n        }, ONE_MINUTE)\n      }\n\n      eventCount += 1\n      if (eventCount <= limit || allowNextEvent) {\n        allowNextEvent = false\n        return false\n      }\n\n      if (eventCount === limit + 1) {\n        allowNextEvent = true\n        try {\n          onLimitReached({\n            message: `Reached max number of ${eventType}s by minute: ${limit}`,\n            source: ErrorSource.AGENT,\n            startClocks: clocksNow(),\n          })\n        } finally {\n          allowNextEvent = false\n        }\n      }\n\n      return true\n    },\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,SAAS,EAAEC,UAAU,QAAQ,6BAA6B;AAEnE,SAASC,WAAW,QAAQ,sBAAsB;AAIlD,OAAM,SAAUC,sBAAsBA,CACpCC,SAAiB,EACjBC,KAAa,EACbC,cAA8C;EAE9C,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,cAAc,GAAG,KAAK;EAE1B,OAAO;IACLC,cAAc,WAAAA,CAAA;MACZ,IAAIF,UAAU,KAAK,CAAC,EAAE;QACpBR,UAAU,CAAC;UACTQ,UAAU,GAAG,CAAC;QAChB,CAAC,EAAEN,UAAU,CAAC;MAChB;MAEAM,UAAU,IAAI,CAAC;MACf,IAAIA,UAAU,IAAIF,KAAK,IAAIG,cAAc,EAAE;QACzCA,cAAc,GAAG,KAAK;QACtB,OAAO,KAAK;MACd;MAEA,IAAID,UAAU,KAAKF,KAAK,GAAG,CAAC,EAAE;QAC5BG,cAAc,GAAG,IAAI;QACrB,IAAI;UACFF,cAAc,CAAC;YACbI,OAAO,EAAE,yBAAAC,MAAA,CAAyBP,SAAS,mBAAAO,MAAA,CAAgBN,KAAK,CAAE;YAClEO,MAAM,EAAEV,WAAW,CAACW,KAAK;YACzBC,WAAW,EAAEd,SAAS;WACvB,CAAC;QACJ,CAAC,SAAS;UACRQ,cAAc,GAAG,KAAK;QACxB;MACF;MAEA,OAAO,IAAI;IACb;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}