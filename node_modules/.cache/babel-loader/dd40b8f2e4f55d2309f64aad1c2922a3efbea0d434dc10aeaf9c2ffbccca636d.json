{"ast":null,"code":"import { elapsed, ValueHistory, SESSION_TIME_OUT_DELAY, toServerDuration, addEventListeners, relativeNow, DOM_EVENT } from '@datadog/browser-core';\n// Arbitrary value to cap number of element for memory consumption in the browser\nexport var MAX_PAGE_STATE_ENTRIES = 4000;\n// Arbitrary value to cap number of element for backend & to save bandwidth\nexport var MAX_PAGE_STATE_ENTRIES_SELECTABLE = 500;\nexport var PAGE_STATE_CONTEXT_TIME_OUT_DELAY = SESSION_TIME_OUT_DELAY;\nexport function startPageStateHistory(configuration, maxPageStateEntriesSelectable) {\n  if (maxPageStateEntriesSelectable === void 0) {\n    maxPageStateEntriesSelectable = MAX_PAGE_STATE_ENTRIES_SELECTABLE;\n  }\n  var pageStateEntryHistory = new ValueHistory(PAGE_STATE_CONTEXT_TIME_OUT_DELAY, MAX_PAGE_STATE_ENTRIES);\n  var currentPageState;\n  addPageState(getPageState(), relativeNow());\n  var stopEventListeners = addEventListeners(configuration, window, [DOM_EVENT.PAGE_SHOW, DOM_EVENT.FOCUS, DOM_EVENT.BLUR, DOM_EVENT.VISIBILITY_CHANGE, DOM_EVENT.RESUME, DOM_EVENT.FREEZE, DOM_EVENT.PAGE_HIDE], function (event) {\n    addPageState(computePageState(event), event.timeStamp);\n  }, {\n    capture: true\n  }).stop;\n  function addPageState(nextPageState, startTime) {\n    if (startTime === void 0) {\n      startTime = relativeNow();\n    }\n    if (nextPageState === currentPageState) {\n      return;\n    }\n    currentPageState = nextPageState;\n    pageStateEntryHistory.closeActive(startTime);\n    pageStateEntryHistory.add({\n      state: currentPageState,\n      startTime: startTime\n    }, startTime);\n  }\n  var pageStateHistory = {\n    findAll: function (eventStartTime, duration) {\n      var pageStateEntries = pageStateEntryHistory.findAll(eventStartTime, duration);\n      if (pageStateEntries.length === 0) {\n        return;\n      }\n      var pageStateServerEntries = [];\n      // limit the number of entries to return\n      var limit = Math.max(0, pageStateEntries.length - maxPageStateEntriesSelectable);\n      // loop page state entries backward to return the selected ones in desc order\n      for (var index = pageStateEntries.length - 1; index >= limit; index--) {\n        var pageState = pageStateEntries[index];\n        // compute the start time relative to the event start time (ex: to be relative to the view start time)\n        var relativeStartTime = elapsed(eventStartTime, pageState.startTime);\n        pageStateServerEntries.push({\n          state: pageState.state,\n          start: toServerDuration(relativeStartTime)\n        });\n      }\n      return pageStateServerEntries;\n    },\n    wasInPageStateAt: function (state, startTime) {\n      return pageStateHistory.wasInPageStateDuringPeriod(state, startTime, 0);\n    },\n    wasInPageStateDuringPeriod: function (state, startTime, duration) {\n      return pageStateEntryHistory.findAll(startTime, duration).some(function (pageState) {\n        return pageState.state === state;\n      });\n    },\n    addPageState: addPageState,\n    stop: function () {\n      stopEventListeners();\n      pageStateEntryHistory.stop();\n    }\n  };\n  return pageStateHistory;\n}\nfunction computePageState(event) {\n  if (event.type === DOM_EVENT.FREEZE) {\n    return \"frozen\" /* PageState.FROZEN */;\n  } else if (event.type === DOM_EVENT.PAGE_HIDE) {\n    return event.persisted ? \"frozen\" /* PageState.FROZEN */ : \"terminated\" /* PageState.TERMINATED */;\n  }\n  return getPageState();\n}\nfunction getPageState() {\n  if (document.visibilityState === 'hidden') {\n    return \"hidden\" /* PageState.HIDDEN */;\n  }\n  if (document.hasFocus()) {\n    return \"active\" /* PageState.ACTIVE */;\n  }\n  return \"passive\" /* PageState.PASSIVE */;\n}","map":{"version":3,"names":["elapsed","ValueHistory","SESSION_TIME_OUT_DELAY","toServerDuration","addEventListeners","relativeNow","DOM_EVENT","MAX_PAGE_STATE_ENTRIES","MAX_PAGE_STATE_ENTRIES_SELECTABLE","PAGE_STATE_CONTEXT_TIME_OUT_DELAY","startPageStateHistory","configuration","maxPageStateEntriesSelectable","pageStateEntryHistory","currentPageState","addPageState","getPageState","stopEventListeners","window","PAGE_SHOW","FOCUS","BLUR","VISIBILITY_CHANGE","RESUME","FREEZE","PAGE_HIDE","event","computePageState","timeStamp","capture","stop","nextPageState","startTime","closeActive","add","state","pageStateHistory","findAll","eventStartTime","duration","pageStateEntries","length","pageStateServerEntries","limit","Math","max","index","pageState","relativeStartTime","push","start","wasInPageStateAt","wasInPageStateDuringPeriod","some","type","persisted","document","visibilityState","hasFocus"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\contexts\\pageStateHistory.ts"],"sourcesContent":["import type { Duration, RelativeTime } from '@datadog/browser-core'\nimport {\n  elapsed,\n  ValueHistory,\n  SESSION_TIME_OUT_DELAY,\n  toServerDuration,\n  addEventListeners,\n  relativeNow,\n  DOM_EVENT,\n} from '@datadog/browser-core'\nimport type { RumConfiguration } from '../configuration'\nimport type { PageStateServerEntry } from '../../rawRumEvent.types'\n\n// Arbitrary value to cap number of element for memory consumption in the browser\nexport const MAX_PAGE_STATE_ENTRIES = 4000\n// Arbitrary value to cap number of element for backend & to save bandwidth\nexport const MAX_PAGE_STATE_ENTRIES_SELECTABLE = 500\n\nexport const PAGE_STATE_CONTEXT_TIME_OUT_DELAY = SESSION_TIME_OUT_DELAY\n\nexport const enum PageState {\n  ACTIVE = 'active',\n  PASSIVE = 'passive',\n  HIDDEN = 'hidden',\n  FROZEN = 'frozen',\n  TERMINATED = 'terminated',\n}\n\nexport type PageStateEntry = { state: PageState; startTime: RelativeTime }\n\nexport interface PageStateHistory {\n  findAll: (startTime: RelativeTime, duration: Duration) => PageStateServerEntry[] | undefined\n  wasInPageStateAt: (state: PageState, startTime: RelativeTime) => boolean\n  wasInPageStateDuringPeriod: (state: PageState, startTime: RelativeTime, duration: Duration) => boolean\n  addPageState(nextPageState: PageState, startTime?: RelativeTime): void\n  stop: () => void\n}\n\nexport function startPageStateHistory(\n  configuration: RumConfiguration,\n  maxPageStateEntriesSelectable = MAX_PAGE_STATE_ENTRIES_SELECTABLE\n): PageStateHistory {\n  const pageStateEntryHistory = new ValueHistory<PageStateEntry>(\n    PAGE_STATE_CONTEXT_TIME_OUT_DELAY,\n    MAX_PAGE_STATE_ENTRIES\n  )\n\n  let currentPageState: PageState\n  addPageState(getPageState(), relativeNow())\n\n  const { stop: stopEventListeners } = addEventListeners(\n    configuration,\n    window,\n    [\n      DOM_EVENT.PAGE_SHOW,\n      DOM_EVENT.FOCUS,\n      DOM_EVENT.BLUR,\n      DOM_EVENT.VISIBILITY_CHANGE,\n      DOM_EVENT.RESUME,\n      DOM_EVENT.FREEZE,\n      DOM_EVENT.PAGE_HIDE,\n    ],\n    (event) => {\n      addPageState(computePageState(event), event.timeStamp as RelativeTime)\n    },\n    { capture: true }\n  )\n\n  function addPageState(nextPageState: PageState, startTime = relativeNow()) {\n    if (nextPageState === currentPageState) {\n      return\n    }\n\n    currentPageState = nextPageState\n    pageStateEntryHistory.closeActive(startTime)\n    pageStateEntryHistory.add({ state: currentPageState, startTime }, startTime)\n  }\n\n  const pageStateHistory = {\n    findAll: (eventStartTime: RelativeTime, duration: Duration): PageStateServerEntry[] | undefined => {\n      const pageStateEntries = pageStateEntryHistory.findAll(eventStartTime, duration)\n\n      if (pageStateEntries.length === 0) {\n        return\n      }\n\n      const pageStateServerEntries = []\n      // limit the number of entries to return\n      const limit = Math.max(0, pageStateEntries.length - maxPageStateEntriesSelectable)\n\n      // loop page state entries backward to return the selected ones in desc order\n      for (let index = pageStateEntries.length - 1; index >= limit; index--) {\n        const pageState = pageStateEntries[index]\n        // compute the start time relative to the event start time (ex: to be relative to the view start time)\n        const relativeStartTime = elapsed(eventStartTime, pageState.startTime)\n\n        pageStateServerEntries.push({\n          state: pageState.state,\n          start: toServerDuration(relativeStartTime),\n        })\n      }\n\n      return pageStateServerEntries\n    },\n    wasInPageStateAt: (state: PageState, startTime: RelativeTime) =>\n      pageStateHistory.wasInPageStateDuringPeriod(state, startTime, 0 as Duration),\n    wasInPageStateDuringPeriod: (state: PageState, startTime: RelativeTime, duration: Duration) =>\n      pageStateEntryHistory.findAll(startTime, duration).some((pageState) => pageState.state === state),\n    addPageState,\n    stop: () => {\n      stopEventListeners()\n      pageStateEntryHistory.stop()\n    },\n  }\n  return pageStateHistory\n}\n\nfunction computePageState(event: Event & { type: DOM_EVENT }) {\n  if (event.type === DOM_EVENT.FREEZE) {\n    return PageState.FROZEN\n  } else if (event.type === DOM_EVENT.PAGE_HIDE) {\n    return (event as PageTransitionEvent).persisted ? PageState.FROZEN : PageState.TERMINATED\n  }\n  return getPageState()\n}\n\nfunction getPageState() {\n  if (document.visibilityState === 'hidden') {\n    return PageState.HIDDEN\n  }\n\n  if (document.hasFocus()) {\n    return PageState.ACTIVE\n  }\n\n  return PageState.PASSIVE\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}