{"ast":null,"code":"import { trackInput, trackMutation, trackScroll } from './trackers';\nexport var initShadowRootsController = function (configuration, callback, elementsScrollPositions) {\n  var controllerByShadowRoot = new Map();\n  var shadowRootsController = {\n    addShadowRoot: function (shadowRoot) {\n      if (controllerByShadowRoot.has(shadowRoot)) {\n        return;\n      }\n      var mutationTracker = trackMutation(callback, configuration, shadowRootsController, shadowRoot);\n      // The change event does not bubble up across the shadow root, we have to listen on the shadow root\n      var inputTracker = trackInput(configuration, callback, shadowRoot);\n      // The scroll event does not bubble up across the shadow root, we have to listen on the shadow root\n      var scrollTracker = trackScroll(configuration, callback, elementsScrollPositions, shadowRoot);\n      controllerByShadowRoot.set(shadowRoot, {\n        flush: function () {\n          return mutationTracker.flush();\n        },\n        stop: function () {\n          mutationTracker.stop();\n          inputTracker.stop();\n          scrollTracker.stop();\n        }\n      });\n    },\n    removeShadowRoot: function (shadowRoot) {\n      var entry = controllerByShadowRoot.get(shadowRoot);\n      if (!entry) {\n        // unidentified root cause: observed in some cases with shadow DOM added by browser extensions\n        return;\n      }\n      entry.stop();\n      controllerByShadowRoot.delete(shadowRoot);\n    },\n    stop: function () {\n      controllerByShadowRoot.forEach(function (_a) {\n        var stop = _a.stop;\n        return stop();\n      });\n    },\n    flush: function () {\n      controllerByShadowRoot.forEach(function (_a) {\n        var flush = _a.flush;\n        return flush();\n      });\n    }\n  };\n  return shadowRootsController;\n};","map":{"version":3,"names":["trackInput","trackMutation","trackScroll","initShadowRootsController","configuration","callback","elementsScrollPositions","controllerByShadowRoot","Map","shadowRootsController","addShadowRoot","shadowRoot","has","mutationTracker","inputTracker","scrollTracker","set","flush","stop","removeShadowRoot","entry","get","delete","forEach","_a"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\record\\shadowRootsController.ts"],"sourcesContent":["import type { RumConfiguration } from '@datadog/browser-rum-core'\nimport type { BrowserIncrementalSnapshotRecord } from '../../types'\nimport { trackInput, trackMutation, trackScroll } from './trackers'\nimport type { ElementsScrollPositions } from './elementsScrollPositions'\n\ninterface ShadowRootController {\n  stop: () => void\n  flush: () => void\n}\n\nexport type ShadowRootCallBack = (shadowRoot: ShadowRoot) => void\n\nexport interface ShadowRootsController {\n  addShadowRoot: ShadowRootCallBack\n  removeShadowRoot: ShadowRootCallBack\n  stop: () => void\n  flush: () => void\n}\n\nexport const initShadowRootsController = (\n  configuration: RumConfiguration,\n  callback: (record: BrowserIncrementalSnapshotRecord) => void,\n  elementsScrollPositions: ElementsScrollPositions\n): ShadowRootsController => {\n  const controllerByShadowRoot = new Map<ShadowRoot, ShadowRootController>()\n\n  const shadowRootsController: ShadowRootsController = {\n    addShadowRoot: (shadowRoot: ShadowRoot) => {\n      if (controllerByShadowRoot.has(shadowRoot)) {\n        return\n      }\n      const mutationTracker = trackMutation(callback, configuration, shadowRootsController, shadowRoot)\n      // The change event does not bubble up across the shadow root, we have to listen on the shadow root\n      const inputTracker = trackInput(configuration, callback, shadowRoot)\n      // The scroll event does not bubble up across the shadow root, we have to listen on the shadow root\n      const scrollTracker = trackScroll(configuration, callback, elementsScrollPositions, shadowRoot)\n      controllerByShadowRoot.set(shadowRoot, {\n        flush: () => mutationTracker.flush(),\n        stop: () => {\n          mutationTracker.stop()\n          inputTracker.stop()\n          scrollTracker.stop()\n        },\n      })\n    },\n    removeShadowRoot: (shadowRoot: ShadowRoot) => {\n      const entry = controllerByShadowRoot.get(shadowRoot)\n      if (!entry) {\n        // unidentified root cause: observed in some cases with shadow DOM added by browser extensions\n        return\n      }\n      entry.stop()\n      controllerByShadowRoot.delete(shadowRoot)\n    },\n    stop: () => {\n      controllerByShadowRoot.forEach(({ stop }) => stop())\n    },\n    flush: () => {\n      controllerByShadowRoot.forEach(({ flush }) => flush())\n    },\n  }\n  return shadowRootsController\n}\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,aAAa,EAAEC,WAAW,QAAQ,YAAY;AAiBnE,OAAO,IAAMC,yBAAyB,GAAG,SAAAA,CACvCC,aAA+B,EAC/BC,QAA4D,EAC5DC,uBAAgD;EAEhD,IAAMC,sBAAsB,GAAG,IAAIC,GAAG,EAAoC;EAE1E,IAAMC,qBAAqB,GAA0B;IACnDC,aAAa,EAAE,SAAAA,CAACC,UAAsB;MACpC,IAAIJ,sBAAsB,CAACK,GAAG,CAACD,UAAU,CAAC,EAAE;QAC1C;MACF;MACA,IAAME,eAAe,GAAGZ,aAAa,CAACI,QAAQ,EAAED,aAAa,EAAEK,qBAAqB,EAAEE,UAAU,CAAC;MACjG;MACA,IAAMG,YAAY,GAAGd,UAAU,CAACI,aAAa,EAAEC,QAAQ,EAAEM,UAAU,CAAC;MACpE;MACA,IAAMI,aAAa,GAAGb,WAAW,CAACE,aAAa,EAAEC,QAAQ,EAAEC,uBAAuB,EAAEK,UAAU,CAAC;MAC/FJ,sBAAsB,CAACS,GAAG,CAACL,UAAU,EAAE;QACrCM,KAAK,EAAE,SAAAA,CAAA;UAAM,OAAAJ,eAAe,CAACI,KAAK,EAAE;QAAvB,CAAuB;QACpCC,IAAI,EAAE,SAAAA,CAAA;UACJL,eAAe,CAACK,IAAI,EAAE;UACtBJ,YAAY,CAACI,IAAI,EAAE;UACnBH,aAAa,CAACG,IAAI,EAAE;QACtB;OACD,CAAC;IACJ,CAAC;IACDC,gBAAgB,EAAE,SAAAA,CAACR,UAAsB;MACvC,IAAMS,KAAK,GAAGb,sBAAsB,CAACc,GAAG,CAACV,UAAU,CAAC;MACpD,IAAI,CAACS,KAAK,EAAE;QACV;QACA;MACF;MACAA,KAAK,CAACF,IAAI,EAAE;MACZX,sBAAsB,CAACe,MAAM,CAACX,UAAU,CAAC;IAC3C,CAAC;IACDO,IAAI,EAAE,SAAAA,CAAA;MACJX,sBAAsB,CAACgB,OAAO,CAAC,UAACC,EAAQ;YAANN,IAAI,GAAAM,EAAA,CAAAN,IAAA;QAAO,OAAAA,IAAI,EAAE;MAAN,CAAM,CAAC;IACtD,CAAC;IACDD,KAAK,EAAE,SAAAA,CAAA;MACLV,sBAAsB,CAACgB,OAAO,CAAC,UAACC,EAAS;YAAPP,KAAK,GAAAO,EAAA,CAAAP,KAAA;QAAO,OAAAA,KAAK,EAAE;MAAP,CAAO,CAAC;IACxD;GACD;EACD,OAAOR,qBAAqB;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}