{"ast":null,"code":"import { startsWith } from '@datadog/browser-core';\nimport { STABLE_ATTRIBUTES, isLongDataUrl, sanitizeDataUrl } from '@datadog/browser-rum-core';\nimport { NodePrivacyLevel, PRIVACY_ATTR_NAME, CENSORED_STRING_MARK, CENSORED_IMG_MARK } from '../../../constants';\nimport { censoredImageForSize } from './serializationUtils';\nexport function serializeAttribute(element, nodePrivacyLevel, attributeName, configuration) {\n  if (nodePrivacyLevel === NodePrivacyLevel.HIDDEN) {\n    // dup condition for direct access case\n    return null;\n  }\n  var attributeValue = element.getAttribute(attributeName);\n  if (nodePrivacyLevel === NodePrivacyLevel.MASK && attributeName !== PRIVACY_ATTR_NAME && !STABLE_ATTRIBUTES.includes(attributeName) && attributeName !== configuration.actionNameAttribute) {\n    var tagName = element.tagName;\n    switch (attributeName) {\n      // Mask Attribute text content\n      case 'title':\n      case 'alt':\n      case 'placeholder':\n        return CENSORED_STRING_MARK;\n    }\n    // mask image URLs\n    if (tagName === 'IMG' && (attributeName === 'src' || attributeName === 'srcset')) {\n      // generate image with similar dimension than the original to have the same rendering behaviour\n      var image = element;\n      if (image.naturalWidth > 0) {\n        return censoredImageForSize(image.naturalWidth, image.naturalHeight);\n      }\n      var _a = element.getBoundingClientRect(),\n        width = _a.width,\n        height = _a.height;\n      if (width > 0 || height > 0) {\n        return censoredImageForSize(width, height);\n      }\n      // if we can't get the image size, fallback to the censored image\n      return CENSORED_IMG_MARK;\n    }\n    // mask source URLs\n    if (tagName === 'SOURCE' && (attributeName === 'src' || attributeName === 'srcset')) {\n      return CENSORED_IMG_MARK;\n    }\n    // mask <a> URLs\n    if (tagName === 'A' && attributeName === 'href') {\n      return CENSORED_STRING_MARK;\n    }\n    // mask data-* attributes\n    if (attributeValue && startsWith(attributeName, 'data-')) {\n      // Exception: it's safe to reveal the `${PRIVACY_ATTR_NAME}` attr\n      return CENSORED_STRING_MARK;\n    }\n    // mask iframe srcdoc\n    if (tagName === 'IFRAME' && attributeName === 'srcdoc') {\n      return CENSORED_STRING_MARK;\n    }\n  }\n  if (!attributeValue || typeof attributeValue !== 'string') {\n    return attributeValue;\n  }\n  // Minimum Fix for customer.\n  if (isLongDataUrl(attributeValue)) {\n    return sanitizeDataUrl(attributeValue);\n  }\n  return attributeValue;\n}","map":{"version":3,"names":["startsWith","STABLE_ATTRIBUTES","isLongDataUrl","sanitizeDataUrl","NodePrivacyLevel","PRIVACY_ATTR_NAME","CENSORED_STRING_MARK","CENSORED_IMG_MARK","censoredImageForSize","serializeAttribute","element","nodePrivacyLevel","attributeName","configuration","HIDDEN","attributeValue","getAttribute","MASK","includes","actionNameAttribute","tagName","image","naturalWidth","naturalHeight","_a","getBoundingClientRect","width","height"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\record\\serialization\\serializeAttribute.ts"],"sourcesContent":["import { startsWith } from '@datadog/browser-core'\nimport { STABLE_ATTRIBUTES, isLongDataUrl, sanitizeDataUrl } from '@datadog/browser-rum-core'\nimport type { RumConfiguration } from '@datadog/browser-rum-core'\nimport { NodePrivacyLevel, PRIVACY_ATTR_NAME, CENSORED_STRING_MARK, CENSORED_IMG_MARK } from '../../../constants'\nimport { censoredImageForSize } from './serializationUtils'\n\nexport function serializeAttribute(\n  element: Element,\n  nodePrivacyLevel: NodePrivacyLevel,\n  attributeName: string,\n  configuration: RumConfiguration\n): string | number | boolean | null {\n  if (nodePrivacyLevel === NodePrivacyLevel.HIDDEN) {\n    // dup condition for direct access case\n    return null\n  }\n  const attributeValue = element.getAttribute(attributeName)\n  if (\n    nodePrivacyLevel === NodePrivacyLevel.MASK &&\n    attributeName !== PRIVACY_ATTR_NAME &&\n    !STABLE_ATTRIBUTES.includes(attributeName) &&\n    attributeName !== configuration.actionNameAttribute\n  ) {\n    const tagName = element.tagName\n\n    switch (attributeName) {\n      // Mask Attribute text content\n      case 'title':\n      case 'alt':\n      case 'placeholder':\n        return CENSORED_STRING_MARK\n    }\n\n    // mask image URLs\n    if (tagName === 'IMG' && (attributeName === 'src' || attributeName === 'srcset')) {\n      // generate image with similar dimension than the original to have the same rendering behaviour\n      const image = element as HTMLImageElement\n      if (image.naturalWidth > 0) {\n        return censoredImageForSize(image.naturalWidth, image.naturalHeight)\n      }\n      const { width, height } = element.getBoundingClientRect()\n      if (width > 0 || height > 0) {\n        return censoredImageForSize(width, height)\n      }\n      // if we can't get the image size, fallback to the censored image\n      return CENSORED_IMG_MARK\n    }\n\n    // mask source URLs\n    if (tagName === 'SOURCE' && (attributeName === 'src' || attributeName === 'srcset')) {\n      return CENSORED_IMG_MARK\n    }\n\n    // mask <a> URLs\n    if (tagName === 'A' && attributeName === 'href') {\n      return CENSORED_STRING_MARK\n    }\n\n    // mask data-* attributes\n    if (attributeValue && startsWith(attributeName, 'data-')) {\n      // Exception: it's safe to reveal the `${PRIVACY_ATTR_NAME}` attr\n      return CENSORED_STRING_MARK\n    }\n\n    // mask iframe srcdoc\n    if (tagName === 'IFRAME' && attributeName === 'srcdoc') {\n      return CENSORED_STRING_MARK\n    }\n  }\n\n  if (!attributeValue || typeof attributeValue !== 'string') {\n    return attributeValue\n  }\n\n  // Minimum Fix for customer.\n  if (isLongDataUrl(attributeValue)) {\n    return sanitizeDataUrl(attributeValue)\n  }\n\n  return attributeValue\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,uBAAuB;AAClD,SAASC,iBAAiB,EAAEC,aAAa,EAAEC,eAAe,QAAQ,2BAA2B;AAE7F,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,oBAAoB,EAAEC,iBAAiB,QAAQ,oBAAoB;AACjH,SAASC,oBAAoB,QAAQ,sBAAsB;AAE3D,OAAM,SAAUC,kBAAkBA,CAChCC,OAAgB,EAChBC,gBAAkC,EAClCC,aAAqB,EACrBC,aAA+B;EAE/B,IAAIF,gBAAgB,KAAKP,gBAAgB,CAACU,MAAM,EAAE;IAChD;IACA,OAAO,IAAI;EACb;EACA,IAAMC,cAAc,GAAGL,OAAO,CAACM,YAAY,CAACJ,aAAa,CAAC;EAC1D,IACED,gBAAgB,KAAKP,gBAAgB,CAACa,IAAI,IAC1CL,aAAa,KAAKP,iBAAiB,IACnC,CAACJ,iBAAiB,CAACiB,QAAQ,CAACN,aAAa,CAAC,IAC1CA,aAAa,KAAKC,aAAa,CAACM,mBAAmB,EACnD;IACA,IAAMC,OAAO,GAAGV,OAAO,CAACU,OAAO;IAE/B,QAAQR,aAAa;MACnB;MACA,KAAK,OAAO;MACZ,KAAK,KAAK;MACV,KAAK,aAAa;QAChB,OAAON,oBAAoB;IAC/B;IAEA;IACA,IAAIc,OAAO,KAAK,KAAK,KAAKR,aAAa,KAAK,KAAK,IAAIA,aAAa,KAAK,QAAQ,CAAC,EAAE;MAChF;MACA,IAAMS,KAAK,GAAGX,OAA2B;MACzC,IAAIW,KAAK,CAACC,YAAY,GAAG,CAAC,EAAE;QAC1B,OAAOd,oBAAoB,CAACa,KAAK,CAACC,YAAY,EAAED,KAAK,CAACE,aAAa,CAAC;MACtE;MACM,IAAAC,EAAA,GAAoBd,OAAO,CAACe,qBAAqB,EAAE;QAAjDC,KAAK,GAAAF,EAAA,CAAAE,KAAA;QAAEC,MAAM,GAAAH,EAAA,CAAAG,MAAoC;MACzD,IAAID,KAAK,GAAG,CAAC,IAAIC,MAAM,GAAG,CAAC,EAAE;QAC3B,OAAOnB,oBAAoB,CAACkB,KAAK,EAAEC,MAAM,CAAC;MAC5C;MACA;MACA,OAAOpB,iBAAiB;IAC1B;IAEA;IACA,IAAIa,OAAO,KAAK,QAAQ,KAAKR,aAAa,KAAK,KAAK,IAAIA,aAAa,KAAK,QAAQ,CAAC,EAAE;MACnF,OAAOL,iBAAiB;IAC1B;IAEA;IACA,IAAIa,OAAO,KAAK,GAAG,IAAIR,aAAa,KAAK,MAAM,EAAE;MAC/C,OAAON,oBAAoB;IAC7B;IAEA;IACA,IAAIS,cAAc,IAAIf,UAAU,CAACY,aAAa,EAAE,OAAO,CAAC,EAAE;MACxD;MACA,OAAON,oBAAoB;IAC7B;IAEA;IACA,IAAIc,OAAO,KAAK,QAAQ,IAAIR,aAAa,KAAK,QAAQ,EAAE;MACtD,OAAON,oBAAoB;IAC7B;EACF;EAEA,IAAI,CAACS,cAAc,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;IACzD,OAAOA,cAAc;EACvB;EAEA;EACA,IAAIb,aAAa,CAACa,cAAc,CAAC,EAAE;IACjC,OAAOZ,eAAe,CAACY,cAAc,CAAC;EACxC;EAEA,OAAOA,cAAc;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}