{"ast":null,"code":"import { BoundedBuffer, display, canUseEventBridge, displayAlreadyInitializedError, willSyntheticsInjectRum, noop, timeStampNow, clocksNow, assign, getEventBridge } from '@datadog/browser-core';\nimport { validateAndBuildRumConfiguration } from '../domain/configuration';\nexport function createPreStartStrategy(_a, getCommonContext, trackingConsentState, doStartRum) {\n  var ignoreInitIfSyntheticsWillInjectRum = _a.ignoreInitIfSyntheticsWillInjectRum,\n    startDeflateWorker = _a.startDeflateWorker;\n  var bufferApiCalls = new BoundedBuffer();\n  var firstStartViewCall;\n  var deflateWorker;\n  var cachedInitConfiguration;\n  var cachedConfiguration;\n  var trackingConsentStateSubscription = trackingConsentState.observable.subscribe(tryStartRum);\n  function tryStartRum() {\n    if (!cachedInitConfiguration || !cachedConfiguration || !trackingConsentState.isGranted()) {\n      return;\n    }\n    trackingConsentStateSubscription.unsubscribe();\n    var initialViewOptions;\n    if (cachedConfiguration.trackViewsManually) {\n      if (!firstStartViewCall) {\n        return;\n      }\n      // An initial view is always created when starting RUM.\n      // When tracking views automatically, any startView call before RUM start creates an extra\n      // view.\n      // When tracking views manually, we use the ViewOptions from the first startView call as the\n      // initial view options, and we remove the actual startView call so we don't create an extra\n      // view.\n      bufferApiCalls.remove(firstStartViewCall.callback);\n      initialViewOptions = firstStartViewCall.options;\n    }\n    var startRumResult = doStartRum(cachedInitConfiguration, cachedConfiguration, deflateWorker, initialViewOptions);\n    bufferApiCalls.drain(startRumResult);\n  }\n  return {\n    init: function (initConfiguration) {\n      if (!initConfiguration) {\n        display.error('Missing configuration');\n        return;\n      }\n      var eventBridgeAvailable = canUseEventBridge();\n      if (eventBridgeAvailable) {\n        initConfiguration = overrideInitConfigurationForBridge(initConfiguration);\n      }\n      // Expose the initial configuration regardless of initialization success.\n      cachedInitConfiguration = initConfiguration;\n      if (cachedConfiguration) {\n        displayAlreadyInitializedError('DD_RUM', initConfiguration);\n        return;\n      }\n      // If we are in a Synthetics test configured to automatically inject a RUM instance, we want\n      // to completely discard the customer application RUM instance by ignoring their init() call.\n      // But, we should not ignore the init() call from the Synthetics-injected RUM instance, so the\n      // internal `ignoreInitIfSyntheticsWillInjectRum` option is here to bypass this condition.\n      if (ignoreInitIfSyntheticsWillInjectRum && willSyntheticsInjectRum()) {\n        return;\n      }\n      var configuration = validateAndBuildRumConfiguration(initConfiguration);\n      if (!configuration) {\n        return;\n      }\n      if (!eventBridgeAvailable && !configuration.sessionStoreStrategyType) {\n        display.warn('No storage available for session. We will not send any data.');\n        return;\n      }\n      if (configuration.compressIntakeRequests && !eventBridgeAvailable && startDeflateWorker) {\n        deflateWorker = startDeflateWorker(configuration, 'Datadog RUM',\n        // Worker initialization can fail asynchronously, especially in Firefox where even CSP\n        // issues are reported asynchronously. For now, the SDK will continue its execution even if\n        // data won't be sent to Datadog. We could improve this behavior in the future.\n        noop);\n        if (!deflateWorker) {\n          // `startDeflateWorker` should have logged an error message explaining the issue\n          return;\n        }\n      }\n      cachedConfiguration = configuration;\n      trackingConsentState.tryToInit(configuration.trackingConsent);\n      tryStartRum();\n    },\n    get initConfiguration() {\n      return cachedInitConfiguration;\n    },\n    getInternalContext: noop,\n    stopSession: noop,\n    addTiming: function (name, time) {\n      if (time === void 0) {\n        time = timeStampNow();\n      }\n      bufferApiCalls.add(function (startRumResult) {\n        return startRumResult.addTiming(name, time);\n      });\n    },\n    startView: function (options, startClocks) {\n      if (startClocks === void 0) {\n        startClocks = clocksNow();\n      }\n      var callback = function (startRumResult) {\n        startRumResult.startView(options, startClocks);\n      };\n      bufferApiCalls.add(callback);\n      if (!firstStartViewCall) {\n        firstStartViewCall = {\n          options: options,\n          callback: callback\n        };\n        tryStartRum();\n      }\n    },\n    addAction: function (action, commonContext) {\n      if (commonContext === void 0) {\n        commonContext = getCommonContext();\n      }\n      bufferApiCalls.add(function (startRumResult) {\n        return startRumResult.addAction(action, commonContext);\n      });\n    },\n    addError: function (providedError, commonContext) {\n      if (commonContext === void 0) {\n        commonContext = getCommonContext();\n      }\n      bufferApiCalls.add(function (startRumResult) {\n        return startRumResult.addError(providedError, commonContext);\n      });\n    },\n    addFeatureFlagEvaluation: function (key, value) {\n      bufferApiCalls.add(function (startRumResult) {\n        return startRumResult.addFeatureFlagEvaluation(key, value);\n      });\n    },\n    startDurationVital: function (vitalStart) {\n      bufferApiCalls.add(function (startRumResult) {\n        return startRumResult.startDurationVital(vitalStart);\n      });\n    },\n    stopDurationVital: function (vitalStart) {\n      bufferApiCalls.add(function (startRumResult) {\n        return startRumResult.stopDurationVital(vitalStart);\n      });\n    }\n  };\n}\nfunction overrideInitConfigurationForBridge(initConfiguration) {\n  var _a, _b;\n  return assign({}, initConfiguration, {\n    applicationId: '00000000-aaaa-0000-aaaa-000000000000',\n    clientToken: 'empty',\n    sessionSampleRate: 100,\n    defaultPrivacyLevel: (_a = initConfiguration.defaultPrivacyLevel) !== null && _a !== void 0 ? _a : (_b = getEventBridge()) === null || _b === void 0 ? void 0 : _b.getPrivacyLevel()\n  });\n}","map":{"version":3,"names":["BoundedBuffer","display","canUseEventBridge","displayAlreadyInitializedError","willSyntheticsInjectRum","noop","timeStampNow","clocksNow","assign","getEventBridge","validateAndBuildRumConfiguration","createPreStartStrategy","_a","getCommonContext","trackingConsentState","doStartRum","ignoreInitIfSyntheticsWillInjectRum","startDeflateWorker","bufferApiCalls","firstStartViewCall","deflateWorker","cachedInitConfiguration","cachedConfiguration","trackingConsentStateSubscription","observable","subscribe","tryStartRum","isGranted","unsubscribe","initialViewOptions","trackViewsManually","remove","callback","options","startRumResult","drain","init","initConfiguration","error","eventBridgeAvailable","overrideInitConfigurationForBridge","configuration","sessionStoreStrategyType","warn","compressIntakeRequests","tryToInit","trackingConsent","getInternalContext","stopSession","addTiming","name","time","add","startView","startClocks","addAction","action","commonContext","addError","providedError","addFeatureFlagEvaluation","key","value","startDurationVital","vitalStart","stopDurationVital","applicationId","clientToken","sessionSampleRate","defaultPrivacyLevel","_b","getPrivacyLevel"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum-core\\src\\boot\\preStartRum.ts"],"sourcesContent":["import {\n  BoundedBuffer,\n  display,\n  canUseEventBridge,\n  displayAlreadyInitializedError,\n  willSyntheticsInjectRum,\n  noop,\n  timeStampNow,\n  clocksNow,\n  assign,\n  getEventBridge,\n} from '@datadog/browser-core'\nimport type { TrackingConsentState, DeflateWorker } from '@datadog/browser-core'\nimport {\n  validateAndBuildRumConfiguration,\n  type RumConfiguration,\n  type RumInitConfiguration,\n} from '../domain/configuration'\nimport type { CommonContext } from '../domain/contexts/commonContext'\nimport type { ViewOptions } from '../domain/view/trackViews'\nimport type { RumPublicApiOptions, Strategy } from './rumPublicApi'\nimport type { StartRumResult } from './startRum'\n\nexport function createPreStartStrategy(\n  { ignoreInitIfSyntheticsWillInjectRum, startDeflateWorker }: RumPublicApiOptions,\n  getCommonContext: () => CommonContext,\n  trackingConsentState: TrackingConsentState,\n  doStartRum: (\n    initConfiguration: RumInitConfiguration,\n    configuration: RumConfiguration,\n    deflateWorker: DeflateWorker | undefined,\n    initialViewOptions?: ViewOptions\n  ) => StartRumResult\n): Strategy {\n  const bufferApiCalls = new BoundedBuffer<StartRumResult>()\n  let firstStartViewCall:\n    | { options: ViewOptions | undefined; callback: (startRumResult: StartRumResult) => void }\n    | undefined\n  let deflateWorker: DeflateWorker | undefined\n\n  let cachedInitConfiguration: RumInitConfiguration | undefined\n  let cachedConfiguration: RumConfiguration | undefined\n\n  const trackingConsentStateSubscription = trackingConsentState.observable.subscribe(tryStartRum)\n\n  function tryStartRum() {\n    if (!cachedInitConfiguration || !cachedConfiguration || !trackingConsentState.isGranted()) {\n      return\n    }\n\n    trackingConsentStateSubscription.unsubscribe()\n\n    let initialViewOptions: ViewOptions | undefined\n\n    if (cachedConfiguration.trackViewsManually) {\n      if (!firstStartViewCall) {\n        return\n      }\n      // An initial view is always created when starting RUM.\n      // When tracking views automatically, any startView call before RUM start creates an extra\n      // view.\n      // When tracking views manually, we use the ViewOptions from the first startView call as the\n      // initial view options, and we remove the actual startView call so we don't create an extra\n      // view.\n      bufferApiCalls.remove(firstStartViewCall.callback)\n      initialViewOptions = firstStartViewCall.options\n    }\n\n    const startRumResult = doStartRum(cachedInitConfiguration, cachedConfiguration, deflateWorker, initialViewOptions)\n\n    bufferApiCalls.drain(startRumResult)\n  }\n\n  return {\n    init(initConfiguration) {\n      if (!initConfiguration) {\n        display.error('Missing configuration')\n        return\n      }\n\n      const eventBridgeAvailable = canUseEventBridge()\n      if (eventBridgeAvailable) {\n        initConfiguration = overrideInitConfigurationForBridge(initConfiguration)\n      }\n\n      // Expose the initial configuration regardless of initialization success.\n      cachedInitConfiguration = initConfiguration\n\n      if (cachedConfiguration) {\n        displayAlreadyInitializedError('DD_RUM', initConfiguration)\n        return\n      }\n\n      // If we are in a Synthetics test configured to automatically inject a RUM instance, we want\n      // to completely discard the customer application RUM instance by ignoring their init() call.\n      // But, we should not ignore the init() call from the Synthetics-injected RUM instance, so the\n      // internal `ignoreInitIfSyntheticsWillInjectRum` option is here to bypass this condition.\n      if (ignoreInitIfSyntheticsWillInjectRum && willSyntheticsInjectRum()) {\n        return\n      }\n\n      const configuration = validateAndBuildRumConfiguration(initConfiguration)\n      if (!configuration) {\n        return\n      }\n\n      if (!eventBridgeAvailable && !configuration.sessionStoreStrategyType) {\n        display.warn('No storage available for session. We will not send any data.')\n        return\n      }\n\n      if (configuration.compressIntakeRequests && !eventBridgeAvailable && startDeflateWorker) {\n        deflateWorker = startDeflateWorker(\n          configuration,\n          'Datadog RUM',\n          // Worker initialization can fail asynchronously, especially in Firefox where even CSP\n          // issues are reported asynchronously. For now, the SDK will continue its execution even if\n          // data won't be sent to Datadog. We could improve this behavior in the future.\n          noop\n        )\n        if (!deflateWorker) {\n          // `startDeflateWorker` should have logged an error message explaining the issue\n          return\n        }\n      }\n\n      cachedConfiguration = configuration\n      trackingConsentState.tryToInit(configuration.trackingConsent)\n      tryStartRum()\n    },\n\n    get initConfiguration() {\n      return cachedInitConfiguration\n    },\n\n    getInternalContext: noop as () => undefined,\n\n    stopSession: noop,\n\n    addTiming(name, time = timeStampNow()) {\n      bufferApiCalls.add((startRumResult) => startRumResult.addTiming(name, time))\n    },\n\n    startView(options, startClocks = clocksNow()) {\n      const callback = (startRumResult: StartRumResult) => {\n        startRumResult.startView(options, startClocks)\n      }\n      bufferApiCalls.add(callback)\n\n      if (!firstStartViewCall) {\n        firstStartViewCall = { options, callback }\n        tryStartRum()\n      }\n    },\n\n    addAction(action, commonContext = getCommonContext()) {\n      bufferApiCalls.add((startRumResult) => startRumResult.addAction(action, commonContext))\n    },\n\n    addError(providedError, commonContext = getCommonContext()) {\n      bufferApiCalls.add((startRumResult) => startRumResult.addError(providedError, commonContext))\n    },\n\n    addFeatureFlagEvaluation(key, value) {\n      bufferApiCalls.add((startRumResult) => startRumResult.addFeatureFlagEvaluation(key, value))\n    },\n\n    startDurationVital(vitalStart) {\n      bufferApiCalls.add((startRumResult) => startRumResult.startDurationVital(vitalStart))\n    },\n\n    stopDurationVital(vitalStart) {\n      bufferApiCalls.add((startRumResult) => startRumResult.stopDurationVital(vitalStart))\n    },\n  }\n}\n\nfunction overrideInitConfigurationForBridge(initConfiguration: RumInitConfiguration): RumInitConfiguration {\n  return assign({}, initConfiguration, {\n    applicationId: '00000000-aaaa-0000-aaaa-000000000000',\n    clientToken: 'empty',\n    sessionSampleRate: 100,\n    defaultPrivacyLevel: initConfiguration.defaultPrivacyLevel ?? getEventBridge()?.getPrivacyLevel(),\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}