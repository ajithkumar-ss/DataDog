{"ast":null,"code":"import { display } from '../../tools/display';\nimport { getType } from '../../tools/utils/typeUtils';\nimport { assign } from '../../tools/utils/polyfills';\n/**\n * Clone input data and ensure known user properties (id, name, email)\n * are strings, as defined here:\n * https://docs.datadoghq.com/logs/log_configuration/attributes_naming_convention/#user-related-attributes\n */\nexport function sanitizeUser(newUser) {\n  // We shallow clone only to prevent mutation of user data.\n  var user = assign({}, newUser);\n  var keys = ['id', 'name', 'email'];\n  keys.forEach(function (key) {\n    if (key in user) {\n      user[key] = String(user[key]);\n    }\n  });\n  return user;\n}\n/**\n * Simple check to ensure user is valid\n */\nexport function checkUser(newUser) {\n  var isValid = getType(newUser) === 'object';\n  if (!isValid) {\n    display.error('Unsupported user:', newUser);\n  }\n  return isValid;\n}","map":{"version":3,"names":["display","getType","assign","sanitizeUser","newUser","user","keys","forEach","key","String","checkUser","isValid","error"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\user\\user.ts"],"sourcesContent":["import type { Context } from '../../tools/serialisation/context'\nimport { display } from '../../tools/display'\nimport { getType } from '../../tools/utils/typeUtils'\nimport { assign } from '../../tools/utils/polyfills'\nimport type { User } from './user.types'\n\n/**\n * Clone input data and ensure known user properties (id, name, email)\n * are strings, as defined here:\n * https://docs.datadoghq.com/logs/log_configuration/attributes_naming_convention/#user-related-attributes\n */\nexport function sanitizeUser(newUser: Context): Context {\n  // We shallow clone only to prevent mutation of user data.\n  const user = assign({}, newUser)\n  const keys = ['id', 'name', 'email']\n  keys.forEach((key) => {\n    if (key in user) {\n      user[key] = String(user[key])\n    }\n  })\n  return user\n}\n\n/**\n * Simple check to ensure user is valid\n */\nexport function checkUser(newUser: User): boolean {\n  const isValid = getType(newUser) === 'object'\n  if (!isValid) {\n    display.error('Unsupported user:', newUser)\n  }\n  return isValid\n}\n"],"mappings":"AACA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,OAAO,QAAQ,6BAA6B;AACrD,SAASC,MAAM,QAAQ,6BAA6B;AAGpD;;;;;AAKA,OAAM,SAAUC,YAAYA,CAACC,OAAgB;EAC3C;EACA,IAAMC,IAAI,GAAGH,MAAM,CAAC,EAAE,EAAEE,OAAO,CAAC;EAChC,IAAME,IAAI,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC;EACpCA,IAAI,CAACC,OAAO,CAAC,UAACC,GAAG;IACf,IAAIA,GAAG,IAAIH,IAAI,EAAE;MACfA,IAAI,CAACG,GAAG,CAAC,GAAGC,MAAM,CAACJ,IAAI,CAACG,GAAG,CAAC,CAAC;IAC/B;EACF,CAAC,CAAC;EACF,OAAOH,IAAI;AACb;AAEA;;;AAGA,OAAM,SAAUK,SAASA,CAACN,OAAa;EACrC,IAAMO,OAAO,GAAGV,OAAO,CAACG,OAAO,CAAC,KAAK,QAAQ;EAC7C,IAAI,CAACO,OAAO,EAAE;IACZX,OAAO,CAACY,KAAK,CAAC,mBAAmB,EAAER,OAAO,CAAC;EAC7C;EACA,OAAOO,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}