{"ast":null,"code":"import { clocksNow, ErrorSource, initReportObservable, RawReportType } from '@datadog/browser-core';\nexport function trackReportError(configuration, errorObservable) {\n  var subscription = initReportObservable(configuration, [RawReportType.cspViolation, RawReportType.intervention]).subscribe(function (reportError) {\n    var rawError = {\n      startClocks: clocksNow(),\n      message: reportError.message,\n      stack: reportError.stack,\n      type: reportError.subtype,\n      source: ErrorSource.REPORT,\n      handling: \"unhandled\" /* ErrorHandling.UNHANDLED */,\n      originalError: reportError.originalReport\n    };\n    if (reportError.originalReport.type === 'securitypolicyviolation') {\n      rawError.csp = {\n        disposition: reportError.originalReport.disposition\n      };\n    }\n    return errorObservable.notify(rawError);\n  });\n  return {\n    stop: function () {\n      subscription.unsubscribe();\n    }\n  };\n}","map":{"version":3,"names":["clocksNow","ErrorSource","initReportObservable","RawReportType","trackReportError","configuration","errorObservable","subscription","cspViolation","intervention","subscribe","reportError","rawError","startClocks","message","stack","type","subtype","source","REPORT","handling","originalError","originalReport","csp","disposition","notify","stop","unsubscribe"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\error\\trackReportError.ts"],"sourcesContent":["import type { Observable, RawError } from '@datadog/browser-core'\nimport { clocksNow, ErrorHandling, ErrorSource, initReportObservable, RawReportType } from '@datadog/browser-core'\nimport type { RumConfiguration } from '../configuration'\n\nexport function trackReportError(configuration: RumConfiguration, errorObservable: Observable<RawError>) {\n  const subscription = initReportObservable(configuration, [\n    RawReportType.cspViolation,\n    RawReportType.intervention,\n  ]).subscribe((reportError) => {\n    const rawError: RawError = {\n      startClocks: clocksNow(),\n      message: reportError.message,\n      stack: reportError.stack,\n      type: reportError.subtype,\n      source: ErrorSource.REPORT,\n      handling: ErrorHandling.UNHANDLED,\n      originalError: reportError.originalReport,\n    }\n\n    if (reportError.originalReport.type === 'securitypolicyviolation') {\n      rawError.csp = {\n        disposition: reportError.originalReport.disposition,\n      }\n    }\n\n    return errorObservable.notify(rawError)\n  })\n\n  return {\n    stop: () => {\n      subscription.unsubscribe()\n    },\n  }\n}\n"],"mappings":"AACA,SAASA,SAAS,EAAiBC,WAAW,EAAEC,oBAAoB,EAAEC,aAAa,QAAQ,uBAAuB;AAGlH,OAAM,SAAUC,gBAAgBA,CAACC,aAA+B,EAAEC,eAAqC;EACrG,IAAMC,YAAY,GAAGL,oBAAoB,CAACG,aAAa,EAAE,CACvDF,aAAa,CAACK,YAAY,EAC1BL,aAAa,CAACM,YAAY,CAC3B,CAAC,CAACC,SAAS,CAAC,UAACC,WAAW;IACvB,IAAMC,QAAQ,GAAa;MACzBC,WAAW,EAAEb,SAAS,EAAE;MACxBc,OAAO,EAAEH,WAAW,CAACG,OAAO;MAC5BC,KAAK,EAAEJ,WAAW,CAACI,KAAK;MACxBC,IAAI,EAAEL,WAAW,CAACM,OAAO;MACzBC,MAAM,EAAEjB,WAAW,CAACkB,MAAM;MAC1BC,QAAQ;MACRC,aAAa,EAAEV,WAAW,CAACW;KAC5B;IAED,IAAIX,WAAW,CAACW,cAAc,CAACN,IAAI,KAAK,yBAAyB,EAAE;MACjEJ,QAAQ,CAACW,GAAG,GAAG;QACbC,WAAW,EAAEb,WAAW,CAACW,cAAc,CAACE;OACzC;IACH;IAEA,OAAOlB,eAAe,CAACmB,MAAM,CAACb,QAAQ,CAAC;EACzC,CAAC,CAAC;EAEF,OAAO;IACLc,IAAI,EAAE,SAAAA,CAAA;MACJnB,YAAY,CAACoB,WAAW,EAAE;IAC5B;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}