{"ast":null,"code":"import { getEventBridge } from '@datadog/browser-core';\nexport function startRecordBridge(viewContexts) {\n  var bridge = getEventBridge();\n  return {\n    addRecord: function (record) {\n      // Get the current active view, not at the time of the record, aligning with the segment logic.\n      // This approach could potentially associate the record to an incorrect view, in case the record date is in the past (e.g. frustration records).\n      // However the risk is minimal. We could address the issue when potential negative impact are identified.\n      var view = viewContexts.findView();\n      bridge.send('record', record, view.id);\n    }\n  };\n}","map":{"version":3,"names":["getEventBridge","startRecordBridge","viewContexts","bridge","addRecord","record","view","findView","send","id"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\startRecordBridge.ts"],"sourcesContent":["import { getEventBridge } from '@datadog/browser-core'\nimport type { ViewContexts } from '@datadog/browser-rum-core'\nimport type { BrowserRecord } from '../types'\n\nexport function startRecordBridge(viewContexts: ViewContexts) {\n  const bridge = getEventBridge<'record', BrowserRecord>()!\n\n  return {\n    addRecord: (record: BrowserRecord) => {\n      // Get the current active view, not at the time of the record, aligning with the segment logic.\n      // This approach could potentially associate the record to an incorrect view, in case the record date is in the past (e.g. frustration records).\n      // However the risk is minimal. We could address the issue when potential negative impact are identified.\n      const view = viewContexts.findView()!\n      bridge.send('record', record, view.id)\n    },\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,uBAAuB;AAItD,OAAM,SAAUC,iBAAiBA,CAACC,YAA0B;EAC1D,IAAMC,MAAM,GAAGH,cAAc,EAA4B;EAEzD,OAAO;IACLI,SAAS,EAAE,SAAAA,CAACC,MAAqB;MAC/B;MACA;MACA;MACA,IAAMC,IAAI,GAAGJ,YAAY,CAACK,QAAQ,EAAG;MACrCJ,MAAM,CAACK,IAAI,CAAC,QAAQ,EAAEH,MAAM,EAAEC,IAAI,CAACG,EAAE,CAAC;IACxC;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}