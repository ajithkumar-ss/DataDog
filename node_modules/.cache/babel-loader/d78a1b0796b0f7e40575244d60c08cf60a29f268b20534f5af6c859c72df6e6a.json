{"ast":null,"code":"import { deepClone } from '../../tools/mergeInto';\nimport { getType } from '../../tools/utils/typeUtils';\nimport { sanitize } from '../../tools/serialisation/sanitize';\nimport { Observable } from '../../tools/observable';\nexport function createContextManager(customerDataTracker) {\n  var context = {};\n  var changeObservable = new Observable();\n  var contextManager = {\n    getContext: function () {\n      return deepClone(context);\n    },\n    setContext: function (newContext) {\n      if (getType(newContext) === 'object') {\n        context = sanitize(newContext);\n        customerDataTracker.updateCustomerData(context);\n      } else {\n        contextManager.clearContext();\n      }\n      changeObservable.notify();\n    },\n    setContextProperty: function (key, property) {\n      context[key] = sanitize(property);\n      customerDataTracker.updateCustomerData(context);\n      changeObservable.notify();\n    },\n    removeContextProperty: function (key) {\n      delete context[key];\n      customerDataTracker.updateCustomerData(context);\n      changeObservable.notify();\n    },\n    clearContext: function () {\n      context = {};\n      customerDataTracker.resetCustomerData();\n      changeObservable.notify();\n    },\n    changeObservable: changeObservable\n  };\n  return contextManager;\n}","map":{"version":3,"names":["deepClone","getType","sanitize","Observable","createContextManager","customerDataTracker","context","changeObservable","contextManager","getContext","setContext","newContext","updateCustomerData","clearContext","notify","setContextProperty","key","property","removeContextProperty","resetCustomerData"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\context\\contextManager.ts"],"sourcesContent":["import { deepClone } from '../../tools/mergeInto'\nimport { getType } from '../../tools/utils/typeUtils'\nimport { sanitize } from '../../tools/serialisation/sanitize'\nimport type { Context } from '../../tools/serialisation/context'\nimport { Observable } from '../../tools/observable'\nimport type { CustomerDataTracker } from './customerDataTracker'\n\nexport type ContextManager = ReturnType<typeof createContextManager>\n\nexport function createContextManager(customerDataTracker: CustomerDataTracker) {\n  let context: Context = {}\n  const changeObservable = new Observable<void>()\n\n  const contextManager = {\n    getContext: () => deepClone(context),\n\n    setContext: (newContext: Context) => {\n      if (getType(newContext) === 'object') {\n        context = sanitize(newContext)\n        customerDataTracker.updateCustomerData(context)\n      } else {\n        contextManager.clearContext()\n      }\n      changeObservable.notify()\n    },\n\n    setContextProperty: (key: string, property: any) => {\n      context[key] = sanitize(property)\n      customerDataTracker.updateCustomerData(context)\n      changeObservable.notify()\n    },\n\n    removeContextProperty: (key: string) => {\n      delete context[key]\n      customerDataTracker.updateCustomerData(context)\n      changeObservable.notify()\n    },\n\n    clearContext: () => {\n      context = {}\n      customerDataTracker.resetCustomerData()\n      changeObservable.notify()\n    },\n\n    changeObservable,\n  }\n  return contextManager\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,uBAAuB;AACjD,SAASC,OAAO,QAAQ,6BAA6B;AACrD,SAASC,QAAQ,QAAQ,oCAAoC;AAE7D,SAASC,UAAU,QAAQ,wBAAwB;AAKnD,OAAM,SAAUC,oBAAoBA,CAACC,mBAAwC;EAC3E,IAAIC,OAAO,GAAY,EAAE;EACzB,IAAMC,gBAAgB,GAAG,IAAIJ,UAAU,EAAQ;EAE/C,IAAMK,cAAc,GAAG;IACrBC,UAAU,EAAE,SAAAA,CAAA;MAAM,OAAAT,SAAS,CAACM,OAAO,CAAC;IAAlB,CAAkB;IAEpCI,UAAU,EAAE,SAAAA,CAACC,UAAmB;MAC9B,IAAIV,OAAO,CAACU,UAAU,CAAC,KAAK,QAAQ,EAAE;QACpCL,OAAO,GAAGJ,QAAQ,CAACS,UAAU,CAAC;QAC9BN,mBAAmB,CAACO,kBAAkB,CAACN,OAAO,CAAC;MACjD,CAAC,MAAM;QACLE,cAAc,CAACK,YAAY,EAAE;MAC/B;MACAN,gBAAgB,CAACO,MAAM,EAAE;IAC3B,CAAC;IAEDC,kBAAkB,EAAE,SAAAA,CAACC,GAAW,EAAEC,QAAa;MAC7CX,OAAO,CAACU,GAAG,CAAC,GAAGd,QAAQ,CAACe,QAAQ,CAAC;MACjCZ,mBAAmB,CAACO,kBAAkB,CAACN,OAAO,CAAC;MAC/CC,gBAAgB,CAACO,MAAM,EAAE;IAC3B,CAAC;IAEDI,qBAAqB,EAAE,SAAAA,CAACF,GAAW;MACjC,OAAOV,OAAO,CAACU,GAAG,CAAC;MACnBX,mBAAmB,CAACO,kBAAkB,CAACN,OAAO,CAAC;MAC/CC,gBAAgB,CAACO,MAAM,EAAE;IAC3B,CAAC;IAEDD,YAAY,EAAE,SAAAA,CAAA;MACZP,OAAO,GAAG,EAAE;MACZD,mBAAmB,CAACc,iBAAiB,EAAE;MACvCZ,gBAAgB,CAACO,MAAM,EAAE;IAC3B,CAAC;IAEDP,gBAAgB,EAAAA;GACjB;EACD,OAAOC,cAAc;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}