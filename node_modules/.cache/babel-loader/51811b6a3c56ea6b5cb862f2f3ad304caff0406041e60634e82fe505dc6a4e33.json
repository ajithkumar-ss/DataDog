{"ast":null,"code":"import { trackFirstContentfulPaint } from './trackFirstContentfulPaint';\nimport { trackFirstInput } from './trackFirstInput';\nimport { trackNavigationTimings } from './trackNavigationTimings';\nimport { trackLargestContentfulPaint } from './trackLargestContentfulPaint';\nimport { trackFirstHidden } from './trackFirstHidden';\nexport function trackInitialViewMetrics(lifeCycle, configuration, setLoadEvent, scheduleViewUpdate) {\n  var initialViewMetrics = {};\n  var stopNavigationTracking = trackNavigationTimings(lifeCycle, function (navigationTimings) {\n    setLoadEvent(navigationTimings.loadEvent);\n    initialViewMetrics.navigationTimings = navigationTimings;\n    scheduleViewUpdate();\n  }).stop;\n  var firstHidden = trackFirstHidden(configuration);\n  var stopFCPTracking = trackFirstContentfulPaint(lifeCycle, firstHidden, function (firstContentfulPaint) {\n    initialViewMetrics.firstContentfulPaint = firstContentfulPaint;\n    scheduleViewUpdate();\n  }).stop;\n  var stopLCPTracking = trackLargestContentfulPaint(lifeCycle, configuration, firstHidden, window, function (largestContentfulPaint) {\n    initialViewMetrics.largestContentfulPaint = largestContentfulPaint;\n    scheduleViewUpdate();\n  }).stop;\n  var stopFIDTracking = trackFirstInput(lifeCycle, configuration, firstHidden, function (firstInput) {\n    initialViewMetrics.firstInput = firstInput;\n    scheduleViewUpdate();\n  }).stop;\n  function stop() {\n    stopNavigationTracking();\n    stopFCPTracking();\n    stopLCPTracking();\n    stopFIDTracking();\n    firstHidden.stop();\n  }\n  return {\n    stop: stop,\n    initialViewMetrics: initialViewMetrics\n  };\n}","map":{"version":3,"names":["trackFirstContentfulPaint","trackFirstInput","trackNavigationTimings","trackLargestContentfulPaint","trackFirstHidden","trackInitialViewMetrics","lifeCycle","configuration","setLoadEvent","scheduleViewUpdate","initialViewMetrics","stopNavigationTracking","navigationTimings","loadEvent","stop","firstHidden","stopFCPTracking","firstContentfulPaint","stopLCPTracking","window","largestContentfulPaint","stopFIDTracking","firstInput"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\view\\viewMetrics\\trackInitialViewMetrics.ts"],"sourcesContent":["import type { Duration } from '@datadog/browser-core'\nimport type { RumConfiguration } from '../../configuration'\nimport type { LifeCycle } from '../../lifeCycle'\nimport { trackFirstContentfulPaint } from './trackFirstContentfulPaint'\nimport type { FirstInput } from './trackFirstInput'\nimport { trackFirstInput } from './trackFirstInput'\nimport type { NavigationTimings } from './trackNavigationTimings'\nimport { trackNavigationTimings } from './trackNavigationTimings'\nimport type { LargestContentfulPaint } from './trackLargestContentfulPaint'\nimport { trackLargestContentfulPaint } from './trackLargestContentfulPaint'\nimport { trackFirstHidden } from './trackFirstHidden'\n\nexport interface InitialViewMetrics {\n  firstContentfulPaint?: Duration\n  navigationTimings?: NavigationTimings\n  largestContentfulPaint?: LargestContentfulPaint\n  firstInput?: FirstInput\n}\n\nexport function trackInitialViewMetrics(\n  lifeCycle: LifeCycle,\n  configuration: RumConfiguration,\n  setLoadEvent: (loadEnd: Duration) => void,\n  scheduleViewUpdate: () => void\n) {\n  const initialViewMetrics: InitialViewMetrics = {}\n\n  const { stop: stopNavigationTracking } = trackNavigationTimings(lifeCycle, (navigationTimings) => {\n    setLoadEvent(navigationTimings.loadEvent)\n    initialViewMetrics.navigationTimings = navigationTimings\n    scheduleViewUpdate()\n  })\n\n  const firstHidden = trackFirstHidden(configuration)\n  const { stop: stopFCPTracking } = trackFirstContentfulPaint(lifeCycle, firstHidden, (firstContentfulPaint) => {\n    initialViewMetrics.firstContentfulPaint = firstContentfulPaint\n    scheduleViewUpdate()\n  })\n\n  const { stop: stopLCPTracking } = trackLargestContentfulPaint(\n    lifeCycle,\n    configuration,\n    firstHidden,\n    window,\n    (largestContentfulPaint) => {\n      initialViewMetrics.largestContentfulPaint = largestContentfulPaint\n      scheduleViewUpdate()\n    }\n  )\n\n  const { stop: stopFIDTracking } = trackFirstInput(lifeCycle, configuration, firstHidden, (firstInput) => {\n    initialViewMetrics.firstInput = firstInput\n    scheduleViewUpdate()\n  })\n\n  function stop() {\n    stopNavigationTracking()\n    stopFCPTracking()\n    stopLCPTracking()\n    stopFIDTracking()\n    firstHidden.stop()\n  }\n\n  return {\n    stop,\n    initialViewMetrics,\n  }\n}\n"],"mappings":"AAGA,SAASA,yBAAyB,QAAQ,6BAA6B;AAEvE,SAASC,eAAe,QAAQ,mBAAmB;AAEnD,SAASC,sBAAsB,QAAQ,0BAA0B;AAEjE,SAASC,2BAA2B,QAAQ,+BAA+B;AAC3E,SAASC,gBAAgB,QAAQ,oBAAoB;AASrD,OAAM,SAAUC,uBAAuBA,CACrCC,SAAoB,EACpBC,aAA+B,EAC/BC,YAAyC,EACzCC,kBAA8B;EAE9B,IAAMC,kBAAkB,GAAuB,EAAE;EAEzC,IAAMC,sBAAsB,GAAKT,sBAAsB,CAACI,SAAS,EAAE,UAACM,iBAAiB;IAC3FJ,YAAY,CAACI,iBAAiB,CAACC,SAAS,CAAC;IACzCH,kBAAkB,CAACE,iBAAiB,GAAGA,iBAAiB;IACxDH,kBAAkB,EAAE;EACtB,CAAC,CAAC,CAAAK,IAJkC;EAMpC,IAAMC,WAAW,GAAGX,gBAAgB,CAACG,aAAa,CAAC;EAC3C,IAAMS,eAAe,GAAKhB,yBAAyB,CAACM,SAAS,EAAES,WAAW,EAAE,UAACE,oBAAoB;IACvGP,kBAAkB,CAACO,oBAAoB,GAAGA,oBAAoB;IAC9DR,kBAAkB,EAAE;EACtB,CAAC,CAAC,CAAAK,IAH2B;EAKrB,IAAMI,eAAe,GAAKf,2BAA2B,CAC3DG,SAAS,EACTC,aAAa,EACbQ,WAAW,EACXI,MAAM,EACN,UAACC,sBAAsB;IACrBV,kBAAkB,CAACU,sBAAsB,GAAGA,sBAAsB;IAClEX,kBAAkB,EAAE;EACtB,CAAC,CACF,CAAAK,IAT4B;EAWrB,IAAMO,eAAe,GAAKpB,eAAe,CAACK,SAAS,EAAEC,aAAa,EAAEQ,WAAW,EAAE,UAACO,UAAU;IAClGZ,kBAAkB,CAACY,UAAU,GAAGA,UAAU;IAC1Cb,kBAAkB,EAAE;EACtB,CAAC,CAAC,CAAAK,IAH2B;EAK7B,SAASA,IAAIA,CAAA;IACXH,sBAAsB,EAAE;IACxBK,eAAe,EAAE;IACjBE,eAAe,EAAE;IACjBG,eAAe,EAAE;IACjBN,WAAW,CAACD,IAAI,EAAE;EACpB;EAEA,OAAO;IACLA,IAAI,EAAAA,IAAA;IACJJ,kBAAkB,EAAAA;GACnB;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}