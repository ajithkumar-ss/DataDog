{"ast":null,"code":"/**\n * performance.interactionCount polyfill\n *\n * The interactionCount is an integer which counts the total number of distinct user interactions,\n * for which there was a unique interactionId.\n *\n * The interactionCount polyfill is an estimate based on a convention specific to Chrome. Cf: https://github.com/GoogleChrome/web-vitals/pull/213\n * This is currently not an issue as the polyfill is only used for INP which is currently only supported on Chrome.\n * Hopefully when/if other browsers will support INP, they will also implement performance.interactionCount at the same time, so we won't need that polyfill.\n *\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/main/src/lib/polyfills/interactionCountPolyfill.ts\n */\nimport { monitor } from '@datadog/browser-core';\nvar observer;\nvar interactionCountEstimate = 0;\nvar minKnownInteractionId = Infinity;\nvar maxKnownInteractionId = 0;\nexport function initInteractionCountPolyfill() {\n  if ('interactionCount' in performance || observer) {\n    return;\n  }\n  observer = new window.PerformanceObserver(monitor(function (entries) {\n    entries.getEntries().forEach(function (e) {\n      var entry = e;\n      if (entry.interactionId) {\n        minKnownInteractionId = Math.min(minKnownInteractionId, entry.interactionId);\n        maxKnownInteractionId = Math.max(maxKnownInteractionId, entry.interactionId);\n        interactionCountEstimate = (maxKnownInteractionId - minKnownInteractionId) / 7 + 1;\n      }\n    });\n  }));\n  observer.observe({\n    type: 'event',\n    buffered: true,\n    durationThreshold: 0\n  });\n}\n/**\n * Returns the `interactionCount` value using the native API (if available)\n * or the polyfill estimate in this module.\n */\nexport var getInteractionCount = function () {\n  return observer ? interactionCountEstimate : window.performance.interactionCount || 0;\n};","map":{"version":3,"names":["monitor","observer","interactionCountEstimate","minKnownInteractionId","Infinity","maxKnownInteractionId","initInteractionCountPolyfill","performance","window","PerformanceObserver","entries","getEntries","forEach","e","entry","interactionId","Math","min","max","observe","type","buffered","durationThreshold","getInteractionCount","interactionCount"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\view\\viewMetrics\\interactionCountPolyfill.ts"],"sourcesContent":["/**\n * performance.interactionCount polyfill\n *\n * The interactionCount is an integer which counts the total number of distinct user interactions,\n * for which there was a unique interactionId.\n *\n * The interactionCount polyfill is an estimate based on a convention specific to Chrome. Cf: https://github.com/GoogleChrome/web-vitals/pull/213\n * This is currently not an issue as the polyfill is only used for INP which is currently only supported on Chrome.\n * Hopefully when/if other browsers will support INP, they will also implement performance.interactionCount at the same time, so we won't need that polyfill.\n *\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/main/src/lib/polyfills/interactionCountPolyfill.ts\n */\n\nimport { monitor } from '@datadog/browser-core'\nimport type {\n  BrowserWindow,\n  RumPerformanceEventTiming,\n  RumPerformanceObserver,\n} from '../../../browser/performanceCollection'\n\nlet observer: RumPerformanceObserver | undefined\n\nlet interactionCountEstimate = 0\nlet minKnownInteractionId = Infinity\nlet maxKnownInteractionId = 0\n\nexport function initInteractionCountPolyfill() {\n  if ('interactionCount' in performance || observer) {\n    return\n  }\n\n  observer = new (window as BrowserWindow).PerformanceObserver(\n    monitor((entries: PerformanceObserverEntryList) => {\n      entries.getEntries().forEach((e) => {\n        const entry = e as unknown as RumPerformanceEventTiming\n\n        if (entry.interactionId) {\n          minKnownInteractionId = Math.min(minKnownInteractionId, entry.interactionId)\n          maxKnownInteractionId = Math.max(maxKnownInteractionId, entry.interactionId)\n\n          interactionCountEstimate = (maxKnownInteractionId - minKnownInteractionId) / 7 + 1\n        }\n      })\n    })\n  )\n\n  observer.observe({ type: 'event', buffered: true, durationThreshold: 0 })\n}\n\n/**\n * Returns the `interactionCount` value using the native API (if available)\n * or the polyfill estimate in this module.\n */\nexport const getInteractionCount = () =>\n  observer ? interactionCountEstimate : (window as BrowserWindow).performance.interactionCount! || 0\n"],"mappings":"AAAA;;;;;;;;;;;;AAaA,SAASA,OAAO,QAAQ,uBAAuB;AAO/C,IAAIC,QAA4C;AAEhD,IAAIC,wBAAwB,GAAG,CAAC;AAChC,IAAIC,qBAAqB,GAAGC,QAAQ;AACpC,IAAIC,qBAAqB,GAAG,CAAC;AAE7B,OAAM,SAAUC,4BAA4BA,CAAA;EAC1C,IAAI,kBAAkB,IAAIC,WAAW,IAAIN,QAAQ,EAAE;IACjD;EACF;EAEAA,QAAQ,GAAG,IAAKO,MAAwB,CAACC,mBAAmB,CAC1DT,OAAO,CAAC,UAACU,OAAqC;IAC5CA,OAAO,CAACC,UAAU,EAAE,CAACC,OAAO,CAAC,UAACC,CAAC;MAC7B,IAAMC,KAAK,GAAGD,CAAyC;MAEvD,IAAIC,KAAK,CAACC,aAAa,EAAE;QACvBZ,qBAAqB,GAAGa,IAAI,CAACC,GAAG,CAACd,qBAAqB,EAAEW,KAAK,CAACC,aAAa,CAAC;QAC5EV,qBAAqB,GAAGW,IAAI,CAACE,GAAG,CAACb,qBAAqB,EAAES,KAAK,CAACC,aAAa,CAAC;QAE5Eb,wBAAwB,GAAG,CAACG,qBAAqB,GAAGF,qBAAqB,IAAI,CAAC,GAAG,CAAC;MACpF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,CACH;EAEDF,QAAQ,CAACkB,OAAO,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,QAAQ,EAAE,IAAI;IAAEC,iBAAiB,EAAE;EAAC,CAAE,CAAC;AAC3E;AAEA;;;;AAIA,OAAO,IAAMC,mBAAmB,GAAG,SAAAA,CAAA;EACjC,OAAAtB,QAAQ,GAAGC,wBAAwB,GAAIM,MAAwB,CAACD,WAAW,CAACiB,gBAAiB,IAAI,CAAC;AAAlG,CAAkG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}