{"ast":null,"code":"import { toStackTraceString } from '../../tools/stackTrace/handlingStack';\nimport { monitor } from '../../tools/monitor';\nimport { mergeObservables, Observable } from '../../tools/observable';\nimport { addEventListener, DOM_EVENT } from '../../browser/addEventListener';\nimport { includes } from '../../tools/utils/polyfills';\nimport { safeTruncate } from '../../tools/utils/stringUtils';\nexport var RawReportType = {\n  intervention: 'intervention',\n  deprecation: 'deprecation',\n  cspViolation: 'csp_violation'\n};\nexport function initReportObservable(configuration, apis) {\n  var observables = [];\n  if (includes(apis, RawReportType.cspViolation)) {\n    observables.push(createCspViolationReportObservable(configuration));\n  }\n  var reportTypes = apis.filter(function (api) {\n    return api !== RawReportType.cspViolation;\n  });\n  if (reportTypes.length) {\n    observables.push(createReportObservable(reportTypes));\n  }\n  return mergeObservables.apply(void 0, observables);\n}\nfunction createReportObservable(reportTypes) {\n  return new Observable(function (observable) {\n    if (!window.ReportingObserver) {\n      return;\n    }\n    var handleReports = monitor(function (reports, _) {\n      return reports.forEach(function (report) {\n        observable.notify(buildRawReportFromReport(report));\n      });\n    });\n    var observer = new window.ReportingObserver(handleReports, {\n      types: reportTypes,\n      buffered: true\n    });\n    observer.observe();\n    return function () {\n      observer.disconnect();\n    };\n  });\n}\nfunction createCspViolationReportObservable(configuration) {\n  return new Observable(function (observable) {\n    var stop = addEventListener(configuration, document, DOM_EVENT.SECURITY_POLICY_VIOLATION, function (event) {\n      observable.notify(buildRawReportFromCspViolation(event));\n    }).stop;\n    return stop;\n  });\n}\nfunction buildRawReportFromReport(report) {\n  var type = report.type,\n    body = report.body;\n  return {\n    type: type,\n    subtype: body.id,\n    message: \"\".concat(type, \": \").concat(body.message),\n    originalReport: report,\n    stack: buildStack(body.id, body.message, body.sourceFile, body.lineNumber, body.columnNumber)\n  };\n}\nfunction buildRawReportFromCspViolation(event) {\n  var type = RawReportType.cspViolation;\n  var message = \"'\".concat(event.blockedURI, \"' blocked by '\").concat(event.effectiveDirective, \"' directive\");\n  return {\n    type: RawReportType.cspViolation,\n    subtype: event.effectiveDirective,\n    message: \"\".concat(type, \": \").concat(message),\n    stack: buildStack(event.effectiveDirective, event.originalPolicy ? \"\".concat(message, \" of the policy \\\"\").concat(safeTruncate(event.originalPolicy, 100, '...'), \"\\\"\") : 'no policy', event.sourceFile, event.lineNumber, event.columnNumber),\n    originalReport: event\n  };\n}\nfunction buildStack(name, message, sourceFile, lineNumber, columnNumber) {\n  return sourceFile ? toStackTraceString({\n    name: name,\n    message: message,\n    stack: [{\n      func: '?',\n      url: sourceFile,\n      line: lineNumber !== null && lineNumber !== void 0 ? lineNumber : undefined,\n      column: columnNumber !== null && columnNumber !== void 0 ? columnNumber : undefined\n    }]\n  }) : undefined;\n}","map":{"version":3,"names":["toStackTraceString","monitor","mergeObservables","Observable","addEventListener","DOM_EVENT","includes","safeTruncate","RawReportType","intervention","deprecation","cspViolation","initReportObservable","configuration","apis","observables","push","createCspViolationReportObservable","reportTypes","filter","api","length","createReportObservable","apply","observable","window","ReportingObserver","handleReports","reports","_","forEach","report","notify","buildRawReportFromReport","observer","types","buffered","observe","disconnect","stop","document","SECURITY_POLICY_VIOLATION","event","buildRawReportFromCspViolation","type","body","subtype","id","message","concat","originalReport","stack","buildStack","sourceFile","lineNumber","columnNumber","blockedURI","effectiveDirective","originalPolicy","name","func","url","line","undefined","column"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\report\\reportObservable.ts"],"sourcesContent":["import { toStackTraceString } from '../../tools/stackTrace/handlingStack'\nimport { monitor } from '../../tools/monitor'\nimport { mergeObservables, Observable } from '../../tools/observable'\nimport { addEventListener, DOM_EVENT } from '../../browser/addEventListener'\nimport { includes } from '../../tools/utils/polyfills'\nimport { safeTruncate } from '../../tools/utils/stringUtils'\nimport type { Configuration } from '../configuration'\nimport type { ReportType, InterventionReport, DeprecationReport } from './browser.types'\n\nexport const RawReportType = {\n  intervention: 'intervention',\n  deprecation: 'deprecation',\n  cspViolation: 'csp_violation',\n} as const\n\nexport type RawReportType = (typeof RawReportType)[keyof typeof RawReportType]\n\nexport interface RawReport {\n  type: RawReportType\n  subtype: string\n  message: string\n  originalReport: SecurityPolicyViolationEvent | DeprecationReport | InterventionReport\n  stack?: string\n}\n\nexport function initReportObservable(configuration: Configuration, apis: RawReportType[]) {\n  const observables: Array<Observable<RawReport>> = []\n\n  if (includes(apis, RawReportType.cspViolation)) {\n    observables.push(createCspViolationReportObservable(configuration))\n  }\n\n  const reportTypes = apis.filter((api: RawReportType): api is ReportType => api !== RawReportType.cspViolation)\n  if (reportTypes.length) {\n    observables.push(createReportObservable(reportTypes))\n  }\n\n  return mergeObservables<RawReport>(...observables)\n}\n\nfunction createReportObservable(reportTypes: ReportType[]) {\n  return new Observable<RawReport>((observable) => {\n    if (!window.ReportingObserver) {\n      return\n    }\n\n    const handleReports = monitor((reports: Array<DeprecationReport | InterventionReport>, _: ReportingObserver) =>\n      reports.forEach((report) => {\n        observable.notify(buildRawReportFromReport(report))\n      })\n    ) as ReportingObserverCallback\n\n    const observer = new window.ReportingObserver(handleReports, {\n      types: reportTypes,\n      buffered: true,\n    })\n\n    observer.observe()\n    return () => {\n      observer.disconnect()\n    }\n  })\n}\n\nfunction createCspViolationReportObservable(configuration: Configuration) {\n  return new Observable<RawReport>((observable) => {\n    const { stop } = addEventListener(configuration, document, DOM_EVENT.SECURITY_POLICY_VIOLATION, (event) => {\n      observable.notify(buildRawReportFromCspViolation(event))\n    })\n\n    return stop\n  })\n}\n\nfunction buildRawReportFromReport(report: DeprecationReport | InterventionReport): RawReport {\n  const { type, body } = report\n\n  return {\n    type,\n    subtype: body.id,\n    message: `${type}: ${body.message}`,\n    originalReport: report,\n    stack: buildStack(body.id, body.message, body.sourceFile, body.lineNumber, body.columnNumber),\n  }\n}\n\nfunction buildRawReportFromCspViolation(event: SecurityPolicyViolationEvent): RawReport {\n  const type = RawReportType.cspViolation\n  const message = `'${event.blockedURI}' blocked by '${event.effectiveDirective}' directive`\n  return {\n    type: RawReportType.cspViolation,\n    subtype: event.effectiveDirective,\n    message: `${type}: ${message}`,\n    stack: buildStack(\n      event.effectiveDirective,\n      event.originalPolicy\n        ? `${message} of the policy \"${safeTruncate(event.originalPolicy, 100, '...')}\"`\n        : 'no policy',\n      event.sourceFile,\n      event.lineNumber,\n      event.columnNumber\n    ),\n    originalReport: event,\n  }\n}\n\nfunction buildStack(\n  name: string,\n  message: string,\n  sourceFile: string | null,\n  lineNumber: number | null,\n  columnNumber: number | null\n): string | undefined {\n  return sourceFile\n    ? toStackTraceString({\n        name,\n        message,\n        stack: [\n          {\n            func: '?',\n            url: sourceFile,\n            line: lineNumber ?? undefined,\n            column: columnNumber ?? undefined,\n          },\n        ],\n      })\n    : undefined\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}