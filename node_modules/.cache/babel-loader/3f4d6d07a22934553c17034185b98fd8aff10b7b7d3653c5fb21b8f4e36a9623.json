{"ast":null,"code":"import { isNumber, round } from './numberUtils';\nexport var ONE_SECOND = 1000;\nexport var ONE_MINUTE = 60 * ONE_SECOND;\nexport var ONE_HOUR = 60 * ONE_MINUTE;\nexport var ONE_DAY = 24 * ONE_HOUR;\nexport var ONE_YEAR = 365 * ONE_DAY;\nexport function relativeToClocks(relative) {\n  return {\n    relative: relative,\n    timeStamp: getCorrectedTimeStamp(relative)\n  };\n}\nexport function timeStampToClocks(timeStamp) {\n  return {\n    relative: getRelativeTime(timeStamp),\n    timeStamp: timeStamp\n  };\n}\nfunction getCorrectedTimeStamp(relativeTime) {\n  var correctedOrigin = dateNow() - performance.now();\n  // apply correction only for positive drift\n  if (correctedOrigin > getNavigationStart()) {\n    return Math.round(addDuration(correctedOrigin, relativeTime));\n  }\n  return getTimeStamp(relativeTime);\n}\nexport function currentDrift() {\n  return Math.round(dateNow() - addDuration(getNavigationStart(), performance.now()));\n}\nexport function toServerDuration(duration) {\n  if (!isNumber(duration)) {\n    return duration;\n  }\n  return round(duration * 1e6, 0);\n}\nexport function dateNow() {\n  // Do not use `Date.now` because sometimes websites are wrongly \"polyfilling\" it. For example, we\n  // had some users using a very old version of `datejs`, which patched `Date.now` to return a Date\n  // instance instead of a timestamp[1]. Those users are unlikely to fix this, so let's handle this\n  // case ourselves.\n  // [1]: https://github.com/datejs/Datejs/blob/97f5c7c58c5bc5accdab8aa7602b6ac56462d778/src/core-debug.js#L14-L16\n  return new Date().getTime();\n}\nexport function timeStampNow() {\n  return dateNow();\n}\nexport function relativeNow() {\n  return performance.now();\n}\nexport function clocksNow() {\n  return {\n    relative: relativeNow(),\n    timeStamp: timeStampNow()\n  };\n}\nexport function clocksOrigin() {\n  return {\n    relative: 0,\n    timeStamp: getNavigationStart()\n  };\n}\nexport function elapsed(start, end) {\n  return end - start;\n}\nexport function addDuration(a, b) {\n  return a + b;\n}\n/**\n * Get the time since the navigation was started.\n *\n * Note: this does not use `performance.timeOrigin` because it doesn't seem to reflect the actual\n * time on which the navigation has started: it may be much farther in the past, at least in Firefox 71.\n * Related issue in Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1429926\n */\nexport function getRelativeTime(timestamp) {\n  return timestamp - getNavigationStart();\n}\nexport function getTimeStamp(relativeTime) {\n  return Math.round(addDuration(getNavigationStart(), relativeTime));\n}\nexport function looksLikeRelativeTime(time) {\n  return time < ONE_YEAR;\n}\n/**\n * Navigation start slightly change on some rare cases\n */\nvar navigationStart;\nfunction getNavigationStart() {\n  if (navigationStart === undefined) {\n    navigationStart = performance.timing.navigationStart;\n  }\n  return navigationStart;\n}\nexport function resetNavigationStart() {\n  navigationStart = undefined;\n}","map":{"version":3,"names":["isNumber","round","ONE_SECOND","ONE_MINUTE","ONE_HOUR","ONE_DAY","ONE_YEAR","relativeToClocks","relative","timeStamp","getCorrectedTimeStamp","timeStampToClocks","getRelativeTime","relativeTime","correctedOrigin","dateNow","performance","now","getNavigationStart","Math","addDuration","getTimeStamp","currentDrift","toServerDuration","duration","Date","getTime","timeStampNow","relativeNow","clocksNow","clocksOrigin","elapsed","start","end","a","b","timestamp","looksLikeRelativeTime","time","navigationStart","undefined","timing","resetNavigationStart"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\tools\\utils\\timeUtils.ts"],"sourcesContent":["import { isNumber, round } from './numberUtils'\n\nexport const ONE_SECOND = 1000\nexport const ONE_MINUTE = 60 * ONE_SECOND\nexport const ONE_HOUR = 60 * ONE_MINUTE\nexport const ONE_DAY = 24 * ONE_HOUR\nexport const ONE_YEAR = 365 * ONE_DAY\n\nexport type Duration = number & { d: 'Duration in ms' }\nexport type ServerDuration = number & { s: 'Duration in ns' }\nexport type TimeStamp = number & { t: 'Epoch time' }\nexport type RelativeTime = number & { r: 'Time relative to navigation start' } & { d: 'Duration in ms' }\nexport type ClocksState = { relative: RelativeTime; timeStamp: TimeStamp }\n\nexport function relativeToClocks(relative: RelativeTime) {\n  return { relative, timeStamp: getCorrectedTimeStamp(relative) }\n}\n\nexport function timeStampToClocks(timeStamp: TimeStamp) {\n  return { relative: getRelativeTime(timeStamp), timeStamp }\n}\n\nfunction getCorrectedTimeStamp(relativeTime: RelativeTime) {\n  const correctedOrigin = (dateNow() - performance.now()) as TimeStamp\n  // apply correction only for positive drift\n  if (correctedOrigin > getNavigationStart()) {\n    return Math.round(addDuration(correctedOrigin, relativeTime)) as TimeStamp\n  }\n  return getTimeStamp(relativeTime)\n}\n\nexport function currentDrift() {\n  return Math.round(dateNow() - addDuration(getNavigationStart(), performance.now() as Duration))\n}\n\nexport function toServerDuration(duration: Duration): ServerDuration\nexport function toServerDuration(duration: Duration | undefined): ServerDuration | undefined\nexport function toServerDuration(duration: Duration | undefined) {\n  if (!isNumber(duration)) {\n    return duration\n  }\n  return round(duration * 1e6, 0) as ServerDuration\n}\n\nexport function dateNow() {\n  // Do not use `Date.now` because sometimes websites are wrongly \"polyfilling\" it. For example, we\n  // had some users using a very old version of `datejs`, which patched `Date.now` to return a Date\n  // instance instead of a timestamp[1]. Those users are unlikely to fix this, so let's handle this\n  // case ourselves.\n  // [1]: https://github.com/datejs/Datejs/blob/97f5c7c58c5bc5accdab8aa7602b6ac56462d778/src/core-debug.js#L14-L16\n  return new Date().getTime()\n}\n\nexport function timeStampNow() {\n  return dateNow() as TimeStamp\n}\n\nexport function relativeNow() {\n  return performance.now() as RelativeTime\n}\n\nexport function clocksNow() {\n  return { relative: relativeNow(), timeStamp: timeStampNow() }\n}\n\nexport function clocksOrigin() {\n  return { relative: 0 as RelativeTime, timeStamp: getNavigationStart() }\n}\n\nexport function elapsed(start: TimeStamp, end: TimeStamp): Duration\nexport function elapsed(start: RelativeTime, end: RelativeTime): Duration\nexport function elapsed(start: number, end: number) {\n  return (end - start) as Duration\n}\n\nexport function addDuration(a: TimeStamp, b: Duration): TimeStamp\nexport function addDuration(a: RelativeTime, b: Duration): RelativeTime\nexport function addDuration(a: Duration, b: Duration): Duration\nexport function addDuration(a: number, b: number) {\n  return a + b\n}\n\n/**\n * Get the time since the navigation was started.\n *\n * Note: this does not use `performance.timeOrigin` because it doesn't seem to reflect the actual\n * time on which the navigation has started: it may be much farther in the past, at least in Firefox 71.\n * Related issue in Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1429926\n */\nexport function getRelativeTime(timestamp: TimeStamp) {\n  return (timestamp - getNavigationStart()) as RelativeTime\n}\n\nexport function getTimeStamp(relativeTime: RelativeTime) {\n  return Math.round(addDuration(getNavigationStart(), relativeTime)) as TimeStamp\n}\n\nexport function looksLikeRelativeTime(time: RelativeTime | TimeStamp): time is RelativeTime {\n  return time < ONE_YEAR\n}\n\n/**\n * Navigation start slightly change on some rare cases\n */\nlet navigationStart: TimeStamp | undefined\n\nfunction getNavigationStart() {\n  if (navigationStart === undefined) {\n    navigationStart = performance.timing.navigationStart as TimeStamp\n  }\n  return navigationStart\n}\n\nexport function resetNavigationStart() {\n  navigationStart = undefined\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}