{"ast":null,"code":"import { addEventListeners, addTelemetryDebug, DOM_EVENT, throttle } from '@datadog/browser-core';\nimport { getSerializedNodeId, hasSerializedNode } from '../serialization';\nimport { IncrementalSource } from '../../../types';\nimport { getEventTarget, isTouchEvent } from '../eventsUtils';\nimport { convertMouseEventToLayoutCoordinates } from '../viewports';\nimport { assembleIncrementalSnapshot } from '../assembly';\nvar MOUSE_MOVE_OBSERVER_THRESHOLD = 50;\nexport function trackMove(configuration, moveCb) {\n  var _a = throttle(function (event) {\n      var target = getEventTarget(event);\n      if (hasSerializedNode(target)) {\n        var coordinates = tryToComputeCoordinates(event);\n        if (!coordinates) {\n          return;\n        }\n        var position = {\n          id: getSerializedNodeId(target),\n          timeOffset: 0,\n          x: coordinates.x,\n          y: coordinates.y\n        };\n        moveCb(assembleIncrementalSnapshot(isTouchEvent(event) ? IncrementalSource.TouchMove : IncrementalSource.MouseMove, {\n          positions: [position]\n        }));\n      }\n    }, MOUSE_MOVE_OBSERVER_THRESHOLD, {\n      trailing: false\n    }),\n    updatePosition = _a.throttled,\n    cancelThrottle = _a.cancel;\n  var removeListener = addEventListeners(configuration, document, [DOM_EVENT.MOUSE_MOVE, DOM_EVENT.TOUCH_MOVE], updatePosition, {\n    capture: true,\n    passive: true\n  }).stop;\n  return {\n    stop: function () {\n      removeListener();\n      cancelThrottle();\n    }\n  };\n}\nexport function tryToComputeCoordinates(event) {\n  var _a = isTouchEvent(event) ? event.changedTouches[0] : event,\n    x = _a.clientX,\n    y = _a.clientY;\n  if (window.visualViewport) {\n    var _b = convertMouseEventToLayoutCoordinates(x, y),\n      visualViewportX = _b.visualViewportX,\n      visualViewportY = _b.visualViewportY;\n    x = visualViewportX;\n    y = visualViewportY;\n  }\n  if (!Number.isFinite(x) || !Number.isFinite(y)) {\n    if (event.isTrusted) {\n      addTelemetryDebug('mouse/touch event without x/y');\n    }\n    return undefined;\n  }\n  return {\n    x: x,\n    y: y\n  };\n}","map":{"version":3,"names":["addEventListeners","addTelemetryDebug","DOM_EVENT","throttle","getSerializedNodeId","hasSerializedNode","IncrementalSource","getEventTarget","isTouchEvent","convertMouseEventToLayoutCoordinates","assembleIncrementalSnapshot","MOUSE_MOVE_OBSERVER_THRESHOLD","trackMove","configuration","moveCb","_a","event","target","coordinates","tryToComputeCoordinates","position","id","timeOffset","x","y","TouchMove","MouseMove","positions","trailing","updatePosition","throttled","cancelThrottle","cancel","removeListener","document","MOUSE_MOVE","TOUCH_MOVE","capture","passive","stop","changedTouches","clientX","clientY","window","visualViewport","_b","visualViewportX","visualViewportY","Number","isFinite","isTrusted","undefined"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\record\\trackers\\trackMove.ts"],"sourcesContent":["import { addEventListeners, addTelemetryDebug, DOM_EVENT, throttle } from '@datadog/browser-core'\nimport type { RumConfiguration } from '@datadog/browser-rum-core'\nimport { getSerializedNodeId, hasSerializedNode } from '../serialization'\nimport type { BrowserIncrementalSnapshotRecord, MousemoveData, MousePosition } from '../../../types'\nimport { IncrementalSource } from '../../../types'\nimport { getEventTarget, isTouchEvent } from '../eventsUtils'\nimport { convertMouseEventToLayoutCoordinates } from '../viewports'\nimport { assembleIncrementalSnapshot } from '../assembly'\nimport type { Tracker } from './types'\n\nconst MOUSE_MOVE_OBSERVER_THRESHOLD = 50\n\nexport type MousemoveCallBack = (incrementalSnapshotRecord: BrowserIncrementalSnapshotRecord) => void\n\nexport function trackMove(configuration: RumConfiguration, moveCb: MousemoveCallBack): Tracker {\n  const { throttled: updatePosition, cancel: cancelThrottle } = throttle(\n    (event: MouseEvent | TouchEvent) => {\n      const target = getEventTarget(event)\n      if (hasSerializedNode(target)) {\n        const coordinates = tryToComputeCoordinates(event)\n        if (!coordinates) {\n          return\n        }\n        const position: MousePosition = {\n          id: getSerializedNodeId(target),\n          timeOffset: 0,\n          x: coordinates.x,\n          y: coordinates.y,\n        }\n\n        moveCb(\n          assembleIncrementalSnapshot<MousemoveData>(\n            isTouchEvent(event) ? IncrementalSource.TouchMove : IncrementalSource.MouseMove,\n            { positions: [position] }\n          )\n        )\n      }\n    },\n    MOUSE_MOVE_OBSERVER_THRESHOLD,\n    {\n      trailing: false,\n    }\n  )\n\n  const { stop: removeListener } = addEventListeners(\n    configuration,\n    document,\n    [DOM_EVENT.MOUSE_MOVE, DOM_EVENT.TOUCH_MOVE],\n    updatePosition,\n    {\n      capture: true,\n      passive: true,\n    }\n  )\n\n  return {\n    stop: () => {\n      removeListener()\n      cancelThrottle()\n    },\n  }\n}\n\nexport function tryToComputeCoordinates(event: MouseEvent | TouchEvent) {\n  let { clientX: x, clientY: y } = isTouchEvent(event) ? event.changedTouches[0] : event\n  if (window.visualViewport) {\n    const { visualViewportX, visualViewportY } = convertMouseEventToLayoutCoordinates(x, y)\n    x = visualViewportX\n    y = visualViewportY\n  }\n  if (!Number.isFinite(x) || !Number.isFinite(y)) {\n    if (event.isTrusted) {\n      addTelemetryDebug('mouse/touch event without x/y')\n    }\n    return undefined\n  }\n  return { x, y }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,iBAAiB,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,uBAAuB;AAEjG,SAASC,mBAAmB,EAAEC,iBAAiB,QAAQ,kBAAkB;AAEzE,SAASC,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,cAAc,EAAEC,YAAY,QAAQ,gBAAgB;AAC7D,SAASC,oCAAoC,QAAQ,cAAc;AACnE,SAASC,2BAA2B,QAAQ,aAAa;AAGzD,IAAMC,6BAA6B,GAAG,EAAE;AAIxC,OAAM,SAAUC,SAASA,CAACC,aAA+B,EAAEC,MAAyB;EAC5E,IAAAC,EAAA,GAAwDZ,QAAQ,CACpE,UAACa,KAA8B;MAC7B,IAAMC,MAAM,GAAGV,cAAc,CAACS,KAAK,CAAC;MACpC,IAAIX,iBAAiB,CAACY,MAAM,CAAC,EAAE;QAC7B,IAAMC,WAAW,GAAGC,uBAAuB,CAACH,KAAK,CAAC;QAClD,IAAI,CAACE,WAAW,EAAE;UAChB;QACF;QACA,IAAME,QAAQ,GAAkB;UAC9BC,EAAE,EAAEjB,mBAAmB,CAACa,MAAM,CAAC;UAC/BK,UAAU,EAAE,CAAC;UACbC,CAAC,EAAEL,WAAW,CAACK,CAAC;UAChBC,CAAC,EAAEN,WAAW,CAACM;SAChB;QAEDV,MAAM,CACJJ,2BAA2B,CACzBF,YAAY,CAACQ,KAAK,CAAC,GAAGV,iBAAiB,CAACmB,SAAS,GAAGnB,iBAAiB,CAACoB,SAAS,EAC/E;UAAEC,SAAS,EAAE,CAACP,QAAQ;QAAC,CAAE,CAC1B,CACF;MACH;IACF,CAAC,EACDT,6BAA6B,EAC7B;MACEiB,QAAQ,EAAE;KACX,CACF;IA3BkBC,cAAc,GAAAd,EAAA,CAAAe,SAAA;IAAUC,cAAc,GAAAhB,EAAA,CAAAiB,MA2BxD;EAEO,IAAMC,cAAc,GAAKjC,iBAAiB,CAChDa,aAAa,EACbqB,QAAQ,EACR,CAAChC,SAAS,CAACiC,UAAU,EAAEjC,SAAS,CAACkC,UAAU,CAAC,EAC5CP,cAAc,EACd;IACEQ,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE;GACV,CACF,CAAAC,IAT2B;EAW5B,OAAO;IACLA,IAAI,EAAE,SAAAA,CAAA;MACJN,cAAc,EAAE;MAChBF,cAAc,EAAE;IAClB;GACD;AACH;AAEA,OAAM,SAAUZ,uBAAuBA,CAACH,KAA8B;EAChE,IAAAD,EAAA,GAA6BP,YAAY,CAACQ,KAAK,CAAC,GAAGA,KAAK,CAACwB,cAAc,CAAC,CAAC,CAAC,GAAGxB,KAAK;IAAvEO,CAAC,GAAAR,EAAA,CAAA0B,OAAA;IAAWjB,CAAC,GAAAT,EAAA,CAAA2B,OAA0D;EACtF,IAAIC,MAAM,CAACC,cAAc,EAAE;IACnB,IAAAC,EAAA,GAAuCpC,oCAAoC,CAACc,CAAC,EAAEC,CAAC,CAAC;MAA/EsB,eAAe,GAAAD,EAAA,CAAAC,eAAA;MAAEC,eAAe,GAAAF,EAAA,CAAAE,eAA+C;IACvFxB,CAAC,GAAGuB,eAAe;IACnBtB,CAAC,GAAGuB,eAAe;EACrB;EACA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC1B,CAAC,CAAC,IAAI,CAACyB,MAAM,CAACC,QAAQ,CAACzB,CAAC,CAAC,EAAE;IAC9C,IAAIR,KAAK,CAACkC,SAAS,EAAE;MACnBjD,iBAAiB,CAAC,+BAA+B,CAAC;IACpD;IACA,OAAOkD,SAAS;EAClB;EACA,OAAO;IAAE5B,CAAC,EAAAA,CAAA;IAAEC,CAAC,EAAAA;EAAA,CAAE;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}