{"ast":null,"code":"import { noop } from '../utils/functionUtils';\n/**\n * Custom implementation of JSON.stringify that ignores some toJSON methods. We need to do that\n * because some sites badly override toJSON on certain objects. Removing all toJSON methods from\n * nested values would be too costly, so we just detach them from the root value, and native classes\n * used to build JSON values (Array and Object).\n *\n * Note: this still assumes that JSON.stringify is correct.\n */\nexport function jsonStringify(value, replacer, space) {\n  if (typeof value !== 'object' || value === null) {\n    return JSON.stringify(value);\n  }\n  // Note: The order matter here. We need to detach toJSON methods on parent classes before their\n  // subclasses.\n  var restoreObjectPrototypeToJson = detachToJsonMethod(Object.prototype);\n  var restoreArrayPrototypeToJson = detachToJsonMethod(Array.prototype);\n  var restoreValuePrototypeToJson = detachToJsonMethod(Object.getPrototypeOf(value));\n  var restoreValueToJson = detachToJsonMethod(value);\n  try {\n    return JSON.stringify(value, replacer, space);\n  } catch (_a) {\n    return '<error: unable to serialize object>';\n  } finally {\n    restoreObjectPrototypeToJson();\n    restoreArrayPrototypeToJson();\n    restoreValuePrototypeToJson();\n    restoreValueToJson();\n  }\n}\nexport function detachToJsonMethod(value) {\n  var object = value;\n  var objectToJson = object.toJSON;\n  if (objectToJson) {\n    delete object.toJSON;\n    return function () {\n      object.toJSON = objectToJson;\n    };\n  }\n  return noop;\n}","map":{"version":3,"names":["noop","jsonStringify","value","replacer","space","JSON","stringify","restoreObjectPrototypeToJson","detachToJsonMethod","Object","prototype","restoreArrayPrototypeToJson","Array","restoreValuePrototypeToJson","getPrototypeOf","restoreValueToJson","_a","object","objectToJson","toJSON"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\tools\\serialisation\\jsonStringify.ts"],"sourcesContent":["import { noop } from '../utils/functionUtils'\n\n/**\n * Custom implementation of JSON.stringify that ignores some toJSON methods. We need to do that\n * because some sites badly override toJSON on certain objects. Removing all toJSON methods from\n * nested values would be too costly, so we just detach them from the root value, and native classes\n * used to build JSON values (Array and Object).\n *\n * Note: this still assumes that JSON.stringify is correct.\n */\nexport function jsonStringify(\n  value: unknown,\n  replacer?: Array<string | number>,\n  space?: string | number\n): string | undefined {\n  if (typeof value !== 'object' || value === null) {\n    return JSON.stringify(value)\n  }\n\n  // Note: The order matter here. We need to detach toJSON methods on parent classes before their\n  // subclasses.\n  const restoreObjectPrototypeToJson = detachToJsonMethod(Object.prototype)\n  const restoreArrayPrototypeToJson = detachToJsonMethod(Array.prototype)\n  const restoreValuePrototypeToJson = detachToJsonMethod(Object.getPrototypeOf(value))\n  const restoreValueToJson = detachToJsonMethod(value)\n\n  try {\n    return JSON.stringify(value, replacer, space)\n  } catch {\n    return '<error: unable to serialize object>'\n  } finally {\n    restoreObjectPrototypeToJson()\n    restoreArrayPrototypeToJson()\n    restoreValuePrototypeToJson()\n    restoreValueToJson()\n  }\n}\n\nexport interface ObjectWithToJsonMethod {\n  toJSON?: () => unknown\n}\n\nexport function detachToJsonMethod(value: object) {\n  const object = value as ObjectWithToJsonMethod\n  const objectToJson = object.toJSON\n  if (objectToJson) {\n    delete object.toJSON\n    return () => {\n      object.toJSON = objectToJson\n    }\n  }\n  return noop\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,wBAAwB;AAE7C;;;;;;;;AAQA,OAAM,SAAUC,aAAaA,CAC3BC,KAAc,EACdC,QAAiC,EACjCC,KAAuB;EAEvB,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;IAC/C,OAAOG,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC;EAC9B;EAEA;EACA;EACA,IAAMK,4BAA4B,GAAGC,kBAAkB,CAACC,MAAM,CAACC,SAAS,CAAC;EACzE,IAAMC,2BAA2B,GAAGH,kBAAkB,CAACI,KAAK,CAACF,SAAS,CAAC;EACvE,IAAMG,2BAA2B,GAAGL,kBAAkB,CAACC,MAAM,CAACK,cAAc,CAACZ,KAAK,CAAC,CAAC;EACpF,IAAMa,kBAAkB,GAAGP,kBAAkB,CAACN,KAAK,CAAC;EAEpD,IAAI;IACF,OAAOG,IAAI,CAACC,SAAS,CAACJ,KAAK,EAAEC,QAAQ,EAAEC,KAAK,CAAC;EAC/C,CAAC,CAAC,OAAAY,EAAA,EAAM;IACN,OAAO,qCAAqC;EAC9C,CAAC,SAAS;IACRT,4BAA4B,EAAE;IAC9BI,2BAA2B,EAAE;IAC7BE,2BAA2B,EAAE;IAC7BE,kBAAkB,EAAE;EACtB;AACF;AAMA,OAAM,SAAUP,kBAAkBA,CAACN,KAAa;EAC9C,IAAMe,MAAM,GAAGf,KAA+B;EAC9C,IAAMgB,YAAY,GAAGD,MAAM,CAACE,MAAM;EAClC,IAAID,YAAY,EAAE;IAChB,OAAOD,MAAM,CAACE,MAAM;IACpB,OAAO;MACLF,MAAM,CAACE,MAAM,GAAGD,YAAY;IAC9B,CAAC;EACH;EACA,OAAOlB,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}