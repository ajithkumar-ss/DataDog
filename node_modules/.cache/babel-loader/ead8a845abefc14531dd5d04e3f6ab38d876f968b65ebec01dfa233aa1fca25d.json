{"ast":null,"code":"import { assign } from '@datadog/browser-core';\nimport { RecordType } from '../../types';\nimport * as replayStats from '../replayStats';\nvar Segment = /** @class */function () {\n  function Segment(encoder, context, creationReason) {\n    this.encoder = encoder;\n    this.encodedBytesCount = 0;\n    var viewId = context.view.id;\n    this.metadata = assign({\n      start: Infinity,\n      end: -Infinity,\n      creation_reason: creationReason,\n      records_count: 0,\n      has_full_snapshot: false,\n      index_in_view: replayStats.getSegmentsCount(viewId),\n      source: 'browser'\n    }, context);\n    replayStats.addSegment(viewId);\n  }\n  Segment.prototype.addRecord = function (record, callback) {\n    var _this = this;\n    var _a;\n    this.metadata.start = Math.min(this.metadata.start, record.timestamp);\n    this.metadata.end = Math.max(this.metadata.end, record.timestamp);\n    this.metadata.records_count += 1;\n    (_a = this.metadata).has_full_snapshot || (_a.has_full_snapshot = record.type === RecordType.FullSnapshot);\n    var prefix = this.encoder.isEmpty ? '{\"records\":[' : ',';\n    this.encoder.write(prefix + JSON.stringify(record), function (additionalEncodedBytesCount) {\n      _this.encodedBytesCount += additionalEncodedBytesCount;\n      callback(_this.encodedBytesCount);\n    });\n  };\n  Segment.prototype.flush = function (callback) {\n    var _this = this;\n    if (this.encoder.isEmpty) {\n      throw new Error('Empty segment flushed');\n    }\n    this.encoder.write(\"],\".concat(JSON.stringify(this.metadata).slice(1), \"\\n\"));\n    this.encoder.finish(function (encoderResult) {\n      replayStats.addWroteData(_this.metadata.view.id, encoderResult.rawBytesCount);\n      callback(_this.metadata, encoderResult);\n    });\n  };\n  return Segment;\n}();\nexport { Segment };","map":{"version":3,"names":["assign","RecordType","replayStats","Segment","encoder","context","creationReason","encodedBytesCount","viewId","view","id","metadata","start","Infinity","end","creation_reason","records_count","has_full_snapshot","index_in_view","getSegmentsCount","source","addSegment","prototype","addRecord","record","callback","_this","Math","min","timestamp","max","_a","type","FullSnapshot","prefix","isEmpty","write","JSON","stringify","additionalEncodedBytesCount","flush","Error","concat","slice","finish","encoderResult","addWroteData","rawBytesCount"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\segmentCollection\\segment.ts"],"sourcesContent":["import type { Encoder, EncoderResult } from '@datadog/browser-core'\nimport { assign } from '@datadog/browser-core'\nimport type { BrowserRecord, BrowserSegmentMetadata, CreationReason, SegmentContext } from '../../types'\nimport { RecordType } from '../../types'\nimport * as replayStats from '../replayStats'\n\nexport type FlushReason = Exclude<CreationReason, 'init'> | 'stop'\nexport type FlushCallback = (metadata: BrowserSegmentMetadata, encoderResult: EncoderResult<Uint8Array>) => void\nexport type AddRecordCallback = (encodedBytesCount: number) => void\n\nexport class Segment {\n  private metadata: BrowserSegmentMetadata\n  private encodedBytesCount = 0\n\n  constructor(\n    private encoder: Encoder<Uint8Array>,\n    context: SegmentContext,\n    creationReason: CreationReason\n  ) {\n    const viewId = context.view.id\n\n    this.metadata = assign(\n      {\n        start: Infinity,\n        end: -Infinity,\n        creation_reason: creationReason,\n        records_count: 0,\n        has_full_snapshot: false,\n        index_in_view: replayStats.getSegmentsCount(viewId),\n        source: 'browser' as const,\n      },\n      context\n    )\n\n    replayStats.addSegment(viewId)\n  }\n\n  addRecord(record: BrowserRecord, callback: AddRecordCallback): void {\n    this.metadata.start = Math.min(this.metadata.start, record.timestamp)\n    this.metadata.end = Math.max(this.metadata.end, record.timestamp)\n    this.metadata.records_count += 1\n    this.metadata.has_full_snapshot ||= record.type === RecordType.FullSnapshot\n\n    const prefix = this.encoder.isEmpty ? '{\"records\":[' : ','\n    this.encoder.write(prefix + JSON.stringify(record), (additionalEncodedBytesCount) => {\n      this.encodedBytesCount += additionalEncodedBytesCount\n      callback(this.encodedBytesCount)\n    })\n  }\n\n  flush(callback: FlushCallback) {\n    if (this.encoder.isEmpty) {\n      throw new Error('Empty segment flushed')\n    }\n\n    this.encoder.write(`],${JSON.stringify(this.metadata).slice(1)}\\n`)\n    this.encoder.finish((encoderResult) => {\n      replayStats.addWroteData(this.metadata.view.id, encoderResult.rawBytesCount)\n      callback(this.metadata, encoderResult)\n    })\n  }\n}\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,uBAAuB;AAE9C,SAASC,UAAU,QAAQ,aAAa;AACxC,OAAO,KAAKC,WAAW,MAAM,gBAAgB;AAM7C,IAAAC,OAAA;EAIE,SAAAA,QACUC,OAA4B,EACpCC,OAAuB,EACvBC,cAA8B;IAFtB,KAAAF,OAAO,GAAPA,OAAO;IAHT,KAAAG,iBAAiB,GAAG,CAAC;IAO3B,IAAMC,MAAM,GAAGH,OAAO,CAACI,IAAI,CAACC,EAAE;IAE9B,IAAI,CAACC,QAAQ,GAAGX,MAAM,CACpB;MACEY,KAAK,EAAEC,QAAQ;MACfC,GAAG,EAAE,CAACD,QAAQ;MACdE,eAAe,EAAET,cAAc;MAC/BU,aAAa,EAAE,CAAC;MAChBC,iBAAiB,EAAE,KAAK;MACxBC,aAAa,EAAEhB,WAAW,CAACiB,gBAAgB,CAACX,MAAM,CAAC;MACnDY,MAAM,EAAE;KACT,EACDf,OAAO,CACR;IAEDH,WAAW,CAACmB,UAAU,CAACb,MAAM,CAAC;EAChC;EAEAL,OAAA,CAAAmB,SAAA,CAAAC,SAAS,GAAT,UAAUC,MAAqB,EAAEC,QAA2B;IAA5D,IAAAC,KAAA;;IACE,IAAI,CAACf,QAAQ,CAACC,KAAK,GAAGe,IAAI,CAACC,GAAG,CAAC,IAAI,CAACjB,QAAQ,CAACC,KAAK,EAAEY,MAAM,CAACK,SAAS,CAAC;IACrE,IAAI,CAAClB,QAAQ,CAACG,GAAG,GAAGa,IAAI,CAACG,GAAG,CAAC,IAAI,CAACnB,QAAQ,CAACG,GAAG,EAAEU,MAAM,CAACK,SAAS,CAAC;IACjE,IAAI,CAAClB,QAAQ,CAACK,aAAa,IAAI,CAAC;IAChC,CAAAe,EAAA,OAAI,CAACpB,QAAQ,EAACM,iBAAiB,KAAAc,EAAA,CAAjBd,iBAAiB,GAAKO,MAAM,CAACQ,IAAI,KAAK/B,UAAU,CAACgC,YAAY;IAE3E,IAAMC,MAAM,GAAG,IAAI,CAAC9B,OAAO,CAAC+B,OAAO,GAAG,cAAc,GAAG,GAAG;IAC1D,IAAI,CAAC/B,OAAO,CAACgC,KAAK,CAACF,MAAM,GAAGG,IAAI,CAACC,SAAS,CAACd,MAAM,CAAC,EAAE,UAACe,2BAA2B;MAC9Eb,KAAI,CAACnB,iBAAiB,IAAIgC,2BAA2B;MACrDd,QAAQ,CAACC,KAAI,CAACnB,iBAAiB,CAAC;IAClC,CAAC,CAAC;EACJ,CAAC;EAEDJ,OAAA,CAAAmB,SAAA,CAAAkB,KAAK,GAAL,UAAMf,QAAuB;IAA7B,IAAAC,KAAA;IACE,IAAI,IAAI,CAACtB,OAAO,CAAC+B,OAAO,EAAE;MACxB,MAAM,IAAIM,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,IAAI,CAACrC,OAAO,CAACgC,KAAK,CAAC,KAAAM,MAAA,CAAKL,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC3B,QAAQ,CAAC,CAACgC,KAAK,CAAC,CAAC,CAAC,OAAI,CAAC;IACnE,IAAI,CAACvC,OAAO,CAACwC,MAAM,CAAC,UAACC,aAAa;MAChC3C,WAAW,CAAC4C,YAAY,CAACpB,KAAI,CAACf,QAAQ,CAACF,IAAI,CAACC,EAAE,EAAEmC,aAAa,CAACE,aAAa,CAAC;MAC5EtB,QAAQ,CAACC,KAAI,CAACf,QAAQ,EAAEkC,aAAa,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC;EACH,OAAA1C,OAAC;AAAD,CAAC,CAnDD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}