{"ast":null,"code":"import { getInitCookie } from '../../browser/cookie';\nimport { SESSION_STORE_KEY } from './storeStrategies/sessionStoreStrategy';\nimport { expandSessionState, isSessionStarted } from './sessionState';\nexport var OLD_SESSION_COOKIE_NAME = '_dd';\nexport var OLD_RUM_COOKIE_NAME = '_dd_r';\nexport var OLD_LOGS_COOKIE_NAME = '_dd_l';\n// duplicate values to avoid dependency issues\nexport var RUM_SESSION_KEY = 'rum';\nexport var LOGS_SESSION_KEY = 'logs';\n/**\n * This migration should remain in the codebase as long as older versions are available/live\n * to allow older sdk versions to be upgraded to newer versions without compatibility issues.\n */\nexport function tryOldCookiesMigration(cookieStoreStrategy) {\n  var sessionString = getInitCookie(SESSION_STORE_KEY);\n  if (!sessionString) {\n    var oldSessionId = getInitCookie(OLD_SESSION_COOKIE_NAME);\n    var oldRumType = getInitCookie(OLD_RUM_COOKIE_NAME);\n    var oldLogsType = getInitCookie(OLD_LOGS_COOKIE_NAME);\n    var session = {};\n    if (oldSessionId) {\n      session.id = oldSessionId;\n    }\n    if (oldLogsType && /^[01]$/.test(oldLogsType)) {\n      session[LOGS_SESSION_KEY] = oldLogsType;\n    }\n    if (oldRumType && /^[012]$/.test(oldRumType)) {\n      session[RUM_SESSION_KEY] = oldRumType;\n    }\n    if (isSessionStarted(session)) {\n      expandSessionState(session);\n      cookieStoreStrategy.persistSession(session);\n    }\n  }\n}","map":{"version":3,"names":["getInitCookie","SESSION_STORE_KEY","expandSessionState","isSessionStarted","OLD_SESSION_COOKIE_NAME","OLD_RUM_COOKIE_NAME","OLD_LOGS_COOKIE_NAME","RUM_SESSION_KEY","LOGS_SESSION_KEY","tryOldCookiesMigration","cookieStoreStrategy","sessionString","oldSessionId","oldRumType","oldLogsType","session","id","test","persistSession"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\session\\oldCookiesMigration.ts"],"sourcesContent":["import { getInitCookie } from '../../browser/cookie'\nimport type { SessionStoreStrategy } from './storeStrategies/sessionStoreStrategy'\nimport { SESSION_STORE_KEY } from './storeStrategies/sessionStoreStrategy'\nimport type { SessionState } from './sessionState'\nimport { expandSessionState, isSessionStarted } from './sessionState'\n\nexport const OLD_SESSION_COOKIE_NAME = '_dd'\nexport const OLD_RUM_COOKIE_NAME = '_dd_r'\nexport const OLD_LOGS_COOKIE_NAME = '_dd_l'\n\n// duplicate values to avoid dependency issues\nexport const RUM_SESSION_KEY = 'rum'\nexport const LOGS_SESSION_KEY = 'logs'\n\n/**\n * This migration should remain in the codebase as long as older versions are available/live\n * to allow older sdk versions to be upgraded to newer versions without compatibility issues.\n */\nexport function tryOldCookiesMigration(cookieStoreStrategy: SessionStoreStrategy) {\n  const sessionString = getInitCookie(SESSION_STORE_KEY)\n  if (!sessionString) {\n    const oldSessionId = getInitCookie(OLD_SESSION_COOKIE_NAME)\n    const oldRumType = getInitCookie(OLD_RUM_COOKIE_NAME)\n    const oldLogsType = getInitCookie(OLD_LOGS_COOKIE_NAME)\n    const session: SessionState = {}\n\n    if (oldSessionId) {\n      session.id = oldSessionId\n    }\n    if (oldLogsType && /^[01]$/.test(oldLogsType)) {\n      session[LOGS_SESSION_KEY] = oldLogsType\n    }\n    if (oldRumType && /^[012]$/.test(oldRumType)) {\n      session[RUM_SESSION_KEY] = oldRumType\n    }\n\n    if (isSessionStarted(session)) {\n      expandSessionState(session)\n      cookieStoreStrategy.persistSession(session)\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,sBAAsB;AAEpD,SAASC,iBAAiB,QAAQ,wCAAwC;AAE1E,SAASC,kBAAkB,EAAEC,gBAAgB,QAAQ,gBAAgB;AAErE,OAAO,IAAMC,uBAAuB,GAAG,KAAK;AAC5C,OAAO,IAAMC,mBAAmB,GAAG,OAAO;AAC1C,OAAO,IAAMC,oBAAoB,GAAG,OAAO;AAE3C;AACA,OAAO,IAAMC,eAAe,GAAG,KAAK;AACpC,OAAO,IAAMC,gBAAgB,GAAG,MAAM;AAEtC;;;;AAIA,OAAM,SAAUC,sBAAsBA,CAACC,mBAAyC;EAC9E,IAAMC,aAAa,GAAGX,aAAa,CAACC,iBAAiB,CAAC;EACtD,IAAI,CAACU,aAAa,EAAE;IAClB,IAAMC,YAAY,GAAGZ,aAAa,CAACI,uBAAuB,CAAC;IAC3D,IAAMS,UAAU,GAAGb,aAAa,CAACK,mBAAmB,CAAC;IACrD,IAAMS,WAAW,GAAGd,aAAa,CAACM,oBAAoB,CAAC;IACvD,IAAMS,OAAO,GAAiB,EAAE;IAEhC,IAAIH,YAAY,EAAE;MAChBG,OAAO,CAACC,EAAE,GAAGJ,YAAY;IAC3B;IACA,IAAIE,WAAW,IAAI,QAAQ,CAACG,IAAI,CAACH,WAAW,CAAC,EAAE;MAC7CC,OAAO,CAACP,gBAAgB,CAAC,GAAGM,WAAW;IACzC;IACA,IAAID,UAAU,IAAI,SAAS,CAACI,IAAI,CAACJ,UAAU,CAAC,EAAE;MAC5CE,OAAO,CAACR,eAAe,CAAC,GAAGM,UAAU;IACvC;IAEA,IAAIV,gBAAgB,CAACY,OAAO,CAAC,EAAE;MAC7Bb,kBAAkB,CAACa,OAAO,CAAC;MAC3BL,mBAAmB,CAACQ,cAAc,CAACH,OAAO,CAAC;IAC7C;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}