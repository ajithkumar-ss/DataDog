{"ast":null,"code":"import { instrumentMethod } from '../tools/instrumentMethod';\nimport { Observable } from '../tools/observable';\nimport { elapsed, clocksNow, timeStampNow } from '../tools/utils/timeUtils';\nimport { normalizeUrl } from '../tools/utils/urlPolyfill';\nimport { shallowClone } from '../tools/utils/objectUtils';\nimport { addEventListener } from './addEventListener';\nvar xhrObservable;\nvar xhrContexts = new WeakMap();\nexport function initXhrObservable(configuration) {\n  if (!xhrObservable) {\n    xhrObservable = createXhrObservable(configuration);\n  }\n  return xhrObservable;\n}\nfunction createXhrObservable(configuration) {\n  return new Observable(function (observable) {\n    var stopInstrumentingStart = instrumentMethod(XMLHttpRequest.prototype, 'open', openXhr).stop;\n    var stopInstrumentingSend = instrumentMethod(XMLHttpRequest.prototype, 'send', function (call) {\n      sendXhr(call, configuration, observable);\n    }).stop;\n    var stopInstrumentingAbort = instrumentMethod(XMLHttpRequest.prototype, 'abort', abortXhr).stop;\n    return function () {\n      stopInstrumentingStart();\n      stopInstrumentingSend();\n      stopInstrumentingAbort();\n    };\n  });\n}\nfunction openXhr(_a) {\n  var xhr = _a.target,\n    _b = _a.parameters,\n    method = _b[0],\n    url = _b[1];\n  xhrContexts.set(xhr, {\n    state: 'open',\n    method: String(method).toUpperCase(),\n    url: normalizeUrl(String(url))\n  });\n}\nfunction sendXhr(_a, configuration, observable) {\n  var xhr = _a.target;\n  var context = xhrContexts.get(xhr);\n  if (!context) {\n    return;\n  }\n  var startContext = context;\n  startContext.state = 'start';\n  startContext.startClocks = clocksNow();\n  startContext.isAborted = false;\n  startContext.xhr = xhr;\n  var hasBeenReported = false;\n  var stopInstrumentingOnReadyStateChange = instrumentMethod(xhr, 'onreadystatechange', function () {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      // Try to report the XHR as soon as possible, because the XHR may be mutated by the\n      // application during a future event. For example, Angular is calling .abort() on\n      // completed requests during an onreadystatechange event, so the status becomes '0'\n      // before the request is collected.\n      onEnd();\n    }\n  }).stop;\n  var onEnd = function () {\n    unsubscribeLoadEndListener();\n    stopInstrumentingOnReadyStateChange();\n    if (hasBeenReported) {\n      return;\n    }\n    hasBeenReported = true;\n    var completeContext = context;\n    completeContext.state = 'complete';\n    completeContext.duration = elapsed(startContext.startClocks.timeStamp, timeStampNow());\n    completeContext.status = xhr.status;\n    observable.notify(shallowClone(completeContext));\n  };\n  var unsubscribeLoadEndListener = addEventListener(configuration, xhr, 'loadend', onEnd).stop;\n  observable.notify(startContext);\n}\nfunction abortXhr(_a) {\n  var xhr = _a.target;\n  var context = xhrContexts.get(xhr);\n  if (context) {\n    context.isAborted = true;\n  }\n}","map":{"version":3,"names":["instrumentMethod","Observable","elapsed","clocksNow","timeStampNow","normalizeUrl","shallowClone","addEventListener","xhrObservable","xhrContexts","WeakMap","initXhrObservable","configuration","createXhrObservable","observable","stopInstrumentingStart","XMLHttpRequest","prototype","openXhr","stop","stopInstrumentingSend","call","sendXhr","stopInstrumentingAbort","abortXhr","_a","xhr","target","_b","parameters","method","url","set","state","String","toUpperCase","context","get","startContext","startClocks","isAborted","hasBeenReported","stopInstrumentingOnReadyStateChange","readyState","DONE","onEnd","unsubscribeLoadEndListener","completeContext","duration","timeStamp","status","notify"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\browser\\xhrObservable.ts"],"sourcesContent":["import type { InstrumentedMethodCall } from '../tools/instrumentMethod'\nimport { instrumentMethod } from '../tools/instrumentMethod'\nimport { Observable } from '../tools/observable'\nimport type { Duration, ClocksState } from '../tools/utils/timeUtils'\nimport { elapsed, clocksNow, timeStampNow } from '../tools/utils/timeUtils'\nimport { normalizeUrl } from '../tools/utils/urlPolyfill'\nimport { shallowClone } from '../tools/utils/objectUtils'\nimport type { Configuration } from '../domain/configuration'\nimport { addEventListener } from './addEventListener'\n\nexport interface XhrOpenContext {\n  state: 'open'\n  method: string\n  url: string\n}\n\nexport interface XhrStartContext extends Omit<XhrOpenContext, 'state'> {\n  state: 'start'\n  startClocks: ClocksState\n  isAborted: boolean\n  xhr: XMLHttpRequest\n}\n\nexport interface XhrCompleteContext extends Omit<XhrStartContext, 'state'> {\n  state: 'complete'\n  duration: Duration\n  status: number\n}\n\nexport type XhrContext = XhrOpenContext | XhrStartContext | XhrCompleteContext\n\nlet xhrObservable: Observable<XhrContext> | undefined\nconst xhrContexts = new WeakMap<XMLHttpRequest, XhrContext>()\n\nexport function initXhrObservable(configuration: Configuration) {\n  if (!xhrObservable) {\n    xhrObservable = createXhrObservable(configuration)\n  }\n  return xhrObservable\n}\n\nfunction createXhrObservable(configuration: Configuration) {\n  return new Observable<XhrContext>((observable) => {\n    const { stop: stopInstrumentingStart } = instrumentMethod(XMLHttpRequest.prototype, 'open', openXhr)\n\n    const { stop: stopInstrumentingSend } = instrumentMethod(XMLHttpRequest.prototype, 'send', (call) => {\n      sendXhr(call, configuration, observable)\n    })\n\n    const { stop: stopInstrumentingAbort } = instrumentMethod(XMLHttpRequest.prototype, 'abort', abortXhr)\n\n    return () => {\n      stopInstrumentingStart()\n      stopInstrumentingSend()\n      stopInstrumentingAbort()\n    }\n  })\n}\n\nfunction openXhr({ target: xhr, parameters: [method, url] }: InstrumentedMethodCall<XMLHttpRequest, 'open'>) {\n  xhrContexts.set(xhr, {\n    state: 'open',\n    method: String(method).toUpperCase(),\n    url: normalizeUrl(String(url)),\n  })\n}\n\nfunction sendXhr(\n  { target: xhr }: InstrumentedMethodCall<XMLHttpRequest, 'send'>,\n  configuration: Configuration,\n  observable: Observable<XhrContext>\n) {\n  const context = xhrContexts.get(xhr)\n  if (!context) {\n    return\n  }\n\n  const startContext = context as XhrStartContext\n  startContext.state = 'start'\n  startContext.startClocks = clocksNow()\n  startContext.isAborted = false\n  startContext.xhr = xhr\n\n  let hasBeenReported = false\n\n  const { stop: stopInstrumentingOnReadyStateChange } = instrumentMethod(xhr, 'onreadystatechange', () => {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      // Try to report the XHR as soon as possible, because the XHR may be mutated by the\n      // application during a future event. For example, Angular is calling .abort() on\n      // completed requests during an onreadystatechange event, so the status becomes '0'\n      // before the request is collected.\n      onEnd()\n    }\n  })\n\n  const onEnd = () => {\n    unsubscribeLoadEndListener()\n    stopInstrumentingOnReadyStateChange()\n    if (hasBeenReported) {\n      return\n    }\n    hasBeenReported = true\n\n    const completeContext = context as XhrCompleteContext\n    completeContext.state = 'complete'\n    completeContext.duration = elapsed(startContext.startClocks.timeStamp, timeStampNow())\n    completeContext.status = xhr.status\n    observable.notify(shallowClone(completeContext))\n  }\n\n  const { stop: unsubscribeLoadEndListener } = addEventListener(configuration, xhr, 'loadend', onEnd)\n\n  observable.notify(startContext)\n}\n\nfunction abortXhr({ target: xhr }: InstrumentedMethodCall<XMLHttpRequest, 'abort'>) {\n  const context = xhrContexts.get(xhr) as XhrStartContext | undefined\n  if (context) {\n    context.isAborted = true\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}