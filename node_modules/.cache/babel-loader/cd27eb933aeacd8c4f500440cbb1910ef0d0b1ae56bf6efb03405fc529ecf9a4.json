{"ast":null,"code":"var _a;\nimport { assign, addEventListeners, DOM_EVENT } from '@datadog/browser-core';\nimport { NodePrivacyLevel } from '../../../constants';\nimport { IncrementalSource, MouseInteractionType } from '../../../types';\nimport { assembleIncrementalSnapshot } from '../assembly';\nimport { getEventTarget } from '../eventsUtils';\nimport { getNodePrivacyLevel } from '../privacy';\nimport { getSerializedNodeId, hasSerializedNode } from '../serialization';\nimport { tryToComputeCoordinates } from './trackMove';\nvar eventTypeToMouseInteraction = (_a = {},\n// Listen for pointerup DOM events instead of mouseup for MouseInteraction/MouseUp records. This\n// allows to reference such records from Frustration records.\n//\n// In the context of supporting Mobile Session Replay, we introduced `PointerInteraction` records\n// used by the Mobile SDKs in place of `MouseInteraction`. In the future, we should replace\n// `MouseInteraction` by `PointerInteraction` in the Browser SDK so we have an uniform way to\n// convey such interaction. This would cleanly solve the issue since we would have\n// `PointerInteraction/Up` records that we could reference from `Frustration` records.\n_a[DOM_EVENT.POINTER_UP] = MouseInteractionType.MouseUp, _a[DOM_EVENT.MOUSE_DOWN] = MouseInteractionType.MouseDown, _a[DOM_EVENT.CLICK] = MouseInteractionType.Click, _a[DOM_EVENT.CONTEXT_MENU] = MouseInteractionType.ContextMenu, _a[DOM_EVENT.DBL_CLICK] = MouseInteractionType.DblClick, _a[DOM_EVENT.FOCUS] = MouseInteractionType.Focus, _a[DOM_EVENT.BLUR] = MouseInteractionType.Blur, _a[DOM_EVENT.TOUCH_START] = MouseInteractionType.TouchStart, _a[DOM_EVENT.TOUCH_END] = MouseInteractionType.TouchEnd, _a);\nexport function trackMouseInteraction(configuration, mouseInteractionCb, recordIds) {\n  var handler = function (event) {\n    var target = getEventTarget(event);\n    if (getNodePrivacyLevel(target, configuration.defaultPrivacyLevel) === NodePrivacyLevel.HIDDEN || !hasSerializedNode(target)) {\n      return;\n    }\n    var id = getSerializedNodeId(target);\n    var type = eventTypeToMouseInteraction[event.type];\n    var interaction;\n    if (type !== MouseInteractionType.Blur && type !== MouseInteractionType.Focus) {\n      var coordinates = tryToComputeCoordinates(event);\n      if (!coordinates) {\n        return;\n      }\n      interaction = {\n        id: id,\n        type: type,\n        x: coordinates.x,\n        y: coordinates.y\n      };\n    } else {\n      interaction = {\n        id: id,\n        type: type\n      };\n    }\n    var record = assign({\n      id: recordIds.getIdForEvent(event)\n    }, assembleIncrementalSnapshot(IncrementalSource.MouseInteraction, interaction));\n    mouseInteractionCb(record);\n  };\n  return addEventListeners(configuration, document, Object.keys(eventTypeToMouseInteraction), handler, {\n    capture: true,\n    passive: true\n  });\n}","map":{"version":3,"names":["assign","addEventListeners","DOM_EVENT","NodePrivacyLevel","IncrementalSource","MouseInteractionType","assembleIncrementalSnapshot","getEventTarget","getNodePrivacyLevel","getSerializedNodeId","hasSerializedNode","tryToComputeCoordinates","eventTypeToMouseInteraction","_a","POINTER_UP","MouseUp","MOUSE_DOWN","MouseDown","CLICK","Click","CONTEXT_MENU","ContextMenu","DBL_CLICK","DblClick","FOCUS","Focus","BLUR","Blur","TOUCH_START","TouchStart","TOUCH_END","TouchEnd","trackMouseInteraction","configuration","mouseInteractionCb","recordIds","handler","event","target","defaultPrivacyLevel","HIDDEN","id","type","interaction","coordinates","x","y","record","getIdForEvent","MouseInteraction","document","Object","keys","capture","passive"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\record\\trackers\\trackMouseInteraction.ts"],"sourcesContent":["import { assign, addEventListeners, DOM_EVENT } from '@datadog/browser-core'\nimport type { RumConfiguration } from '@datadog/browser-rum-core'\nimport { NodePrivacyLevel } from '../../../constants'\nimport type { MouseInteraction, MouseInteractionData, BrowserIncrementalSnapshotRecord } from '../../../types'\nimport { IncrementalSource, MouseInteractionType } from '../../../types'\nimport { assembleIncrementalSnapshot } from '../assembly'\nimport { getEventTarget } from '../eventsUtils'\nimport { getNodePrivacyLevel } from '../privacy'\nimport { getSerializedNodeId, hasSerializedNode } from '../serialization'\nimport type { RecordIds } from '../recordIds'\nimport { tryToComputeCoordinates } from './trackMove'\nimport type { Tracker } from './types'\n\nconst eventTypeToMouseInteraction = {\n  // Listen for pointerup DOM events instead of mouseup for MouseInteraction/MouseUp records. This\n  // allows to reference such records from Frustration records.\n  //\n  // In the context of supporting Mobile Session Replay, we introduced `PointerInteraction` records\n  // used by the Mobile SDKs in place of `MouseInteraction`. In the future, we should replace\n  // `MouseInteraction` by `PointerInteraction` in the Browser SDK so we have an uniform way to\n  // convey such interaction. This would cleanly solve the issue since we would have\n  // `PointerInteraction/Up` records that we could reference from `Frustration` records.\n  [DOM_EVENT.POINTER_UP]: MouseInteractionType.MouseUp,\n\n  [DOM_EVENT.MOUSE_DOWN]: MouseInteractionType.MouseDown,\n  [DOM_EVENT.CLICK]: MouseInteractionType.Click,\n  [DOM_EVENT.CONTEXT_MENU]: MouseInteractionType.ContextMenu,\n  [DOM_EVENT.DBL_CLICK]: MouseInteractionType.DblClick,\n  [DOM_EVENT.FOCUS]: MouseInteractionType.Focus,\n  [DOM_EVENT.BLUR]: MouseInteractionType.Blur,\n  [DOM_EVENT.TOUCH_START]: MouseInteractionType.TouchStart,\n  [DOM_EVENT.TOUCH_END]: MouseInteractionType.TouchEnd,\n}\n\nexport type MouseInteractionCallback = (record: BrowserIncrementalSnapshotRecord) => void\n\nexport function trackMouseInteraction(\n  configuration: RumConfiguration,\n  mouseInteractionCb: MouseInteractionCallback,\n  recordIds: RecordIds\n): Tracker {\n  const handler = (event: MouseEvent | TouchEvent | FocusEvent) => {\n    const target = getEventTarget(event)\n    if (\n      getNodePrivacyLevel(target, configuration.defaultPrivacyLevel) === NodePrivacyLevel.HIDDEN ||\n      !hasSerializedNode(target)\n    ) {\n      return\n    }\n    const id = getSerializedNodeId(target)\n    const type = eventTypeToMouseInteraction[event.type as keyof typeof eventTypeToMouseInteraction]\n\n    let interaction: MouseInteraction\n    if (type !== MouseInteractionType.Blur && type !== MouseInteractionType.Focus) {\n      const coordinates = tryToComputeCoordinates(event as MouseEvent | TouchEvent)\n      if (!coordinates) {\n        return\n      }\n      interaction = { id, type, x: coordinates.x, y: coordinates.y }\n    } else {\n      interaction = { id, type }\n    }\n\n    const record = assign(\n      { id: recordIds.getIdForEvent(event) },\n      assembleIncrementalSnapshot<MouseInteractionData>(IncrementalSource.MouseInteraction, interaction)\n    )\n    mouseInteractionCb(record)\n  }\n  return addEventListeners(\n    configuration,\n    document,\n    Object.keys(eventTypeToMouseInteraction) as Array<keyof typeof eventTypeToMouseInteraction>,\n    handler,\n    {\n      capture: true,\n      passive: true,\n    }\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}