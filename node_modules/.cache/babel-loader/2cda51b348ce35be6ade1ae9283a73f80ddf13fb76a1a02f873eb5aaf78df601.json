{"ast":null,"code":"import { instrumentMethod } from '../tools/instrumentMethod';\nimport { monitor } from '../tools/monitor';\nimport { Observable } from '../tools/observable';\nimport { clocksNow } from '../tools/utils/timeUtils';\nimport { normalizeUrl } from '../tools/utils/urlPolyfill';\nvar fetchObservable;\nexport function initFetchObservable() {\n  if (!fetchObservable) {\n    fetchObservable = createFetchObservable();\n  }\n  return fetchObservable;\n}\nfunction createFetchObservable() {\n  return new Observable(function (observable) {\n    if (!window.fetch) {\n      return;\n    }\n    var stop = instrumentMethod(window, 'fetch', function (call) {\n      return beforeSend(call, observable);\n    }).stop;\n    return stop;\n  });\n}\nfunction beforeSend(_a, observable) {\n  var parameters = _a.parameters,\n    onPostCall = _a.onPostCall;\n  var input = parameters[0],\n    init = parameters[1];\n  var methodFromParams = init && init.method;\n  if (methodFromParams === undefined && input instanceof Request) {\n    methodFromParams = input.method;\n  }\n  var method = methodFromParams !== undefined ? String(methodFromParams).toUpperCase() : 'GET';\n  var url = input instanceof Request ? input.url : normalizeUrl(String(input));\n  var startClocks = clocksNow();\n  var context = {\n    state: 'start',\n    init: init,\n    input: input,\n    method: method,\n    startClocks: startClocks,\n    url: url\n  };\n  observable.notify(context);\n  // Those properties can be changed by observable subscribers\n  parameters[0] = context.input;\n  parameters[1] = context.init;\n  onPostCall(function (responsePromise) {\n    return afterSend(observable, responsePromise, context);\n  });\n}\nfunction afterSend(observable, responsePromise, startContext) {\n  var reportFetch = function (response) {\n    var context = startContext;\n    context.state = 'resolve';\n    if ('stack' in response || response instanceof Error) {\n      context.status = 0;\n      context.isAborted = response instanceof DOMException && response.code === DOMException.ABORT_ERR;\n      context.error = response;\n    } else if ('status' in response) {\n      context.response = response;\n      context.responseType = response.type;\n      context.status = response.status;\n      context.isAborted = false;\n    }\n    observable.notify(context);\n  };\n  responsePromise.then(monitor(reportFetch), monitor(reportFetch));\n}","map":{"version":3,"names":["instrumentMethod","monitor","Observable","clocksNow","normalizeUrl","fetchObservable","initFetchObservable","createFetchObservable","observable","window","fetch","stop","call","beforeSend","_a","parameters","onPostCall","input","init","methodFromParams","method","undefined","Request","String","toUpperCase","url","startClocks","context","state","notify","responsePromise","afterSend","startContext","reportFetch","response","Error","status","isAborted","DOMException","code","ABORT_ERR","error","responseType","type","then"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\browser\\fetchObservable.ts"],"sourcesContent":["import type { InstrumentedMethodCall } from '../tools/instrumentMethod'\nimport { instrumentMethod } from '../tools/instrumentMethod'\nimport { monitor } from '../tools/monitor'\nimport { Observable } from '../tools/observable'\nimport type { ClocksState } from '../tools/utils/timeUtils'\nimport { clocksNow } from '../tools/utils/timeUtils'\nimport { normalizeUrl } from '../tools/utils/urlPolyfill'\n\ninterface FetchContextBase {\n  method: string\n  startClocks: ClocksState\n  input: unknown\n  init?: RequestInit\n  url: string\n}\n\nexport interface FetchStartContext extends FetchContextBase {\n  state: 'start'\n}\n\nexport interface FetchResolveContext extends FetchContextBase {\n  state: 'resolve'\n  status: number\n  response?: Response\n  responseType?: string\n  isAborted: boolean\n  error?: Error\n}\n\nexport type FetchContext = FetchStartContext | FetchResolveContext\n\nlet fetchObservable: Observable<FetchContext> | undefined\n\nexport function initFetchObservable() {\n  if (!fetchObservable) {\n    fetchObservable = createFetchObservable()\n  }\n  return fetchObservable\n}\n\nfunction createFetchObservable() {\n  return new Observable<FetchContext>((observable) => {\n    if (!window.fetch) {\n      return\n    }\n\n    const { stop } = instrumentMethod(window, 'fetch', (call) => beforeSend(call, observable))\n\n    return stop\n  })\n}\n\nfunction beforeSend(\n  { parameters, onPostCall }: InstrumentedMethodCall<Window, 'fetch'>,\n  observable: Observable<FetchContext>\n) {\n  const [input, init] = parameters\n  let methodFromParams = init && init.method\n\n  if (methodFromParams === undefined && input instanceof Request) {\n    methodFromParams = input.method\n  }\n\n  const method = methodFromParams !== undefined ? String(methodFromParams).toUpperCase() : 'GET'\n  const url = input instanceof Request ? input.url : normalizeUrl(String(input))\n  const startClocks = clocksNow()\n\n  const context: FetchStartContext = {\n    state: 'start',\n    init,\n    input,\n    method,\n    startClocks,\n    url,\n  }\n\n  observable.notify(context)\n\n  // Those properties can be changed by observable subscribers\n  parameters[0] = context.input as RequestInfo | URL\n  parameters[1] = context.init\n\n  onPostCall((responsePromise) => afterSend(observable, responsePromise, context))\n}\n\nfunction afterSend(\n  observable: Observable<FetchContext>,\n  responsePromise: Promise<Response>,\n  startContext: FetchStartContext\n) {\n  const reportFetch = (response: Response | Error) => {\n    const context = startContext as unknown as FetchResolveContext\n    context.state = 'resolve'\n    if ('stack' in response || response instanceof Error) {\n      context.status = 0\n      context.isAborted = response instanceof DOMException && response.code === DOMException.ABORT_ERR\n      context.error = response\n    } else if ('status' in response) {\n      context.response = response\n      context.responseType = response.type\n      context.status = response.status\n      context.isAborted = false\n    }\n    observable.notify(context)\n  }\n\n  responsePromise.then(monitor(reportFetch), monitor(reportFetch))\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}