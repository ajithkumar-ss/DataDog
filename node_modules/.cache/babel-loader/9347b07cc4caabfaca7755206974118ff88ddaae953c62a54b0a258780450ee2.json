{"ast":null,"code":"import { combine, isEmptyObject, timeStampNow, currentDrift, display, createEventRateLimiter, canUseEventBridge, assign, round, isExperimentalFeatureEnabled, ExperimentalFeature, getConnectivity } from '@datadog/browser-core';\nimport { getSyntheticsContext } from './contexts/syntheticsContext';\nimport { limitModification } from './limitModification';\nvar VIEW_MODIFIABLE_FIELD_PATHS = {\n  'view.name': 'string',\n  'view.url': 'string',\n  'view.referrer': 'string'\n};\nvar USER_CUSTOMIZABLE_FIELD_PATHS = {\n  context: 'object'\n};\nvar modifiableFieldPathsByEvent;\nexport function startRumAssembly(configuration, lifeCycle, sessionManager, viewContexts, urlContexts, actionContexts, displayContext, ciVisibilityContext, getCommonContext, reportError) {\n  var _a, _b;\n  modifiableFieldPathsByEvent = (_a = {}, _a[\"view\" /* RumEventType.VIEW */] = VIEW_MODIFIABLE_FIELD_PATHS, _a[\"error\" /* RumEventType.ERROR */] = assign({\n    'error.message': 'string',\n    'error.stack': 'string',\n    'error.resource.url': 'string',\n    'error.fingerprint': 'string'\n  }, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS), _a[\"resource\" /* RumEventType.RESOURCE */] = assign({\n    'resource.url': 'string'\n  }, isExperimentalFeatureEnabled(ExperimentalFeature.WRITABLE_RESOURCE_GRAPHQL) && {\n    'resource.graphql': 'object'\n  }, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS), _a[\"action\" /* RumEventType.ACTION */] = assign({\n    'action.target.name': 'string'\n  }, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS), _a[\"long_task\" /* RumEventType.LONG_TASK */] = assign({}, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS), _a[\"vital\" /* RumEventType.VITAL */] = assign({}, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS), _a);\n  var eventRateLimiters = (_b = {}, _b[\"error\" /* RumEventType.ERROR */] = createEventRateLimiter(\"error\" /* RumEventType.ERROR */, configuration.eventRateLimiterThreshold, reportError), _b[\"action\" /* RumEventType.ACTION */] = createEventRateLimiter(\"action\" /* RumEventType.ACTION */, configuration.eventRateLimiterThreshold, reportError), _b[\"vital\" /* RumEventType.VITAL */] = createEventRateLimiter(\"vital\" /* RumEventType.VITAL */, configuration.eventRateLimiterThreshold, reportError), _b);\n  var syntheticsContext = getSyntheticsContext();\n  lifeCycle.subscribe(12 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, function (_a) {\n    var startTime = _a.startTime,\n      rawRumEvent = _a.rawRumEvent,\n      domainContext = _a.domainContext,\n      savedCommonContext = _a.savedCommonContext,\n      customerContext = _a.customerContext;\n    var viewContext = viewContexts.findView(startTime);\n    var urlContext = urlContexts.findUrl(startTime);\n    var session = sessionManager.findTrackedSession(startTime);\n    if (session && viewContext && urlContext) {\n      var commonContext = savedCommonContext || getCommonContext();\n      var actionId = actionContexts.findActionId(startTime);\n      var rumContext = {\n        _dd: {\n          format_version: 2,\n          drift: currentDrift(),\n          configuration: {\n            session_sample_rate: round(configuration.sessionSampleRate, 3),\n            session_replay_sample_rate: round(configuration.sessionReplaySampleRate, 3)\n          },\n          browser_sdk_version: canUseEventBridge() ? \"5.17.1\" : undefined\n        },\n        application: {\n          id: configuration.applicationId\n        },\n        date: timeStampNow(),\n        service: viewContext.service || configuration.service,\n        version: viewContext.version || configuration.version,\n        source: 'browser',\n        session: {\n          id: session.id,\n          type: syntheticsContext ? \"synthetics\" /* SessionType.SYNTHETICS */ : ciVisibilityContext.get() ? \"ci_test\" /* SessionType.CI_TEST */ : \"user\" /* SessionType.USER */\n        },\n        view: {\n          id: viewContext.id,\n          name: viewContext.name,\n          url: urlContext.url,\n          referrer: urlContext.referrer\n        },\n        action: needToAssembleWithAction(rawRumEvent) && actionId ? {\n          id: actionId\n        } : undefined,\n        synthetics: syntheticsContext,\n        ci_test: ciVisibilityContext.get(),\n        display: displayContext.get(),\n        connectivity: getConnectivity()\n      };\n      var serverRumEvent = combine(rumContext, rawRumEvent);\n      serverRumEvent.context = combine(commonContext.context, customerContext);\n      if (!('has_replay' in serverRumEvent.session)) {\n        ;\n        serverRumEvent.session.has_replay = commonContext.hasReplay;\n      }\n      if (serverRumEvent.type === 'view') {\n        ;\n        serverRumEvent.session.sampled_for_replay = session.sessionReplayAllowed;\n      }\n      if (!isEmptyObject(commonContext.user)) {\n        ;\n        serverRumEvent.usr = commonContext.user;\n      }\n      if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, eventRateLimiters)) {\n        if (isEmptyObject(serverRumEvent.context)) {\n          delete serverRumEvent.context;\n        }\n        lifeCycle.notify(13 /* LifeCycleEventType.RUM_EVENT_COLLECTED */, serverRumEvent);\n      }\n    }\n  });\n}\nfunction shouldSend(event, beforeSend, domainContext, eventRateLimiters) {\n  var _a;\n  if (beforeSend) {\n    var result = limitModification(event, modifiableFieldPathsByEvent[event.type], function (event) {\n      return beforeSend(event, domainContext);\n    });\n    if (result === false && event.type !== \"view\" /* RumEventType.VIEW */) {\n      return false;\n    }\n    if (result === false) {\n      display.warn(\"Can't dismiss view events using beforeSend!\");\n    }\n  }\n  var rateLimitReached = (_a = eventRateLimiters[event.type]) === null || _a === void 0 ? void 0 : _a.isLimitReached();\n  return !rateLimitReached;\n}\nfunction needToAssembleWithAction(event) {\n  return [\"error\" /* RumEventType.ERROR */, \"resource\" /* RumEventType.RESOURCE */, \"long_task\" /* RumEventType.LONG_TASK */].indexOf(event.type) !== -1;\n}","map":{"version":3,"names":["combine","isEmptyObject","timeStampNow","currentDrift","display","createEventRateLimiter","canUseEventBridge","assign","round","isExperimentalFeatureEnabled","ExperimentalFeature","getConnectivity","getSyntheticsContext","limitModification","VIEW_MODIFIABLE_FIELD_PATHS","USER_CUSTOMIZABLE_FIELD_PATHS","context","modifiableFieldPathsByEvent","startRumAssembly","configuration","lifeCycle","sessionManager","viewContexts","urlContexts","actionContexts","displayContext","ciVisibilityContext","getCommonContext","reportError","_a","WRITABLE_RESOURCE_GRAPHQL","eventRateLimiters","_b","eventRateLimiterThreshold","syntheticsContext","subscribe","startTime","rawRumEvent","domainContext","savedCommonContext","customerContext","viewContext","findView","urlContext","findUrl","session","findTrackedSession","commonContext","actionId","findActionId","rumContext","_dd","format_version","drift","session_sample_rate","sessionSampleRate","session_replay_sample_rate","sessionReplaySampleRate","browser_sdk_version","undefined","application","id","applicationId","date","service","version","source","type","get","view","name","url","referrer","action","needToAssembleWithAction","synthetics","ci_test","connectivity","serverRumEvent","has_replay","hasReplay","sampled_for_replay","sessionReplayAllowed","user","usr","shouldSend","beforeSend","notify","event","result","warn","rateLimitReached","isLimitReached","indexOf"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum-core\\src\\domain\\assembly.ts"],"sourcesContent":["import type { Context, RawError, EventRateLimiter, User } from '@datadog/browser-core'\nimport {\n  combine,\n  isEmptyObject,\n  timeStampNow,\n  currentDrift,\n  display,\n  createEventRateLimiter,\n  canUseEventBridge,\n  assign,\n  round,\n  isExperimentalFeatureEnabled,\n  ExperimentalFeature,\n  getConnectivity,\n} from '@datadog/browser-core'\nimport type { RumEventDomainContext } from '../domainContext.types'\nimport type {\n  RawRumErrorEvent,\n  RawRumEvent,\n  RawRumLongTaskEvent,\n  RawRumResourceEvent,\n  RumContext,\n} from '../rawRumEvent.types'\nimport { RumEventType } from '../rawRumEvent.types'\nimport type { RumEvent } from '../rumEvent.types'\nimport { getSyntheticsContext } from './contexts/syntheticsContext'\nimport type { CiVisibilityContext } from './contexts/ciVisibilityContext'\nimport type { LifeCycle } from './lifeCycle'\nimport { LifeCycleEventType } from './lifeCycle'\nimport type { ViewContexts } from './contexts/viewContexts'\nimport type { RumSessionManager } from './rumSessionManager'\nimport type { UrlContexts } from './contexts/urlContexts'\nimport type { RumConfiguration } from './configuration'\nimport type { ActionContexts } from './action/actionCollection'\nimport type { DisplayContext } from './contexts/displayContext'\nimport type { CommonContext } from './contexts/commonContext'\nimport type { ModifiableFieldPaths } from './limitModification'\nimport { limitModification } from './limitModification'\n\n// replaced at build time\ndeclare const __BUILD_ENV__SDK_VERSION__: string\n\nconst enum SessionType {\n  SYNTHETICS = 'synthetics',\n  USER = 'user',\n  CI_TEST = 'ci_test',\n}\n\nconst VIEW_MODIFIABLE_FIELD_PATHS: ModifiableFieldPaths = {\n  'view.name': 'string',\n  'view.url': 'string',\n  'view.referrer': 'string',\n}\n\nconst USER_CUSTOMIZABLE_FIELD_PATHS: ModifiableFieldPaths = {\n  context: 'object',\n}\n\nlet modifiableFieldPathsByEvent: { [key in RumEventType]: ModifiableFieldPaths }\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] }\n\nexport function startRumAssembly(\n  configuration: RumConfiguration,\n  lifeCycle: LifeCycle,\n  sessionManager: RumSessionManager,\n  viewContexts: ViewContexts,\n  urlContexts: UrlContexts,\n  actionContexts: ActionContexts,\n  displayContext: DisplayContext,\n  ciVisibilityContext: CiVisibilityContext,\n  getCommonContext: () => CommonContext,\n  reportError: (error: RawError) => void\n) {\n  modifiableFieldPathsByEvent = {\n    [RumEventType.VIEW]: VIEW_MODIFIABLE_FIELD_PATHS,\n    [RumEventType.ERROR]: assign(\n      {\n        'error.message': 'string',\n        'error.stack': 'string',\n        'error.resource.url': 'string',\n        'error.fingerprint': 'string',\n      },\n      USER_CUSTOMIZABLE_FIELD_PATHS,\n      VIEW_MODIFIABLE_FIELD_PATHS\n    ),\n    [RumEventType.RESOURCE]: assign(\n      {\n        'resource.url': 'string',\n      },\n      isExperimentalFeatureEnabled(ExperimentalFeature.WRITABLE_RESOURCE_GRAPHQL) && {\n        'resource.graphql': 'object',\n      },\n      USER_CUSTOMIZABLE_FIELD_PATHS,\n      VIEW_MODIFIABLE_FIELD_PATHS\n    ),\n    [RumEventType.ACTION]: assign(\n      {\n        'action.target.name': 'string',\n      },\n      USER_CUSTOMIZABLE_FIELD_PATHS,\n      VIEW_MODIFIABLE_FIELD_PATHS\n    ),\n    [RumEventType.LONG_TASK]: assign({}, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS),\n    [RumEventType.VITAL]: assign({}, USER_CUSTOMIZABLE_FIELD_PATHS, VIEW_MODIFIABLE_FIELD_PATHS),\n  }\n  const eventRateLimiters = {\n    [RumEventType.ERROR]: createEventRateLimiter(\n      RumEventType.ERROR,\n      configuration.eventRateLimiterThreshold,\n      reportError\n    ),\n    [RumEventType.ACTION]: createEventRateLimiter(\n      RumEventType.ACTION,\n      configuration.eventRateLimiterThreshold,\n      reportError\n    ),\n    [RumEventType.VITAL]: createEventRateLimiter(\n      RumEventType.VITAL,\n      configuration.eventRateLimiterThreshold,\n      reportError\n    ),\n  }\n\n  const syntheticsContext = getSyntheticsContext()\n  lifeCycle.subscribe(\n    LifeCycleEventType.RAW_RUM_EVENT_COLLECTED,\n    ({ startTime, rawRumEvent, domainContext, savedCommonContext, customerContext }) => {\n      const viewContext = viewContexts.findView(startTime)\n      const urlContext = urlContexts.findUrl(startTime)\n      const session = sessionManager.findTrackedSession(startTime)\n      if (session && viewContext && urlContext) {\n        const commonContext = savedCommonContext || getCommonContext()\n        const actionId = actionContexts.findActionId(startTime)\n\n        const rumContext: RumContext = {\n          _dd: {\n            format_version: 2,\n            drift: currentDrift(),\n            configuration: {\n              session_sample_rate: round(configuration.sessionSampleRate, 3),\n              session_replay_sample_rate: round(configuration.sessionReplaySampleRate, 3),\n            },\n            browser_sdk_version: canUseEventBridge() ? __BUILD_ENV__SDK_VERSION__ : undefined,\n          },\n          application: {\n            id: configuration.applicationId,\n          },\n          date: timeStampNow(),\n          service: viewContext.service || configuration.service,\n          version: viewContext.version || configuration.version,\n          source: 'browser',\n          session: {\n            id: session.id,\n            type: syntheticsContext\n              ? SessionType.SYNTHETICS\n              : ciVisibilityContext.get()\n                ? SessionType.CI_TEST\n                : SessionType.USER,\n          },\n          view: {\n            id: viewContext.id,\n            name: viewContext.name,\n            url: urlContext.url,\n            referrer: urlContext.referrer,\n          },\n          action: needToAssembleWithAction(rawRumEvent) && actionId ? { id: actionId } : undefined,\n          synthetics: syntheticsContext,\n          ci_test: ciVisibilityContext.get(),\n          display: displayContext.get(),\n          connectivity: getConnectivity(),\n        }\n\n        const serverRumEvent = combine(rumContext as RumContext & Context, rawRumEvent) as RumEvent & Context\n        serverRumEvent.context = combine(commonContext.context, customerContext)\n\n        if (!('has_replay' in serverRumEvent.session)) {\n          ;(serverRumEvent.session as Mutable<RumEvent['session']>).has_replay = commonContext.hasReplay\n        }\n        if (serverRumEvent.type === 'view') {\n          ;(serverRumEvent.session as Mutable<RumEvent['session']>).sampled_for_replay = session.sessionReplayAllowed\n        }\n\n        if (!isEmptyObject(commonContext.user)) {\n          ;(serverRumEvent.usr as Mutable<RumEvent['usr']>) = commonContext.user as User & Context\n        }\n\n        if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, eventRateLimiters)) {\n          if (isEmptyObject(serverRumEvent.context)) {\n            delete serverRumEvent.context\n          }\n          lifeCycle.notify(LifeCycleEventType.RUM_EVENT_COLLECTED, serverRumEvent)\n        }\n      }\n    }\n  )\n}\n\nfunction shouldSend(\n  event: RumEvent & Context,\n  beforeSend: RumConfiguration['beforeSend'],\n  domainContext: RumEventDomainContext,\n  eventRateLimiters: { [key in RumEventType]?: EventRateLimiter }\n) {\n  if (beforeSend) {\n    const result = limitModification(event, modifiableFieldPathsByEvent[event.type], (event) =>\n      beforeSend(event, domainContext)\n    )\n    if (result === false && event.type !== RumEventType.VIEW) {\n      return false\n    }\n    if (result === false) {\n      display.warn(\"Can't dismiss view events using beforeSend!\")\n    }\n  }\n\n  const rateLimitReached = eventRateLimiters[event.type]?.isLimitReached()\n  return !rateLimitReached\n}\n\nfunction needToAssembleWithAction(\n  event: RawRumEvent\n): event is RawRumErrorEvent | RawRumResourceEvent | RawRumLongTaskEvent {\n  return [RumEventType.ERROR, RumEventType.RESOURCE, RumEventType.LONG_TASK].indexOf(event.type) !== -1\n}\n"],"mappings":"AACA,SACEA,OAAO,EACPC,aAAa,EACbC,YAAY,EACZC,YAAY,EACZC,OAAO,EACPC,sBAAsB,EACtBC,iBAAiB,EACjBC,MAAM,EACNC,KAAK,EACLC,4BAA4B,EAC5BC,mBAAmB,EACnBC,eAAe,QACV,uBAAuB;AAW9B,SAASC,oBAAoB,QAAQ,8BAA8B;AAYnE,SAASC,iBAAiB,QAAQ,qBAAqB;AAWvD,IAAMC,2BAA2B,GAAyB;EACxD,WAAW,EAAE,QAAQ;EACrB,UAAU,EAAE,QAAQ;EACpB,eAAe,EAAE;CAClB;AAED,IAAMC,6BAA6B,GAAyB;EAC1DC,OAAO,EAAE;CACV;AAED,IAAIC,2BAA4E;AAIhF,OAAM,SAAUC,gBAAgBA,CAC9BC,aAA+B,EAC/BC,SAAoB,EACpBC,cAAiC,EACjCC,YAA0B,EAC1BC,WAAwB,EACxBC,cAA8B,EAC9BC,cAA8B,EAC9BC,mBAAwC,EACxCC,gBAAqC,EACrCC,WAAsC;;EAEtCX,2BAA2B,IAAAY,EAAA,OACzBA,EAAA,mCAAqBf,2BAA2B,EAChDe,EAAA,qCAAsBtB,MAAM,CAC1B;IACE,eAAe,EAAE,QAAQ;IACzB,aAAa,EAAE,QAAQ;IACvB,oBAAoB,EAAE,QAAQ;IAC9B,mBAAmB,EAAE;GACtB,EACDQ,6BAA6B,EAC7BD,2BAA2B,CAC5B,EACDe,EAAA,2CAAyBtB,MAAM,CAC7B;IACE,cAAc,EAAE;GACjB,EACDE,4BAA4B,CAACC,mBAAmB,CAACoB,yBAAyB,CAAC,IAAI;IAC7E,kBAAkB,EAAE;GACrB,EACDf,6BAA6B,EAC7BD,2BAA2B,CAC5B,EACDe,EAAA,uCAAuBtB,MAAM,CAC3B;IACE,oBAAoB,EAAE;GACvB,EACDQ,6BAA6B,EAC7BD,2BAA2B,CAC5B,EACDe,EAAA,6CAA0BtB,MAAM,CAAC,EAAE,EAAEQ,6BAA6B,EAAED,2BAA2B,CAAC,EAChGe,EAAA,qCAAsBtB,MAAM,CAAC,EAAE,EAAEQ,6BAA6B,EAAED,2BAA2B,CAAC,E,GAC7F;EACD,IAAMiB,iBAAiB,IAAAC,EAAA,OACrBA,EAAA,qCAAsB3B,sBAAsB,mCAE1Cc,aAAa,CAACc,yBAAyB,EACvCL,WAAW,CACZ,EACDI,EAAA,uCAAuB3B,sBAAsB,qCAE3Cc,aAAa,CAACc,yBAAyB,EACvCL,WAAW,CACZ,EACDI,EAAA,qCAAsB3B,sBAAsB,mCAE1Cc,aAAa,CAACc,yBAAyB,EACvCL,WAAW,CACZ,E,GACF;EAED,IAAMM,iBAAiB,GAAGtB,oBAAoB,EAAE;EAChDQ,SAAS,CAACe,SAAS,sDAEjB,UAACN,EAA8E;QAA5EO,SAAS,GAAAP,EAAA,CAAAO,SAAA;MAAEC,WAAW,GAAAR,EAAA,CAAAQ,WAAA;MAAEC,aAAa,GAAAT,EAAA,CAAAS,aAAA;MAAEC,kBAAkB,GAAAV,EAAA,CAAAU,kBAAA;MAAEC,eAAe,GAAAX,EAAA,CAAAW,eAAA;IAC3E,IAAMC,WAAW,GAAGnB,YAAY,CAACoB,QAAQ,CAACN,SAAS,CAAC;IACpD,IAAMO,UAAU,GAAGpB,WAAW,CAACqB,OAAO,CAACR,SAAS,CAAC;IACjD,IAAMS,OAAO,GAAGxB,cAAc,CAACyB,kBAAkB,CAACV,SAAS,CAAC;IAC5D,IAAIS,OAAO,IAAIJ,WAAW,IAAIE,UAAU,EAAE;MACxC,IAAMI,aAAa,GAAGR,kBAAkB,IAAIZ,gBAAgB,EAAE;MAC9D,IAAMqB,QAAQ,GAAGxB,cAAc,CAACyB,YAAY,CAACb,SAAS,CAAC;MAEvD,IAAMc,UAAU,GAAe;QAC7BC,GAAG,EAAE;UACHC,cAAc,EAAE,CAAC;UACjBC,KAAK,EAAElD,YAAY,EAAE;UACrBgB,aAAa,EAAE;YACbmC,mBAAmB,EAAE9C,KAAK,CAACW,aAAa,CAACoC,iBAAiB,EAAE,CAAC,CAAC;YAC9DC,0BAA0B,EAAEhD,KAAK,CAACW,aAAa,CAACsC,uBAAuB,EAAE,CAAC;WAC3E;UACDC,mBAAmB,EAAEpD,iBAAiB,EAAE,GAAG,WAAAqD;SAC5C;QACDC,WAAW,EAAE;UACXC,EAAE,EAAE1C,aAAa,CAAC2C;SACnB;QACDC,IAAI,EAAE7D,YAAY,EAAE;QACpB8D,OAAO,EAAEvB,WAAW,CAACuB,OAAO,IAAI7C,aAAa,CAAC6C,OAAO;QACrDC,OAAO,EAAExB,WAAW,CAACwB,OAAO,IAAI9C,aAAa,CAAC8C,OAAO;QACrDC,MAAM,EAAE,SAAS;QACjBrB,OAAO,EAAE;UACPgB,EAAE,EAAEhB,OAAO,CAACgB,EAAE;UACdM,IAAI,EAAEjC,iBAAiB,GACpB,4CACCR,mBAAmB,CAAC0C,GAAG,EAAE,GACxB,sCACA;SACN;QACDC,IAAI,EAAE;UACJR,EAAE,EAAEpB,WAAW,CAACoB,EAAE;UAClBS,IAAI,EAAE7B,WAAW,CAAC6B,IAAI;UACtBC,GAAG,EAAE5B,UAAU,CAAC4B,GAAG;UACnBC,QAAQ,EAAE7B,UAAU,CAAC6B;SACtB;QACDC,MAAM,EAAEC,wBAAwB,CAACrC,WAAW,CAAC,IAAIW,QAAQ,GAAG;UAAEa,EAAE,EAAEb;QAAQ,CAAE,GAAGW,SAAS;QACxFgB,UAAU,EAAEzC,iBAAiB;QAC7B0C,OAAO,EAAElD,mBAAmB,CAAC0C,GAAG,EAAE;QAClChE,OAAO,EAAEqB,cAAc,CAAC2C,GAAG,EAAE;QAC7BS,YAAY,EAAElE,eAAe;OAC9B;MAED,IAAMmE,cAAc,GAAG9E,OAAO,CAACkD,UAAkC,EAAEb,WAAW,CAAuB;MACrGyC,cAAc,CAAC9D,OAAO,GAAGhB,OAAO,CAAC+C,aAAa,CAAC/B,OAAO,EAAEwB,eAAe,CAAC;MAExE,IAAI,EAAE,YAAY,IAAIsC,cAAc,CAACjC,OAAO,CAAC,EAAE;QAC7C;QAAEiC,cAAc,CAACjC,OAAwC,CAACkC,UAAU,GAAGhC,aAAa,CAACiC,SAAS;MAChG;MACA,IAAIF,cAAc,CAACX,IAAI,KAAK,MAAM,EAAE;QAClC;QAAEW,cAAc,CAACjC,OAAwC,CAACoC,kBAAkB,GAAGpC,OAAO,CAACqC,oBAAoB;MAC7G;MAEA,IAAI,CAACjF,aAAa,CAAC8C,aAAa,CAACoC,IAAI,CAAC,EAAE;QACtC;QAAEL,cAAc,CAACM,GAAgC,GAAGrC,aAAa,CAACoC,IAAsB;MAC1F;MAEA,IAAIE,UAAU,CAACP,cAAc,EAAE3D,aAAa,CAACmE,UAAU,EAAEhD,aAAa,EAAEP,iBAAiB,CAAC,EAAE;QAC1F,IAAI9B,aAAa,CAAC6E,cAAc,CAAC9D,OAAO,CAAC,EAAE;UACzC,OAAO8D,cAAc,CAAC9D,OAAO;QAC/B;QACAI,SAAS,CAACmE,MAAM,kDAAyCT,cAAc,CAAC;MAC1E;IACF;EACF,CAAC,CACF;AACH;AAEA,SAASO,UAAUA,CACjBG,KAAyB,EACzBF,UAA0C,EAC1ChD,aAAoC,EACpCP,iBAA+D;;EAE/D,IAAIuD,UAAU,EAAE;IACd,IAAMG,MAAM,GAAG5E,iBAAiB,CAAC2E,KAAK,EAAEvE,2BAA2B,CAACuE,KAAK,CAACrB,IAAI,CAAC,EAAE,UAACqB,KAAK;MACrF,OAAAF,UAAU,CAACE,KAAK,EAAElD,aAAa,CAAC;IAAhC,CAAgC,CACjC;IACD,IAAImD,MAAM,KAAK,KAAK,IAAID,KAAK,CAACrB,IAAI,qCAAwB;MACxD,OAAO,KAAK;IACd;IACA,IAAIsB,MAAM,KAAK,KAAK,EAAE;MACpBrF,OAAO,CAACsF,IAAI,CAAC,6CAA6C,CAAC;IAC7D;EACF;EAEA,IAAMC,gBAAgB,GAAG,CAAA9D,EAAA,GAAAE,iBAAiB,CAACyD,KAAK,CAACrB,IAAI,CAAC,cAAAtC,EAAA,uBAAAA,EAAA,CAAE+D,cAAc,EAAE;EACxE,OAAO,CAACD,gBAAgB;AAC1B;AAEA,SAASjB,wBAAwBA,CAC/Bc,KAAkB;EAElB,OAAO,oHAAmE,CAACK,OAAO,CAACL,KAAK,CAACrB,IAAI,CAAC,KAAK,CAAC,CAAC;AACvG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}