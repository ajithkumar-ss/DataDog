{"ast":null,"code":"import { catchUserErrors } from '../../tools/catchUserErrors';\nimport { display } from '../../tools/display';\nimport { ExperimentalFeature, addExperimentalFeatures } from '../../tools/experimentalFeatures';\nimport { ONE_SECOND } from '../../tools/utils/timeUtils';\nimport { isPercentage } from '../../tools/utils/numberUtils';\nimport { ONE_KIBI_BYTE } from '../../tools/utils/byteUtils';\nimport { objectHasValue } from '../../tools/utils/objectUtils';\nimport { assign } from '../../tools/utils/polyfills';\nimport { selectSessionStoreStrategyType } from '../session/sessionStore';\nimport { TrackingConsent } from '../trackingConsent';\nimport { computeTransportConfiguration } from './transportConfiguration';\nexport var DOC_LINK = 'https://docs.datadoghq.com/getting_started/site/';\nexport var DefaultPrivacyLevel = {\n  ALLOW: 'allow',\n  MASK: 'mask',\n  MASK_USER_INPUT: 'mask-user-input'\n};\nexport var TraceContextInjection = {\n  ALL: 'all',\n  SAMPLED: 'sampled'\n};\nfunction isDatadogSite(site) {\n  return /(datadog|ddog|datad0g|dd0g)/.test(site);\n}\nexport function validateAndBuildConfiguration(initConfiguration) {\n  var _a, _b, _c, _d, _e;\n  if (!initConfiguration || !initConfiguration.clientToken) {\n    display.error('Client Token is not configured, we will not send any data.');\n    return;\n  }\n  if (initConfiguration.sessionSampleRate !== undefined && !isPercentage(initConfiguration.sessionSampleRate)) {\n    display.error('Session Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  if (initConfiguration.telemetrySampleRate !== undefined && !isPercentage(initConfiguration.telemetrySampleRate)) {\n    display.error('Telemetry Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  if (initConfiguration.telemetryConfigurationSampleRate !== undefined && !isPercentage(initConfiguration.telemetryConfigurationSampleRate)) {\n    display.error('Telemetry Configuration Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  if (initConfiguration.telemetryUsageSampleRate !== undefined && !isPercentage(initConfiguration.telemetryUsageSampleRate)) {\n    display.error('Telemetry Usage Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  if (initConfiguration.trackingConsent !== undefined && !objectHasValue(TrackingConsent, initConfiguration.trackingConsent)) {\n    display.error('Tracking Consent should be either \"granted\" or \"not-granted\"');\n    return;\n  }\n  if (initConfiguration.site && !isDatadogSite(initConfiguration.site)) {\n    display.error(\"Site should be a valid Datadog site. Learn more here: \".concat(DOC_LINK, \".\"));\n    return;\n  }\n  // Set the experimental feature flags as early as possible, so we can use them in most places\n  if (Array.isArray(initConfiguration.enableExperimentalFeatures)) {\n    addExperimentalFeatures(initConfiguration.enableExperimentalFeatures.filter(function (flag) {\n      return objectHasValue(ExperimentalFeature, flag);\n    }));\n  }\n  return assign({\n    beforeSend: initConfiguration.beforeSend && catchUserErrors(initConfiguration.beforeSend, 'beforeSend threw an error:'),\n    sessionStoreStrategyType: selectSessionStoreStrategyType(initConfiguration),\n    sessionSampleRate: (_a = initConfiguration.sessionSampleRate) !== null && _a !== void 0 ? _a : 100,\n    telemetrySampleRate: (_b = initConfiguration.telemetrySampleRate) !== null && _b !== void 0 ? _b : 20,\n    telemetryConfigurationSampleRate: (_c = initConfiguration.telemetryConfigurationSampleRate) !== null && _c !== void 0 ? _c : 5,\n    telemetryUsageSampleRate: (_d = initConfiguration.telemetryUsageSampleRate) !== null && _d !== void 0 ? _d : 5,\n    service: initConfiguration.service,\n    silentMultipleInit: !!initConfiguration.silentMultipleInit,\n    allowUntrustedEvents: !!initConfiguration.allowUntrustedEvents,\n    trackingConsent: (_e = initConfiguration.trackingConsent) !== null && _e !== void 0 ? _e : TrackingConsent.GRANTED,\n    /**\n     * beacon payload max queue size implementation is 64kb\n     * ensure that we leave room for logs, rum and potential other users\n     */\n    batchBytesLimit: 16 * ONE_KIBI_BYTE,\n    eventRateLimiterThreshold: 3000,\n    maxTelemetryEventsPerPage: 15,\n    /**\n     * flush automatically, aim to be lower than ALB connection timeout\n     * to maximize connection reuse.\n     */\n    flushTimeout: 30 * ONE_SECOND,\n    /**\n     * Logs intake limit\n     */\n    batchMessagesLimit: 50,\n    messageBytesLimit: 256 * ONE_KIBI_BYTE\n  }, computeTransportConfiguration(initConfiguration));\n}\nexport function serializeConfiguration(initConfiguration) {\n  return {\n    session_sample_rate: initConfiguration.sessionSampleRate,\n    telemetry_sample_rate: initConfiguration.telemetrySampleRate,\n    telemetry_configuration_sample_rate: initConfiguration.telemetryConfigurationSampleRate,\n    telemetry_usage_sample_rate: initConfiguration.telemetryUsageSampleRate,\n    use_before_send: !!initConfiguration.beforeSend,\n    use_cross_site_session_cookie: initConfiguration.useCrossSiteSessionCookie,\n    use_partitioned_cross_site_session_cookie: initConfiguration.usePartitionedCrossSiteSessionCookie,\n    use_secure_session_cookie: initConfiguration.useSecureSessionCookie,\n    use_proxy: !!initConfiguration.proxy,\n    silent_multiple_init: initConfiguration.silentMultipleInit,\n    track_session_across_subdomains: initConfiguration.trackSessionAcrossSubdomains,\n    allow_fallback_to_local_storage: !!initConfiguration.allowFallbackToLocalStorage,\n    store_contexts_across_pages: !!initConfiguration.storeContextsAcrossPages,\n    allow_untrusted_events: !!initConfiguration.allowUntrustedEvents,\n    tracking_consent: initConfiguration.trackingConsent\n  };\n}","map":{"version":3,"names":["catchUserErrors","display","ExperimentalFeature","addExperimentalFeatures","ONE_SECOND","isPercentage","ONE_KIBI_BYTE","objectHasValue","assign","selectSessionStoreStrategyType","TrackingConsent","computeTransportConfiguration","DOC_LINK","DefaultPrivacyLevel","ALLOW","MASK","MASK_USER_INPUT","TraceContextInjection","ALL","SAMPLED","isDatadogSite","site","test","validateAndBuildConfiguration","initConfiguration","clientToken","error","sessionSampleRate","undefined","telemetrySampleRate","telemetryConfigurationSampleRate","telemetryUsageSampleRate","trackingConsent","concat","Array","isArray","enableExperimentalFeatures","filter","flag","beforeSend","sessionStoreStrategyType","_a","_b","_c","_d","service","silentMultipleInit","allowUntrustedEvents","_e","GRANTED","batchBytesLimit","eventRateLimiterThreshold","maxTelemetryEventsPerPage","flushTimeout","batchMessagesLimit","messageBytesLimit","serializeConfiguration","session_sample_rate","telemetry_sample_rate","telemetry_configuration_sample_rate","telemetry_usage_sample_rate","use_before_send","use_cross_site_session_cookie","useCrossSiteSessionCookie","use_partitioned_cross_site_session_cookie","usePartitionedCrossSiteSessionCookie","use_secure_session_cookie","useSecureSessionCookie","use_proxy","proxy","silent_multiple_init","track_session_across_subdomains","trackSessionAcrossSubdomains","allow_fallback_to_local_storage","allowFallbackToLocalStorage","store_contexts_across_pages","storeContextsAcrossPages","allow_untrusted_events","tracking_consent"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\configuration\\configuration.ts"],"sourcesContent":["import { catchUserErrors } from '../../tools/catchUserErrors'\nimport { display } from '../../tools/display'\nimport type { RawTelemetryConfiguration } from '../telemetry'\nimport { ExperimentalFeature, addExperimentalFeatures } from '../../tools/experimentalFeatures'\nimport type { Duration } from '../../tools/utils/timeUtils'\nimport { ONE_SECOND } from '../../tools/utils/timeUtils'\nimport { isPercentage } from '../../tools/utils/numberUtils'\nimport { ONE_KIBI_BYTE } from '../../tools/utils/byteUtils'\nimport { objectHasValue } from '../../tools/utils/objectUtils'\nimport { assign } from '../../tools/utils/polyfills'\nimport { selectSessionStoreStrategyType } from '../session/sessionStore'\nimport type { SessionStoreStrategyType } from '../session/storeStrategies/sessionStoreStrategy'\nimport { TrackingConsent } from '../trackingConsent'\nimport type { TransportConfiguration } from './transportConfiguration'\nimport { computeTransportConfiguration } from './transportConfiguration'\n\nexport const DOC_LINK = 'https://docs.datadoghq.com/getting_started/site/'\nexport const DefaultPrivacyLevel = {\n  ALLOW: 'allow',\n  MASK: 'mask',\n  MASK_USER_INPUT: 'mask-user-input',\n} as const\nexport type DefaultPrivacyLevel = (typeof DefaultPrivacyLevel)[keyof typeof DefaultPrivacyLevel]\n\nexport const TraceContextInjection = {\n  ALL: 'all',\n  SAMPLED: 'sampled',\n} as const\n\nexport type TraceContextInjection = (typeof TraceContextInjection)[keyof typeof TraceContextInjection]\n\nexport interface InitConfiguration {\n  // global options\n  clientToken: string\n  beforeSend?: GenericBeforeSendCallback | undefined\n  sessionSampleRate?: number | undefined\n  telemetrySampleRate?: number | undefined\n  silentMultipleInit?: boolean | undefined\n  allowFallbackToLocalStorage?: boolean | undefined\n  allowUntrustedEvents?: boolean | undefined\n  storeContextsAcrossPages?: boolean | undefined\n  trackingConsent?: TrackingConsent | undefined\n\n  // transport options\n  proxy?: string | ProxyFn | undefined\n  site?: string | undefined\n\n  // tag and context options\n  service?: string | undefined\n  env?: string | undefined\n  version?: string | undefined\n\n  // cookie options\n  /**\n   * @deprecated use usePartitionedCrossSiteSessionCookie instead\n   */\n  useCrossSiteSessionCookie?: boolean | undefined\n  usePartitionedCrossSiteSessionCookie?: boolean | undefined\n  useSecureSessionCookie?: boolean | undefined\n  trackSessionAcrossSubdomains?: boolean | undefined\n\n  // internal options\n  enableExperimentalFeatures?: string[] | undefined\n  replica?: ReplicaUserConfiguration | undefined\n  datacenter?: string\n  // TODO next major: remove this option and replace usages by proxyFn\n  internalAnalyticsSubdomain?: string\n\n  telemetryConfigurationSampleRate?: number\n  telemetryUsageSampleRate?: number\n}\n\n// This type is only used to build the core configuration. Logs and RUM SDKs are using a proper type\n// for this option.\ntype GenericBeforeSendCallback = (event: any, context?: any) => unknown\n\n/**\n * path: /api/vX/product\n * parameters: xxx=yyy&zzz=aaa\n */\ntype ProxyFn = (options: { path: string; parameters: string }) => string\n\ninterface ReplicaUserConfiguration {\n  applicationId?: string\n  clientToken: string\n}\n\nexport interface Configuration extends TransportConfiguration {\n  // Built from init configuration\n  beforeSend: GenericBeforeSendCallback | undefined\n  sessionStoreStrategyType: SessionStoreStrategyType | undefined\n  sessionSampleRate: number\n  telemetrySampleRate: number\n  telemetryConfigurationSampleRate: number\n  telemetryUsageSampleRate: number\n  service: string | undefined\n  silentMultipleInit: boolean\n  allowUntrustedEvents: boolean\n  trackingConsent: TrackingConsent\n\n  // Event limits\n  eventRateLimiterThreshold: number // Limit the maximum number of actions, errors and logs per minutes\n  maxTelemetryEventsPerPage: number\n\n  // Batch configuration\n  batchBytesLimit: number\n  flushTimeout: Duration\n  batchMessagesLimit: number\n  messageBytesLimit: number\n}\nfunction isDatadogSite(site: string) {\n  return /(datadog|ddog|datad0g|dd0g)/.test(site)\n}\n\nexport function validateAndBuildConfiguration(initConfiguration: InitConfiguration): Configuration | undefined {\n  if (!initConfiguration || !initConfiguration.clientToken) {\n    display.error('Client Token is not configured, we will not send any data.')\n    return\n  }\n\n  if (initConfiguration.sessionSampleRate !== undefined && !isPercentage(initConfiguration.sessionSampleRate)) {\n    display.error('Session Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  if (initConfiguration.telemetrySampleRate !== undefined && !isPercentage(initConfiguration.telemetrySampleRate)) {\n    display.error('Telemetry Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  if (\n    initConfiguration.telemetryConfigurationSampleRate !== undefined &&\n    !isPercentage(initConfiguration.telemetryConfigurationSampleRate)\n  ) {\n    display.error('Telemetry Configuration Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  if (\n    initConfiguration.telemetryUsageSampleRate !== undefined &&\n    !isPercentage(initConfiguration.telemetryUsageSampleRate)\n  ) {\n    display.error('Telemetry Usage Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  if (\n    initConfiguration.trackingConsent !== undefined &&\n    !objectHasValue(TrackingConsent, initConfiguration.trackingConsent)\n  ) {\n    display.error('Tracking Consent should be either \"granted\" or \"not-granted\"')\n    return\n  }\n\n  if (initConfiguration.site && !isDatadogSite(initConfiguration.site)) {\n    display.error(`Site should be a valid Datadog site. Learn more here: ${DOC_LINK}.`)\n    return\n  }\n\n  // Set the experimental feature flags as early as possible, so we can use them in most places\n  if (Array.isArray(initConfiguration.enableExperimentalFeatures)) {\n    addExperimentalFeatures(\n      initConfiguration.enableExperimentalFeatures.filter((flag): flag is ExperimentalFeature =>\n        objectHasValue(ExperimentalFeature, flag)\n      )\n    )\n  }\n\n  return assign(\n    {\n      beforeSend:\n        initConfiguration.beforeSend && catchUserErrors(initConfiguration.beforeSend, 'beforeSend threw an error:'),\n      sessionStoreStrategyType: selectSessionStoreStrategyType(initConfiguration),\n      sessionSampleRate: initConfiguration.sessionSampleRate ?? 100,\n      telemetrySampleRate: initConfiguration.telemetrySampleRate ?? 20,\n      telemetryConfigurationSampleRate: initConfiguration.telemetryConfigurationSampleRate ?? 5,\n      telemetryUsageSampleRate: initConfiguration.telemetryUsageSampleRate ?? 5,\n      service: initConfiguration.service,\n      silentMultipleInit: !!initConfiguration.silentMultipleInit,\n      allowUntrustedEvents: !!initConfiguration.allowUntrustedEvents,\n      trackingConsent: initConfiguration.trackingConsent ?? TrackingConsent.GRANTED,\n\n      /**\n       * beacon payload max queue size implementation is 64kb\n       * ensure that we leave room for logs, rum and potential other users\n       */\n      batchBytesLimit: 16 * ONE_KIBI_BYTE,\n\n      eventRateLimiterThreshold: 3000,\n      maxTelemetryEventsPerPage: 15,\n\n      /**\n       * flush automatically, aim to be lower than ALB connection timeout\n       * to maximize connection reuse.\n       */\n      flushTimeout: (30 * ONE_SECOND) as Duration,\n\n      /**\n       * Logs intake limit\n       */\n      batchMessagesLimit: 50,\n      messageBytesLimit: 256 * ONE_KIBI_BYTE,\n    },\n    computeTransportConfiguration(initConfiguration)\n  )\n}\n\nexport function serializeConfiguration(initConfiguration: InitConfiguration) {\n  return {\n    session_sample_rate: initConfiguration.sessionSampleRate,\n    telemetry_sample_rate: initConfiguration.telemetrySampleRate,\n    telemetry_configuration_sample_rate: initConfiguration.telemetryConfigurationSampleRate,\n    telemetry_usage_sample_rate: initConfiguration.telemetryUsageSampleRate,\n    use_before_send: !!initConfiguration.beforeSend,\n    use_cross_site_session_cookie: initConfiguration.useCrossSiteSessionCookie,\n    use_partitioned_cross_site_session_cookie: initConfiguration.usePartitionedCrossSiteSessionCookie,\n    use_secure_session_cookie: initConfiguration.useSecureSessionCookie,\n    use_proxy: !!initConfiguration.proxy,\n    silent_multiple_init: initConfiguration.silentMultipleInit,\n    track_session_across_subdomains: initConfiguration.trackSessionAcrossSubdomains,\n    allow_fallback_to_local_storage: !!initConfiguration.allowFallbackToLocalStorage,\n    store_contexts_across_pages: !!initConfiguration.storeContextsAcrossPages,\n    allow_untrusted_events: !!initConfiguration.allowUntrustedEvents,\n    tracking_consent: initConfiguration.trackingConsent,\n  } satisfies RawTelemetryConfiguration\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}