{"ast":null,"code":"import { flattenErrorCauses, tryToGetFingerprint } from '../error/error';\nimport { mergeObservables, Observable } from '../../tools/observable';\nimport { ConsoleApiName, globalConsole } from '../../tools/display';\nimport { callMonitored } from '../../tools/monitor';\nimport { sanitize } from '../../tools/serialisation/sanitize';\nimport { find } from '../../tools/utils/polyfills';\nimport { jsonStringify } from '../../tools/serialisation/jsonStringify';\nimport { computeStackTrace } from '../../tools/stackTrace/computeStackTrace';\nimport { createHandlingStack, toStackTraceString, formatErrorMessage } from '../../tools/stackTrace/handlingStack';\nvar consoleObservablesByApi = {};\nexport function initConsoleObservable(apis) {\n  var consoleObservables = apis.map(function (api) {\n    if (!consoleObservablesByApi[api]) {\n      consoleObservablesByApi[api] = createConsoleObservable(api);\n    }\n    return consoleObservablesByApi[api];\n  });\n  return mergeObservables.apply(void 0, consoleObservables);\n}\nexport function resetConsoleObservable() {\n  consoleObservablesByApi = {};\n}\nfunction createConsoleObservable(api) {\n  return new Observable(function (observable) {\n    var originalConsoleApi = globalConsole[api];\n    globalConsole[api] = function () {\n      var params = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        params[_i] = arguments[_i];\n      }\n      originalConsoleApi.apply(console, params);\n      var handlingStack = createHandlingStack();\n      callMonitored(function () {\n        observable.notify(buildConsoleLog(params, api, handlingStack));\n      });\n    };\n    return function () {\n      globalConsole[api] = originalConsoleApi;\n    };\n  });\n}\nfunction buildConsoleLog(params, api, handlingStack) {\n  var message = params.map(function (param) {\n    return formatConsoleParameters(param);\n  }).join(' ');\n  var stack;\n  var fingerprint;\n  var causes;\n  if (api === ConsoleApiName.error) {\n    var firstErrorParam = find(params, function (param) {\n      return param instanceof Error;\n    });\n    stack = firstErrorParam ? toStackTraceString(computeStackTrace(firstErrorParam)) : undefined;\n    fingerprint = tryToGetFingerprint(firstErrorParam);\n    causes = firstErrorParam ? flattenErrorCauses(firstErrorParam, 'console') : undefined;\n  }\n  return {\n    api: api,\n    message: message,\n    stack: stack,\n    handlingStack: handlingStack,\n    fingerprint: fingerprint,\n    causes: causes\n  };\n}\nfunction formatConsoleParameters(param) {\n  if (typeof param === 'string') {\n    return sanitize(param);\n  }\n  if (param instanceof Error) {\n    return formatErrorMessage(computeStackTrace(param));\n  }\n  return jsonStringify(sanitize(param), undefined, 2);\n}","map":{"version":3,"names":["flattenErrorCauses","tryToGetFingerprint","mergeObservables","Observable","ConsoleApiName","globalConsole","callMonitored","sanitize","find","jsonStringify","computeStackTrace","createHandlingStack","toStackTraceString","formatErrorMessage","consoleObservablesByApi","initConsoleObservable","apis","consoleObservables","map","api","createConsoleObservable","apply","resetConsoleObservable","observable","originalConsoleApi","params","_i","arguments","length","console","handlingStack","notify","buildConsoleLog","message","param","formatConsoleParameters","join","stack","fingerprint","causes","error","firstErrorParam","Error","undefined"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\domain\\console\\consoleObservable.ts"],"sourcesContent":["import { flattenErrorCauses, tryToGetFingerprint } from '../error/error'\nimport { mergeObservables, Observable } from '../../tools/observable'\nimport { ConsoleApiName, globalConsole } from '../../tools/display'\nimport { callMonitored } from '../../tools/monitor'\nimport { sanitize } from '../../tools/serialisation/sanitize'\nimport { find } from '../../tools/utils/polyfills'\nimport { jsonStringify } from '../../tools/serialisation/jsonStringify'\nimport type { RawErrorCause } from '../error/error.types'\nimport { computeStackTrace } from '../../tools/stackTrace/computeStackTrace'\nimport { createHandlingStack, toStackTraceString, formatErrorMessage } from '../../tools/stackTrace/handlingStack'\n\nexport interface ConsoleLog {\n  message: string\n  api: ConsoleApiName\n  stack?: string\n  handlingStack?: string\n  fingerprint?: string\n  causes?: RawErrorCause[]\n}\n\nlet consoleObservablesByApi: { [k in ConsoleApiName]?: Observable<ConsoleLog> } = {}\n\nexport function initConsoleObservable(apis: ConsoleApiName[]) {\n  const consoleObservables = apis.map((api) => {\n    if (!consoleObservablesByApi[api]) {\n      consoleObservablesByApi[api] = createConsoleObservable(api)\n    }\n    return consoleObservablesByApi[api]!\n  })\n\n  return mergeObservables<ConsoleLog>(...consoleObservables)\n}\n\nexport function resetConsoleObservable() {\n  consoleObservablesByApi = {}\n}\n\nfunction createConsoleObservable(api: ConsoleApiName) {\n  return new Observable<ConsoleLog>((observable) => {\n    const originalConsoleApi = globalConsole[api]\n\n    globalConsole[api] = (...params: unknown[]) => {\n      originalConsoleApi.apply(console, params)\n      const handlingStack = createHandlingStack()\n\n      callMonitored(() => {\n        observable.notify(buildConsoleLog(params, api, handlingStack))\n      })\n    }\n\n    return () => {\n      globalConsole[api] = originalConsoleApi\n    }\n  })\n}\n\nfunction buildConsoleLog(params: unknown[], api: ConsoleApiName, handlingStack: string): ConsoleLog {\n  const message = params.map((param) => formatConsoleParameters(param)).join(' ')\n  let stack\n  let fingerprint\n  let causes\n\n  if (api === ConsoleApiName.error) {\n    const firstErrorParam = find(params, (param: unknown): param is Error => param instanceof Error)\n    stack = firstErrorParam ? toStackTraceString(computeStackTrace(firstErrorParam)) : undefined\n    fingerprint = tryToGetFingerprint(firstErrorParam)\n    causes = firstErrorParam ? flattenErrorCauses(firstErrorParam, 'console') : undefined\n  }\n\n  return {\n    api,\n    message,\n    stack,\n    handlingStack,\n    fingerprint,\n    causes,\n  }\n}\n\nfunction formatConsoleParameters(param: unknown) {\n  if (typeof param === 'string') {\n    return sanitize(param)\n  }\n  if (param instanceof Error) {\n    return formatErrorMessage(computeStackTrace(param))\n  }\n  return jsonStringify(sanitize(param), undefined, 2)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}