{"ast":null,"code":"/**\n * LIMITATION:\n * For NPM setup, this feature flag singleton is shared between RUM and Logs product.\n * This means that an experimental flag set on the RUM product will be set on the Logs product.\n * So keep in mind that in certain configurations, your experimental feature flag may affect other products.\n *\n * FORMAT:\n * All feature flags should be snake_cased\n */\n// We want to use a real enum (i.e. not a const enum) here, to be able to check whether an arbitrary\n// string is an expected feature flag\n// eslint-disable-next-line no-restricted-syntax\nexport var ExperimentalFeature;\n(function (ExperimentalFeature) {\n  ExperimentalFeature[\"PAGEHIDE\"] = \"pagehide\";\n  ExperimentalFeature[\"RESOURCE_PAGE_STATES\"] = \"resource_page_states\";\n  ExperimentalFeature[\"COLLECT_FLUSH_REASON\"] = \"collect_flush_reason\";\n  ExperimentalFeature[\"ZERO_LCP_TELEMETRY\"] = \"zero_lcp_telemetry\";\n  ExperimentalFeature[\"DISABLE_REPLAY_INLINE_CSS\"] = \"disable_replay_inline_css\";\n  ExperimentalFeature[\"WRITABLE_RESOURCE_GRAPHQL\"] = \"writable_resource_graphql\";\n  ExperimentalFeature[\"CUSTOM_VITALS\"] = \"custom_vitals\";\n  ExperimentalFeature[\"TOLERANT_RESOURCE_TIMINGS\"] = \"tolerant_resource_timings\";\n})(ExperimentalFeature || (ExperimentalFeature = {}));\nvar enabledExperimentalFeatures = new Set();\nexport function addExperimentalFeatures(enabledFeatures) {\n  enabledFeatures.forEach(function (flag) {\n    enabledExperimentalFeatures.add(flag);\n  });\n}\nexport function isExperimentalFeatureEnabled(featureName) {\n  return enabledExperimentalFeatures.has(featureName);\n}\nexport function resetExperimentalFeatures() {\n  enabledExperimentalFeatures.clear();\n}\nexport function getExperimentalFeatures() {\n  return enabledExperimentalFeatures;\n}","map":{"version":3,"names":["ExperimentalFeature","enabledExperimentalFeatures","Set","addExperimentalFeatures","enabledFeatures","forEach","flag","add","isExperimentalFeatureEnabled","featureName","has","resetExperimentalFeatures","clear","getExperimentalFeatures"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-core\\src\\tools\\experimentalFeatures.ts"],"sourcesContent":["/**\n * LIMITATION:\n * For NPM setup, this feature flag singleton is shared between RUM and Logs product.\n * This means that an experimental flag set on the RUM product will be set on the Logs product.\n * So keep in mind that in certain configurations, your experimental feature flag may affect other products.\n *\n * FORMAT:\n * All feature flags should be snake_cased\n */\n// We want to use a real enum (i.e. not a const enum) here, to be able to check whether an arbitrary\n// string is an expected feature flag\n// eslint-disable-next-line no-restricted-syntax\nexport enum ExperimentalFeature {\n  PAGEHIDE = 'pagehide',\n  RESOURCE_PAGE_STATES = 'resource_page_states',\n  COLLECT_FLUSH_REASON = 'collect_flush_reason',\n  ZERO_LCP_TELEMETRY = 'zero_lcp_telemetry',\n  DISABLE_REPLAY_INLINE_CSS = 'disable_replay_inline_css',\n  WRITABLE_RESOURCE_GRAPHQL = 'writable_resource_graphql',\n  CUSTOM_VITALS = 'custom_vitals',\n  TOLERANT_RESOURCE_TIMINGS = 'tolerant_resource_timings',\n}\n\nconst enabledExperimentalFeatures: Set<ExperimentalFeature> = new Set()\n\nexport function addExperimentalFeatures(enabledFeatures: ExperimentalFeature[]): void {\n  enabledFeatures.forEach((flag) => {\n    enabledExperimentalFeatures.add(flag)\n  })\n}\n\nexport function isExperimentalFeatureEnabled(featureName: ExperimentalFeature): boolean {\n  return enabledExperimentalFeatures.has(featureName)\n}\n\nexport function resetExperimentalFeatures(): void {\n  enabledExperimentalFeatures.clear()\n}\n\nexport function getExperimentalFeatures(): Set<ExperimentalFeature> {\n  return enabledExperimentalFeatures\n}\n"],"mappings":"AAAA;;;;;;;;;AASA;AACA;AACA;AACA,WAAYA,mBASX;AATD,WAAYA,mBAAmB;EAC7BA,mBAAA,yBAAqB;EACrBA,mBAAA,iDAA6C;EAC7CA,mBAAA,iDAA6C;EAC7CA,mBAAA,6CAAyC;EACzCA,mBAAA,2DAAuD;EACvDA,mBAAA,2DAAuD;EACvDA,mBAAA,mCAA+B;EAC/BA,mBAAA,2DAAuD;AACzD,CAAC,EATWA,mBAAmB,KAAnBA,mBAAmB;AAW/B,IAAMC,2BAA2B,GAA6B,IAAIC,GAAG,EAAE;AAEvE,OAAM,SAAUC,uBAAuBA,CAACC,eAAsC;EAC5EA,eAAe,CAACC,OAAO,CAAC,UAACC,IAAI;IAC3BL,2BAA2B,CAACM,GAAG,CAACD,IAAI,CAAC;EACvC,CAAC,CAAC;AACJ;AAEA,OAAM,SAAUE,4BAA4BA,CAACC,WAAgC;EAC3E,OAAOR,2BAA2B,CAACS,GAAG,CAACD,WAAW,CAAC;AACrD;AAEA,OAAM,SAAUE,yBAAyBA,CAAA;EACvCV,2BAA2B,CAACW,KAAK,EAAE;AACrC;AAEA,OAAM,SAAUC,uBAAuBA,CAAA;EACrC,OAAOZ,2BAA2B;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}