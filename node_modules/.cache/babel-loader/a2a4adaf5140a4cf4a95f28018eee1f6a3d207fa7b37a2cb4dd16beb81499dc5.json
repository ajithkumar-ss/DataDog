{"ast":null,"code":"import { assign } from '@datadog/browser-core';\nexport function buildReplayPayload(data, metadata, rawSegmentBytesCount) {\n  var formData = new FormData();\n  formData.append('segment', new Blob([data], {\n    type: 'application/octet-stream'\n  }), \"\".concat(metadata.session.id, \"-\").concat(metadata.start));\n  var metadataAndSegmentSizes = assign({\n    raw_segment_size: rawSegmentBytesCount,\n    compressed_segment_size: data.byteLength\n  }, metadata);\n  var serializedMetadataAndSegmentSizes = JSON.stringify(metadataAndSegmentSizes);\n  formData.append('event', new Blob([serializedMetadataAndSegmentSizes], {\n    type: 'application/json'\n  }));\n  return {\n    data: formData,\n    bytesCount: data.byteLength\n  };\n}","map":{"version":3,"names":["assign","buildReplayPayload","data","metadata","rawSegmentBytesCount","formData","FormData","append","Blob","type","concat","session","id","start","metadataAndSegmentSizes","raw_segment_size","compressed_segment_size","byteLength","serializedMetadataAndSegmentSizes","JSON","stringify","bytesCount"],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\segmentCollection\\buildReplayPayload.ts"],"sourcesContent":["import type { Payload } from '@datadog/browser-core'\nimport { assign } from '@datadog/browser-core'\nimport type { BrowserSegmentMetadata } from '../../types'\n\nexport type BrowserSegmentMetadataAndSegmentSizes = BrowserSegmentMetadata & {\n  raw_segment_size: number\n  compressed_segment_size: number\n}\n\nexport function buildReplayPayload(\n  data: Uint8Array,\n  metadata: BrowserSegmentMetadata,\n  rawSegmentBytesCount: number\n): Payload {\n  const formData = new FormData()\n\n  formData.append(\n    'segment',\n    new Blob([data], {\n      type: 'application/octet-stream',\n    }),\n    `${metadata.session.id}-${metadata.start}`\n  )\n\n  const metadataAndSegmentSizes: BrowserSegmentMetadataAndSegmentSizes = assign(\n    {\n      raw_segment_size: rawSegmentBytesCount,\n      compressed_segment_size: data.byteLength,\n    },\n    metadata\n  )\n  const serializedMetadataAndSegmentSizes = JSON.stringify(metadataAndSegmentSizes)\n  formData.append('event', new Blob([serializedMetadataAndSegmentSizes], { type: 'application/json' }))\n\n  return { data: formData, bytesCount: data.byteLength }\n}\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,uBAAuB;AAQ9C,OAAM,SAAUC,kBAAkBA,CAChCC,IAAgB,EAChBC,QAAgC,EAChCC,oBAA4B;EAE5B,IAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;EAE/BD,QAAQ,CAACE,MAAM,CACb,SAAS,EACT,IAAIC,IAAI,CAAC,CAACN,IAAI,CAAC,EAAE;IACfO,IAAI,EAAE;GACP,CAAC,EACF,GAAAC,MAAA,CAAGP,QAAQ,CAACQ,OAAO,CAACC,EAAE,OAAAF,MAAA,CAAIP,QAAQ,CAACU,KAAK,CAAE,CAC3C;EAED,IAAMC,uBAAuB,GAA0Cd,MAAM,CAC3E;IACEe,gBAAgB,EAAEX,oBAAoB;IACtCY,uBAAuB,EAAEd,IAAI,CAACe;GAC/B,EACDd,QAAQ,CACT;EACD,IAAMe,iCAAiC,GAAGC,IAAI,CAACC,SAAS,CAACN,uBAAuB,CAAC;EACjFT,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAIC,IAAI,CAAC,CAACU,iCAAiC,CAAC,EAAE;IAAET,IAAI,EAAE;EAAkB,CAAE,CAAC,CAAC;EAErG,OAAO;IAAEP,IAAI,EAAEG,QAAQ;IAAEgB,UAAU,EAAEnB,IAAI,CAACe;EAAU,CAAE;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}