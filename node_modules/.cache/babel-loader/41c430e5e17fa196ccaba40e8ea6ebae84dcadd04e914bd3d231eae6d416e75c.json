{"ast":null,"code":"import { throttle, DOM_EVENT, addEventListeners, timeStampNow, noop } from '@datadog/browser-core';\nimport { initViewportObservable } from '@datadog/browser-rum-core';\nimport { IncrementalSource, RecordType } from '../../../types';\nimport { getVisualViewport } from '../viewports';\nimport { assembleIncrementalSnapshot } from '../assembly';\nvar VISUAL_VIEWPORT_OBSERVER_THRESHOLD = 200;\nexport function trackViewportResize(configuration, viewportResizeCb) {\n  var viewportResizeSubscription = initViewportObservable(configuration).subscribe(function (data) {\n    viewportResizeCb(assembleIncrementalSnapshot(IncrementalSource.ViewportResize, data));\n  });\n  return {\n    stop: function () {\n      viewportResizeSubscription.unsubscribe();\n    }\n  };\n}\nexport function tackVisualViewportResize(configuration, visualViewportResizeCb) {\n  var visualViewport = window.visualViewport;\n  if (!visualViewport) {\n    return {\n      stop: noop\n    };\n  }\n  var _a = throttle(function () {\n      visualViewportResizeCb({\n        data: getVisualViewport(visualViewport),\n        type: RecordType.VisualViewport,\n        timestamp: timeStampNow()\n      });\n    }, VISUAL_VIEWPORT_OBSERVER_THRESHOLD, {\n      trailing: false\n    }),\n    updateDimension = _a.throttled,\n    cancelThrottle = _a.cancel;\n  var removeListener = addEventListeners(configuration, visualViewport, [DOM_EVENT.RESIZE, DOM_EVENT.SCROLL], updateDimension, {\n    capture: true,\n    passive: true\n  }).stop;\n  return {\n    stop: function () {\n      removeListener();\n      cancelThrottle();\n    }\n  };\n}","map":{"version":3,"names":["throttle","DOM_EVENT","addEventListeners","timeStampNow","noop","initViewportObservable","IncrementalSource","RecordType","getVisualViewport","assembleIncrementalSnapshot","VISUAL_VIEWPORT_OBSERVER_THRESHOLD","trackViewportResize","configuration","viewportResizeCb","viewportResizeSubscription","subscribe","data","ViewportResize","stop","unsubscribe","tackVisualViewportResize","visualViewportResizeCb","visualViewport","window","_a","type","VisualViewport","timestamp","trailing","updateDimension","throttled","cancelThrottle","cancel","removeListener","RESIZE","SCROLL","capture","passive"],"sources":["D:\\edu'\\Spritle\\spritle\\node_modules\\@datadog\\browser-rum\\src\\domain\\record\\trackers\\trackViewportResize.ts"],"sourcesContent":["import { throttle, DOM_EVENT, addEventListeners, timeStampNow, noop } from '@datadog/browser-core'\nimport type { RumConfiguration, ViewportDimension } from '@datadog/browser-rum-core'\nimport { initViewportObservable } from '@datadog/browser-rum-core'\nimport { IncrementalSource, RecordType } from '../../../types'\nimport type { BrowserIncrementalSnapshotRecord, ViewportResizeData, VisualViewportRecord } from '../../../types'\nimport { getVisualViewport } from '../viewports'\nimport { assembleIncrementalSnapshot } from '../assembly'\nimport type { Tracker } from './types'\n\nconst VISUAL_VIEWPORT_OBSERVER_THRESHOLD = 200\n\nexport type ViewportResizeCallback = (incrementalSnapshotRecord: BrowserIncrementalSnapshotRecord) => void\n\nexport type VisualViewportResizeCallback = (visualViewportRecord: VisualViewportRecord) => void\n\nexport function trackViewportResize(\n  configuration: RumConfiguration,\n  viewportResizeCb: ViewportResizeCallback\n): Tracker {\n  const viewportResizeSubscription = initViewportObservable(configuration).subscribe((data: ViewportDimension) => {\n    viewportResizeCb(assembleIncrementalSnapshot<ViewportResizeData>(IncrementalSource.ViewportResize, data))\n  })\n\n  return {\n    stop: () => {\n      viewportResizeSubscription.unsubscribe()\n    },\n  }\n}\n\nexport function tackVisualViewportResize(\n  configuration: RumConfiguration,\n  visualViewportResizeCb: VisualViewportResizeCallback\n): Tracker {\n  const visualViewport = window.visualViewport\n  if (!visualViewport) {\n    return { stop: noop }\n  }\n  const { throttled: updateDimension, cancel: cancelThrottle } = throttle(\n    () => {\n      visualViewportResizeCb({\n        data: getVisualViewport(visualViewport),\n        type: RecordType.VisualViewport,\n        timestamp: timeStampNow(),\n      })\n    },\n    VISUAL_VIEWPORT_OBSERVER_THRESHOLD,\n    {\n      trailing: false,\n    }\n  )\n  const { stop: removeListener } = addEventListeners(\n    configuration,\n    visualViewport,\n    [DOM_EVENT.RESIZE, DOM_EVENT.SCROLL],\n    updateDimension,\n    {\n      capture: true,\n      passive: true,\n    }\n  )\n\n  return {\n    stop: () => {\n      removeListener()\n      cancelThrottle()\n    },\n  }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,IAAI,QAAQ,uBAAuB;AAElG,SAASC,sBAAsB,QAAQ,2BAA2B;AAClE,SAASC,iBAAiB,EAAEC,UAAU,QAAQ,gBAAgB;AAE9D,SAASC,iBAAiB,QAAQ,cAAc;AAChD,SAASC,2BAA2B,QAAQ,aAAa;AAGzD,IAAMC,kCAAkC,GAAG,GAAG;AAM9C,OAAM,SAAUC,mBAAmBA,CACjCC,aAA+B,EAC/BC,gBAAwC;EAExC,IAAMC,0BAA0B,GAAGT,sBAAsB,CAACO,aAAa,CAAC,CAACG,SAAS,CAAC,UAACC,IAAuB;IACzGH,gBAAgB,CAACJ,2BAA2B,CAAqBH,iBAAiB,CAACW,cAAc,EAAED,IAAI,CAAC,CAAC;EAC3G,CAAC,CAAC;EAEF,OAAO;IACLE,IAAI,EAAE,SAAAA,CAAA;MACJJ,0BAA0B,CAACK,WAAW,EAAE;IAC1C;GACD;AACH;AAEA,OAAM,SAAUC,wBAAwBA,CACtCR,aAA+B,EAC/BS,sBAAoD;EAEpD,IAAMC,cAAc,GAAGC,MAAM,CAACD,cAAc;EAC5C,IAAI,CAACA,cAAc,EAAE;IACnB,OAAO;MAAEJ,IAAI,EAAEd;IAAI,CAAE;EACvB;EACM,IAAAoB,EAAA,GAAyDxB,QAAQ,CACrE;MACEqB,sBAAsB,CAAC;QACrBL,IAAI,EAAER,iBAAiB,CAACc,cAAc,CAAC;QACvCG,IAAI,EAAElB,UAAU,CAACmB,cAAc;QAC/BC,SAAS,EAAExB,YAAY;OACxB,CAAC;IACJ,CAAC,EACDO,kCAAkC,EAClC;MACEkB,QAAQ,EAAE;KACX,CACF;IAZkBC,eAAe,GAAAL,EAAA,CAAAM,SAAA;IAAUC,cAAc,GAAAP,EAAA,CAAAQ,MAYzD;EACO,IAAMC,cAAc,GAAK/B,iBAAiB,CAChDU,aAAa,EACbU,cAAc,EACd,CAACrB,SAAS,CAACiC,MAAM,EAAEjC,SAAS,CAACkC,MAAM,CAAC,EACpCN,eAAe,EACf;IACEO,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE;GACV,CACF,CAAAnB,IAT2B;EAW5B,OAAO;IACLA,IAAI,EAAE,SAAAA,CAAA;MACJe,cAAc,EAAE;MAChBF,cAAc,EAAE;IAClB;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}