{"ast":null,"code":"/* eslint-disable */\n/**\n * DO NOT MODIFY IT BY HAND. Run `yarn rum-events-format:sync` instead.\n */\nexport {};","map":{"version":3,"names":[],"sources":["D:\\edu'\\Spritle\\Spritle\\node_modules\\@datadog\\browser-rum\\src\\types\\sessionReplay.ts"],"sourcesContent":["/* eslint-disable */\n/**\n * DO NOT MODIFY IT BY HAND. Run `yarn rum-events-format:sync` instead.\n */\n\n/**\n * Browser-specific. Schema of a Session Replay data Segment.\n */\nexport type BrowserSegment = BrowserSegmentMetadata & {\n  /**\n   * The records contained by this Segment.\n   */\n  readonly records: BrowserRecord[]\n}\n/**\n * Browser-specific. Schema of a Session Replay Segment metadata.\n */\nexport type BrowserSegmentMetadata = SegmentContext &\n  CommonSegmentMetadataSchema & {\n    /**\n     * The source of this record\n     */\n    source: 'browser'\n    creation_reason: CreationReason\n  }\n/**\n * The reason this Segment was created. For mobile there is only one possible value for this, which is always the default value.\n */\nexport type CreationReason =\n  | 'init'\n  | 'segment_duration_limit'\n  | 'segment_bytes_limit'\n  | 'view_change'\n  | 'before_unload'\n  | 'visibility_hidden'\n  | 'page_frozen'\n/**\n * Browser-specific. Schema of a Session Replay Record.\n */\nexport type BrowserRecord =\n  | BrowserFullSnapshotRecord\n  | BrowserIncrementalSnapshotRecord\n  | MetaRecord\n  | FocusRecord\n  | ViewEndRecord\n  | VisualViewportRecord\n  | FrustrationRecord\n/**\n * Browser-specific. Schema of a Record type which contains the full snapshot of a screen.\n */\nexport type BrowserFullSnapshotRecord = SlotSupportedCommonRecordSchema & {\n  /**\n   * The type of this Record.\n   */\n  readonly type: 2\n  data: BrowserNode\n}\n/**\n * Schema of common properties for a Record event type that is supported by slots.\n */\nexport type SlotSupportedCommonRecordSchema = CommonRecordSchema & {\n  /**\n   * Unique ID of the slot that generated this record.\n   */\n  readonly slotId?: string\n}\n/**\n * Serialized node contained by this Record.\n */\nexport type SerializedNodeWithId = {\n  id: number\n} & SerializedNode\n/**\n * Serialized node contained by this Record.\n */\nexport type SerializedNode = DocumentNode | DocumentFragmentNode | DocumentTypeNode | ElementNode | TextNode | CDataNode\n/**\n * Browser-specific. Schema of a Record type which contains mutations of a screen.\n */\nexport type BrowserIncrementalSnapshotRecord = SlotSupportedCommonRecordSchema & {\n  /**\n   * The type of this Record.\n   */\n  readonly type: 3\n  data: BrowserIncrementalData\n  id?: number\n}\n/**\n * Browser-specific. Schema of a Session Replay IncrementalData type.\n */\nexport type BrowserIncrementalData =\n  | BrowserMutationData\n  | MousemoveData\n  | MouseInteractionData\n  | ScrollData\n  | InputData\n  | MediaInteractionData\n  | StyleSheetRuleData\n  | ViewportResizeData\n  | PointerInteractionData\n/**\n * Browser-specific. Schema of a MutationData.\n */\nexport type BrowserMutationData = {\n  /**\n   * The source of this type of incremental data.\n   */\n  readonly source: 0\n} & BrowserMutationPayload\n/**\n * Browser-specific. Schema of a MutationPayload.\n */\nexport type BrowserMutationPayload = {\n  /**\n   * Contains the newly added nodes.\n   */\n  adds: AddedNodeMutation[]\n  /**\n   * Contains the removed nodes.\n   */\n  removes: RemovedNodeMutation[]\n  /**\n   * Contains the updated attribute mutations.\n   */\n  attributes: AttributeMutation[]\n  /**\n   * Contains the updated text mutations.\n   */\n  texts: TextMutation[]\n}\n/**\n * Browser-specific. Schema of a MouseInteractionData.\n */\nexport type MouseInteractionData = {\n  /**\n   * The source of this type of incremental data.\n   */\n  readonly source: 2\n} & MouseInteraction\n/**\n * Browser-specific. Schema of a MouseInteraction.\n */\nexport type MouseInteraction =\n  | {\n      /**\n       * The type of MouseInteraction: 0=mouseup, 1=mousedown, 2=click, 3=contextmenu, 4=dblclick, 7=touchstart, 9=touchend\n       */\n      readonly type: 0 | 1 | 2 | 3 | 4 | 7 | 9\n      /**\n       * Id for the target node for this MouseInteraction.\n       */\n      id: number\n      /**\n       * X-axis coordinate for this MouseInteraction.\n       */\n      x: number\n      /**\n       * Y-axis coordinate for this MouseInteraction.\n       */\n      y: number\n    }\n  | {\n      /**\n       * The type of MouseInteraction: 5=focus, 6=blur\n       */\n      readonly type: 5 | 6\n      /**\n       * Id for the target node for this MouseInteraction.\n       */\n      id: number\n    }\n/**\n * Browser-specific. Schema of a ScrollData.\n */\nexport type ScrollData = {\n  /**\n   * The source of this type of incremental data.\n   */\n  readonly source: 3\n} & ScrollPosition\n/**\n * Browser-specific. Schema of an InputData.\n */\nexport type InputData = {\n  /**\n   * The source of this type of incremental data.\n   */\n  readonly source: 5\n  /**\n   * Id for the target node for this InputData.\n   */\n  id: number\n} & InputState\n/**\n * Browser-specific. Schema of an InputState.\n */\nexport type InputState =\n  | {\n      /**\n       * Text value for this InputState.\n       */\n      text: string\n    }\n  | {\n      /**\n       * Checked state for this InputState.\n       */\n      isChecked: boolean\n    }\n/**\n * Browser-specific. Schema of a MediaInteractionData.\n */\nexport type MediaInteractionData = {\n  /**\n   * The source of this type of incremental data.\n   */\n  readonly source: 7\n} & MediaInteraction\n/**\n * Browser-specific. Schema of a StyleSheetRuleData.\n */\nexport type StyleSheetRuleData = {\n  /**\n   * The source of this type of incremental data.\n   */\n  readonly source: 8\n} & StyleSheetRule\n/**\n * Schema of a ViewportResizeData.\n */\nexport type ViewportResizeData = {\n  /**\n   * The source of this type of incremental data.\n   */\n  readonly source: 4\n} & ViewportResizeDimension\n/**\n * Schema of a PointerInteractionData.\n */\nexport type PointerInteractionData = {\n  /**\n   * The source of this type of incremental data.\n   */\n  readonly source: 9\n} & PointerInteraction\n/**\n * Schema of a Record which contains the screen properties.\n */\nexport type MetaRecord = SlotSupportedCommonRecordSchema & {\n  /**\n   * The type of this Record.\n   */\n  readonly type: 4\n  /**\n   * The data contained by this record.\n   */\n  data: {\n    /**\n     * The width of the screen in pixels, normalized based on the device pixels per inch density (DPI). Example: if a device has a DPI = 2, the normalized width is the current width divided by 2.\n     */\n    width: number\n    /**\n     * The height of the screen in pixels, normalized based on the device pixels per inch density (DPI). Example: if a device has a DPI = 2, the normalized height is the current height divided by 2.\n     */\n    height: number\n    /**\n     * Browser-specific. URL of the view described by this record.\n     */\n    href?: string\n  }\n}\n/**\n * Schema of a Record type which contains focus information.\n */\nexport type FocusRecord = SlotSupportedCommonRecordSchema & {\n  /**\n   * The type of this Record.\n   */\n  readonly type: 6\n  data: {\n    /**\n     * Whether this screen has a focus or not. For now it will always be true for mobile.\n     */\n    readonly has_focus: boolean\n  }\n}\n/**\n * Schema of a Record which signifies that view lifecycle ended.\n */\nexport type ViewEndRecord = SlotSupportedCommonRecordSchema & {\n  /**\n   * The type of this Record.\n   */\n  readonly type: 7\n}\n/**\n * Schema of a Record which signifies that the viewport properties have changed.\n */\nexport type VisualViewportRecord = SlotSupportedCommonRecordSchema & {\n  data: {\n    height: number\n    offsetLeft: number\n    offsetTop: number\n    pageLeft: number\n    pageTop: number\n    scale: number\n    width: number\n  }\n  /**\n   * The type of this Record.\n   */\n  readonly type: 8\n}\n/**\n * Schema of a Record which signifies a collection of frustration signals.\n */\nexport type FrustrationRecord = SlotSupportedCommonRecordSchema & {\n  /**\n   * The type of this Record.\n   */\n  readonly type: 9\n  /**\n   * Schema of a Session Replay FrustrationRecord data structure type.\n   */\n  data: {\n    /**\n     * Collection of frustration signal types.\n     */\n    frustrationTypes: ('rage_click' | 'error_click' | 'dead_click')[]\n    /**\n     * Collection of frustration signal event IDs.\n     */\n    recordIds: number[]\n  }\n}\n\n/**\n * Schema of a Session Replay Segment context.\n */\nexport interface SegmentContext {\n  /**\n   * Application properties\n   */\n  application: {\n    /**\n     * UUID of the application\n     */\n    id: string\n  }\n  /**\n   * Session properties\n   */\n  session: {\n    /**\n     * UUID of the session\n     */\n    id: string\n  }\n  /**\n   * View properties\n   */\n  view: {\n    /**\n     * UUID of the view\n     */\n    id: string\n  }\n}\n/**\n * Schema of common properties for a Segment Metadata type.\n */\nexport interface CommonSegmentMetadataSchema {\n  /**\n   * The start UTC timestamp in milliseconds corresponding to the first record in the Segment data. Each timestamp is computed as the UTC interval since 00:00:00.000 01.01.1970.\n   */\n  start: number\n  /**\n   * The end UTC timestamp in milliseconds corresponding to the last record in the Segment data. Each timestamp is computed as the UTC interval since 00:00:00.000 01.01.1970.\n   */\n  end: number\n  /**\n   * The number of records in this Segment.\n   */\n  records_count: number\n  /**\n   * The index of this Segment in the segments list that was recorded for this view ID. Starts from 0.\n   */\n  index_in_view?: number\n  /**\n   * Whether this Segment contains a full snapshot record or not.\n   */\n  has_full_snapshot?: boolean\n}\n/**\n * Schema of common properties for a Record event type.\n */\nexport interface CommonRecordSchema {\n  /**\n   * Defines the UTC time in milliseconds when this Record was performed.\n   */\n  timestamp: number\n}\n/**\n * Schema of a Node type.\n */\nexport interface BrowserNode {\n  node: SerializedNodeWithId\n  /**\n   * Initial node offset position.\n   */\n  initialOffset: {\n    /**\n     * Top position offset for this node.\n     */\n    top: number\n    /**\n     * Left position offset for this node.\n     */\n    left: number\n  }\n}\n/**\n * Schema of a Document Node.\n */\nexport interface DocumentNode {\n  /**\n   * The type of this Node.\n   */\n  readonly type: 0\n  /**\n   * Stylesheet added dynamically\n   */\n  readonly adoptedStyleSheets?: StyleSheet[]\n  childNodes: SerializedNodeWithId[]\n}\n/**\n * Browser-specific. Schema of a StyleSheet\n */\nexport interface StyleSheet {\n  /**\n   * CSS rules applied (rule.cssText)\n   */\n  cssRules: string[]\n  /**\n   * MediaList of the stylesheet\n   */\n  media?: string[]\n  /**\n   * Is the stylesheet disabled\n   */\n  disabled?: boolean\n}\n/**\n * Schema of a Document FragmentNode.\n */\nexport interface DocumentFragmentNode {\n  /**\n   * The type of this Node.\n   */\n  readonly type: 11\n  /**\n   * Stylesheet added dynamically\n   */\n  readonly adoptedStyleSheets?: StyleSheet[]\n  /**\n   * Is this node a shadow root or not\n   */\n  readonly isShadowRoot: boolean\n  childNodes: SerializedNodeWithId[]\n}\n/**\n * Schema of a Document Type Node.\n */\nexport interface DocumentTypeNode {\n  /**\n   * The type of this Node.\n   */\n  readonly type: 1\n  /**\n   * Name for this DocumentType\n   */\n  name: string\n  /**\n   * PublicId for this DocumentType\n   */\n  publicId: string\n  /**\n   * SystemId for this DocumentType\n   */\n  systemId: string\n}\n/**\n * Schema of an Element Node.\n */\nexport interface ElementNode {\n  /**\n   * The type of this Node.\n   */\n  readonly type: 2\n  /**\n   * TagName for this Node\n   */\n  tagName: string\n  attributes: Attributes\n  childNodes: SerializedNodeWithId[]\n  /**\n   * Is this node a SVG instead of a HTML\n   */\n  isSVG?: true\n}\n/**\n * Schema of an Attributes type.\n */\nexport interface Attributes {\n  [k: string]: string | number | boolean\n}\n/**\n * Schema of a Text Node.\n */\nexport interface TextNode {\n  /**\n   * The type of this Node.\n   */\n  readonly type: 3\n  /**\n   * Text value for this Text Node\n   */\n  textContent: string\n  isStyle?: true\n}\n/**\n * Schema of a CData Node.\n */\nexport interface CDataNode {\n  /**\n   * The type of this Node.\n   */\n  readonly type: 4\n  textContent: ''\n}\n/**\n * Schema of an AddedNodeMutation.\n */\nexport interface AddedNodeMutation {\n  node: SerializedNodeWithId\n  /**\n   * Id for the parent node for this AddedNodeMutation.\n   */\n  parentId: number\n  nextId: number | null\n  previousId?: number | null\n}\n/**\n * Schema of a RemovedNodeMutation.\n */\nexport interface RemovedNodeMutation {\n  /**\n   * Id of the mutated node.\n   */\n  id: number\n  /**\n   * Id for the parent node for this RemovedNodeMutation\n   */\n  parentId: number\n}\n/**\n * Schema of an AttributeMutation.\n */\nexport interface AttributeMutation {\n  /**\n   * Id of the mutated node.\n   */\n  id: number\n  /**\n   * Attributes for this AttributeMutation\n   */\n  attributes: {\n    [k: string]: string | null\n  }\n}\n/**\n * Schema of a TextMutation.\n */\nexport interface TextMutation {\n  /**\n   * Id of the mutated node.\n   */\n  id: number\n  /**\n   * Value for this TextMutation\n   */\n  value: null | string\n}\n/**\n * Browser-specific. Schema of a MousemoveData.\n */\nexport interface MousemoveData {\n  /**\n   * The source of this type of incremental data.\n   */\n  readonly source: 1 | 6\n  /**\n   * Positions reported for this MousemoveData.\n   */\n  positions: MousePosition[]\n}\n/**\n * Browser-specific. Schema of a MousePosition.\n */\nexport interface MousePosition {\n  /**\n   * X-axis coordinate for this MousePosition.\n   */\n  x: number\n  /**\n   * Y-axis coordinate for this MousePosition.\n   */\n  y: number\n  /**\n   * Id for the target node for this MousePosition.\n   */\n  id: number\n  /**\n   * Observed time offset for this MousePosition.\n   */\n  timeOffset: number\n}\n/**\n * Browser-specific. Schema of a ScrollPosition.\n */\nexport interface ScrollPosition {\n  /**\n   * Id for the target node for this ScrollPosition.\n   */\n  id: number\n  /**\n   * X-axis coordinate for this ScrollPosition.\n   */\n  x: number\n  /**\n   * Y-axis coordinate for this ScrollPosition.\n   */\n  y: number\n}\n/**\n * Browser-specific. Schema of a MediaInteraction.\n */\nexport interface MediaInteraction {\n  /**\n   * Id for the target node for this MediaInteraction.\n   */\n  id: number\n  /**\n   * The type of MediaInteraction.\n   */\n  readonly type: 0 | 1\n}\n/**\n * Browser-specific. Schema of a StyleSheetRule.\n */\nexport interface StyleSheetRule {\n  /**\n   * Id of the owner node for this StyleSheetRule.\n   */\n  readonly id: number\n  /**\n   * Rules added to this StyleSheetRule.\n   */\n  adds?: StyleSheetAddRule[]\n  /**\n   * Rules deleted from this StyleSheetRule.\n   */\n  removes?: StyleSheetDeleteRule[]\n}\n/**\n * Browser-specific. Schema of a StyleSheetAddRule.\n */\nexport interface StyleSheetAddRule {\n  /**\n   * Text content for this StyleSheetAddRule.\n   */\n  rule: string\n  /**\n   * Index of this StyleSheetAddRule in its StyleSheet.\n   */\n  index?: number | number[]\n}\n/**\n * Browser-specific. Schema of a StyleSheetDeleteRule.\n */\nexport interface StyleSheetDeleteRule {\n  /**\n   * Index of this StyleSheetDeleteRule in its StyleSheet.\n   */\n  index: number | number[]\n}\n/**\n * Schema of a ViewportResizeDimension.\n */\nexport interface ViewportResizeDimension {\n  /**\n   * The new width of the screen in pixels, normalized based on the device pixels per inch density (DPI). Example: if a device has a DPI = 2, the width is divided by 2 to get a normalized width.\n   */\n  width: number\n  /**\n   * The new height of the screen in pixels, normalized based on the device pixels per inch density (DPI). Example: if a device has a DPI = 2, the height is divided by 2 to get a normalized height.\n   */\n  height: number\n}\n/**\n * Schema of a PointerInteraction.\n */\nexport interface PointerInteraction {\n  /**\n   * Schema of an PointerEventType\n   */\n  readonly pointerEventType: 'down' | 'up' | 'move'\n  /**\n   * Schema of an PointerType\n   */\n  readonly pointerType: 'mouse' | 'touch' | 'pen'\n  /**\n   * Id of the pointer of this PointerInteraction.\n   */\n  pointerId: number\n  /**\n   * X-axis coordinate for this PointerInteraction.\n   */\n  x: number\n  /**\n   * Y-axis coordinate for this PointerInteraction.\n   */\n  y: number\n}\n"],"mappings":"AAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}